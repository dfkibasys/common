openapi: 3.0.2
info:
  description: OpenApi Spec for Camunda BPM REST API.
  license:
    name: Apache License 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  title: Camunda BPM REST API
  version: 7.14.0
externalDocs:
  description: Find out more about Camunda Rest API
  url: https://docs.camunda.org/manual/7.14/reference/rest/overview/
servers:
- description: The API server for the default process engine
  url: http://{host}:{port}/{contextPath}
  variables:
    host:
      default: localhost
    port:
      default: "8080"
    contextPath:
      default: engine-rest
- description: The API server for a named process engine
  url: http://{host}:{port}/{contextPath}/engine/{engineName}
  variables:
    host:
      default: localhost
    port:
      default: "8080"
    contextPath:
      default: engine-rest
    engineName:
      default: default
tags:
- name: Condition
- name: Deployment
- name: Engine
- name: Event Subscription
- name: External Task
- name: Historic Activity Instance
- name: Historic Process Instance
- name: Incident
- name: Message
- name: Metrics
- name: Process Definition
- name: Process Instance
- name: Signal
- name: Schema Log
- name: Task
- name: Task Attachment
- name: Task Comment
- name: Task Identity Link
- name: Task Local Variable
- name: Task Variable
- name: Telemetry
- name: User
- name: Version
paths:
  /condition:
    post:
      description: "Triggers evaluation of conditions for conditional start event(s).\
        \ \nInternally this maps to the engines condition evaluation builder method\
        \ ConditionEvaluationBuilder#evaluateStartConditions(). \nFor more information\
        \ see the [Conditional Start Events](https://docs.camunda.org/manual/7.14/reference/bpmn20/events/conditional-events/#conditional-start-event)\n\
        section of the [BPMN 2.0 Implementation Reference](https://docs.camunda.org/manual/7.14/reference/bpmn20/)."
      operationId: evaluateCondition
      requestBody:
        content:
          application/json:
            examples:
              example-1:
                description: The content of the Request Body
                summary: POST /condition
                value:
                  variables:
                    temperature:
                      value: 24
                      type: Integer
                      valueInfo:
                        transient: true
                    city:
                      value: Parma
                      type: String
                  businessKey: aBusinessKey
                  tenantId: aTenantId
            schema:
              $ref: '#/components/schemas/EvaluationConditionDto'
      responses:
        "200":
          content:
            application/json:
              examples:
                example-1:
                  description: The Response content of a status 200
                  summary: Status 200 Response
                  value:
                  - links: []
                    id: aProcInstId
                    definitionId: aProcDefId
                    businessKey: aBusinessKey
                    caseInstanceId: null
                    ended: false
                    suspended: false
                    tenantId: aTenantId
                  - links: []
                    id: anotherId
                    definitionId: aProcDefId
                    businessKey: aBusinessKey
                    caseInstanceId: null
                    ended: false
                    suspended: false
                    tenantId: aTenantId
              schema:
                items:
                  $ref: '#/components/schemas/ProcessInstanceDto'
                type: array
          description: Request successful.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
          description: If both tenantId and withoutTenantId are supplied.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthorizationExceptionDto'
          description: If the user is not allowed to start the process instance of
            the process definition, which start condition was evaluated to `true`.
      tags:
      - Condition
      x-contentType: application/json
      x-accepts: application/json
  /deployment:
    get:
      description: |-
        Queries for deployments that fulfill given parameters. Parameters may be the properties of deployments,
        such as the id or name or a range of the deployment time. The size of the result set can be retrieved by
        using the [Get Deployment count](https://docs.camunda.org/manual/7.14/reference/rest/deployment/get-query-count/) method.
      operationId: getDeployments
      parameters:
      - description: Filter by deployment id
        explode: true
        in: query
        name: id
        required: false
        schema:
          type: string
        style: form
      - description: Filter by the deployment name. Exact match.
        explode: true
        in: query
        name: name
        required: false
        schema:
          type: string
        style: form
      - description: |-
          Filter by the deployment name that the parameter is a substring of. The parameter can include the
          wildcard `%` to express like-strategy such as: starts with (`%`name), ends with (name`%`) or contains
          (`%`name`%`).
        explode: true
        in: query
        name: nameLike
        required: false
        schema:
          type: string
        style: form
      - description: Filter by the deployment source.
        explode: true
        in: query
        name: source
        required: false
        schema:
          type: string
        style: form
      - description: Filter by the deployment source whereby source is equal to `null`.
        explode: true
        in: query
        name: withoutSource
        required: false
        schema:
          default: false
          type: boolean
        style: form
      - description: Filter by a comma-separated list of tenant ids. A deployment
          must have one of the given tenant ids.
        explode: true
        in: query
        name: tenantIdIn
        required: false
        schema:
          type: string
        style: form
      - description: |-
          Only include deployments which belong to no tenant. Value may only be `true`, as `false` is the default
          behavior.
        explode: true
        in: query
        name: withoutTenantId
        required: false
        schema:
          default: false
          type: boolean
        style: form
      - description: |-
          Include deployments which belong to no tenant. Can be used in combination with `tenantIdIn`. Value may
          only be `true`, as `false` is the default behavior.
        explode: true
        in: query
        name: includeDeploymentsWithoutTenantId
        required: false
        schema:
          default: false
          type: boolean
        style: form
      - description: |-
          Restricts to all deployments after the given date.
          By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format
          `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
        explode: true
        in: query
        name: after
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - description: |-
          Restricts to all deployments before the given date.
          By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format
          `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
        explode: true
        in: query
        name: before
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - description: |-
          Sort the results lexicographically by a given criterion.
          Must be used in conjunction with the sortOrder parameter.
        explode: true
        in: query
        name: sortBy
        required: false
        schema:
          type: string
        style: form
      - description: |-
          Sort the results in a given order. Values may be asc for ascending order or desc for descending order.
          Must be used in conjunction with the sortBy parameter.
        explode: true
        in: query
        name: sortOrder
        required: false
        schema:
          enum:
          - asc
          - desc
          type: string
        style: form
      - description: Pagination of results. Specifies the index of the first result
          to return.
        explode: true
        in: query
        name: firstResult
        required: false
        schema:
          type: integer
        style: form
      - description: |-
          Pagination of results. Specifies the maximum number of results to return.
          Will return less results if there are no more results left.
        explode: true
        in: query
        name: maxResults
        required: false
        schema:
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              examples:
                example-1:
                  summary: GET `/deployment?name=deploymentName`
                  value:
                  - id: someId
                    name: deploymentName
                    source: process application
                    tenantId: null
                    deploymentTime: 2013-04-23T13:42:43.000+0200
              schema:
                items:
                  $ref: '#/components/schemas/DeploymentDto'
                type: array
          description: Request successful.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
          description: |-
            Returned if some of the query parameters are invalid, for example if a `sortOrder` parameter is supplied,
            but no `sortBy`, or if an invalid operator for variable comparison is used. See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
      tags:
      - Deployment
      x-accepts: application/json
  /deployment/count:
    get:
      description: |-
        Queries for the number of deployments that fulfill given parameters. Takes the same parameters as the
        [Get Deployments](https://docs.camunda.org/manual/7.14/reference/rest/deployment/get-query/) method.
      operationId: getDeploymentsCount
      parameters:
      - description: Filter by deployment id
        explode: true
        in: query
        name: id
        required: false
        schema:
          type: string
        style: form
      - description: Filter by the deployment name. Exact match.
        explode: true
        in: query
        name: name
        required: false
        schema:
          type: string
        style: form
      - description: |-
          Filter by the deployment name that the parameter is a substring of. The parameter can include the
          wildcard `%` to express like-strategy such as: starts with (`%`name), ends with (name`%`) or contains
          (`%`name`%`).
        explode: true
        in: query
        name: nameLike
        required: false
        schema:
          type: string
        style: form
      - description: Filter by the deployment source.
        explode: true
        in: query
        name: source
        required: false
        schema:
          type: string
        style: form
      - description: Filter by the deployment source whereby source is equal to `null`.
        explode: true
        in: query
        name: withoutSource
        required: false
        schema:
          default: false
          type: boolean
        style: form
      - description: Filter by a comma-separated list of tenant ids. A deployment
          must have one of the given tenant ids.
        explode: true
        in: query
        name: tenantIdIn
        required: false
        schema:
          type: string
        style: form
      - description: |-
          Only include deployments which belong to no tenant. Value may only be `true`, as `false` is the default
          behavior.
        explode: true
        in: query
        name: withoutTenantId
        required: false
        schema:
          default: false
          type: boolean
        style: form
      - description: |-
          Include deployments which belong to no tenant. Can be used in combination with `tenantIdIn`. Value may
          only be `true`, as `false` is the default behavior.
        explode: true
        in: query
        name: includeDeploymentsWithoutTenantId
        required: false
        schema:
          default: false
          type: boolean
        style: form
      - description: |-
          Restricts to all deployments after the given date.
          By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format
          `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
        explode: true
        in: query
        name: after
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - description: |-
          Restricts to all deployments before the given date.
          By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format
          `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
        explode: true
        in: query
        name: before
        required: false
        schema:
          format: date-time
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              examples:
                example-1:
                  summary: GET `/deployment/count?name=deploymentName`
                  value:
                    count: 1
              schema:
                $ref: '#/components/schemas/CountResultDto'
          description: Request successful.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
          description: |-
            Returned if some of the query parameters are invalid, for example, if an invalid operator for variable
            comparison is used. See the [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
      tags:
      - Deployment
      x-accepts: application/json
  /deployment/create:
    post:
      description: |-
        Creates a deployment.

        **Security Consideration**

        Deployments can contain custom code in form of scripts or EL expressions to customize process behavior.
        This may be abused for remote execution of arbitrary code.
      operationId: createDeployment
      requestBody:
        content:
          multipart/form-data:
            examples:
              example-1:
                summary: POST `/deployment/create`
                value:
                - links:
                  - method: GET
                    href: http://localhost:38080/rest-test/deployment/aDeploymentId
                    rel: self
                  id: aDeploymentId
                  name: aName
                  source: process application
                  deploymentTime: 2013-01-23T13:59:43.000+0200
                  tenantId: null
                  deployedProcessDefinitions:
                    aProcDefId:
                      id: aProcDefId
                      key: aKey
                      category: aCategory
                      description: aDescription
                      name: aName
                      version: 42
                      resource: aResourceName
                      deploymentId: aDeploymentId
                      diagram: aResourceName.png
                      suspended: true
                      tenantId: null
                      versionTag: null
                  deployedCaseDefinitions: null
                  deployedDecisionDefinitions: null
                  deployedDecisionRequirementsDefinitions: null
            schema:
              $ref: '#/components/schemas/MultiFormDeploymentDto'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeploymentWithDefinitionsDto'
          description: Request successful.
        "400":
          content:
            application/json:
              examples:
                example-1:
                  summary: GET /deployment?name=deploymentName
                  value:
                  - type: ParseException
                    message: 'ENGINE-09005 Could not parse BPMN process. Errors: Exclusive
                      Gateway ''ExclusiveGateway_1'' has outgoing sequence flow ''SequenceFlow_0''
                      without condition which is not the default flow.'
                    details:
                      invoice.bpmn:
                        errors:
                        - message: Exclusive Gateway 'ExclusiveGateway_1' has outgoing
                            sequence flow 'SequenceFlow_0' without condition which
                            is not the default flow.
                          line: 77
                          column: 15
                          mainBpmnElementId: ExclusiveGateway_1
                          bpmnElementIds:
                          - ExclusiveGateway_1
                          - SequenceFlow_0
                        warnings:
                        - message: It is not recommended to use a cancelling boundary
                            timer event with a time cycle.
                          line: 87
                          column: 20
                          mainBpmnElementId: BoundaryEvent_1
                          bpmnElementIds:
                          - BoundaryEvent_1
              schema:
                $ref: '#/components/schemas/ParseExceptionDto'
          description: |-
            Bad Request. In case one of the bpmn resources cannot be parsed.

            See the [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#parse-exceptions) for
            the error response format.
      tags:
      - Deployment
      x-contentType: multipart/form-data
      x-accepts: application/json
  /deployment/{id}:
    delete:
      description: Deletes a deployment by id.
      operationId: deleteDeployment
      parameters:
      - description: The id of the deployment to be deleted.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - description: |-
          `true`, if all process instances, historic process instances and jobs for this deployment
          should be deleted.
        explode: true
        in: query
        name: cascade
        required: false
        schema:
          default: false
          type: boolean
        style: form
      - description: '`true`, if only the built-in ExecutionListeners should be notified
          with the end event.'
        explode: true
        in: query
        name: skipCustomListeners
        required: false
        schema:
          default: false
          type: boolean
        style: form
      - description: '`true`, if all input/output mappings should not be invoked.'
        explode: true
        in: query
        name: skipIoMappings
        required: false
        schema:
          default: false
          type: boolean
        style: form
      responses:
        "204":
          description: Request successful.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
          description: |-
            A Deployment with the provided id does not exist. See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
      tags:
      - Deployment
      x-accepts: application/json
    get:
      description: Retrieves a deployment by id, according to the `Deployment` interface
        of the engine.
      operationId: getDeployment
      parameters:
      - description: The id of the deployment.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              examples:
                example-1:
                  summary: GET `/deployments/someDeploymentId`
                  value:
                    id: someDeploymentId
                    name: deploymentName
                    source: process application
                    deploymentTime: 2013-04-23T13:42:43.000+0200
              schema:
                items:
                  $ref: '#/components/schemas/DeploymentDto'
                type: array
          description: Request successful.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
          description: |-
            Deployment with given id does not exist. See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
      tags:
      - Deployment
      x-accepts: application/json
  /deployment/{id}/redeploy:
    post:
      description: |-
        Re-deploys an existing deployment.

        The deployment resources to re-deploy can be restricted by using the properties `resourceIds` or
        `resourceNames`. If no deployment resources to re-deploy are passed then all existing resources of the
        given deployment are re-deployed.

        **Warning**: Deployments can contain custom code in form of scripts or EL expressions to customize
        process behavior. This may be abused for remote execution of arbitrary code. See the section on
        [security considerations for custom code](https://docs.camunda.org/manual/7.14/user-guide/process-engine/securing-custom-code/) in
        the user guide for details.
      operationId: redeploy
      parameters:
      - description: The id of the deployment to re-deploy.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            examples:
              example-1:
                summary: POST `/deployment/anDeploymentId/redeploy`
                value:
                  resourceIds:
                  - aResourceId
                  resourceNames:
                  - aResourceName
                  source: cockpit
            schema:
              $ref: '#/components/schemas/RedeploymentDto'
      responses:
        "200":
          content:
            application/json:
              examples:
                example-1:
                  summary: Status 200 Response
                  value:
                    links:
                    - method: GET
                      href: http://localhost:38080/rest-test/deployment/aDeploymentId
                      rel: self
                    id: aDeploymentId
                    name: aName
                    source: cockpit
                    deploymentTime: 2015-10-13T13:59:43.000+0200
                    tenantId: null
                    deployedProcessDefinitions:
                      aProcDefId:
                        id: aProcDefId
                        key: aKey
                        category: aCategory
                        description: aDescription
                        name: aName
                        version: 42
                        resource: aResourceName
                        deploymentId: aDeploymentId
                        diagram: aResourceName.png
                        suspended: true
                        tenantId: null
                        versionTag: null
                    deployedCaseDefinitions: null
                    deployedDecisionDefinitions: null
                    deployedDecisionRequirementsDefinitions: null
              schema:
                $ref: '#/components/schemas/DeploymentWithDefinitionsDto'
          description: Request successful.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
          description: |-
            Deployment or a deployment resource for the given deployment does not exist. See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
      tags:
      - Deployment
      x-contentType: application/json
      x-accepts: application/json
  /deployment/{id}/resources:
    get:
      description: Retrieves all deployment resources of a given deployment.
      operationId: getDeploymentResources
      parameters:
      - description: The id of the deployment to retrieve the deployment resources
          for.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              examples:
                example-1:
                  summary: GET `/deployment/anDeploymentId/resources`
                  value:
                  - id: anResourceId
                    name: anResourceName
                    deploymentId: anDeploymentId
                  - id: anotherResourceId
                    name: anotherResourceName
                    deploymentId: anDeploymentId
              schema:
                items:
                  $ref: '#/components/schemas/DeploymentResourceDto'
                type: array
          description: Request successful.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
          description: |-
            Deployment resources for the given deployment do not exist. See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
      tags:
      - Deployment
      x-accepts: application/json
  /deployment/{id}/resources/{resourceId}:
    get:
      description: Retrieves a deployment resource by resource id for the given deployment.
      operationId: getDeploymentResource
      parameters:
      - description: The id of the deployment
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - description: The id of the deployment resource
        explode: false
        in: path
        name: resourceId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              examples:
                example-1:
                  summary: GET `/deployments/someDeploymentId/resources/someResourceId`
                  value:
                    id: someResourceId
                    name: someResourceName
                    deploymentId: someDeploymentId
              schema:
                $ref: '#/components/schemas/DeploymentResourceDto'
          description: Request successful.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
          description: |-
            Deployment Resource with given resource id or deployment id does not exist. See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
      tags:
      - Deployment
      x-accepts: application/json
  /deployment/{id}/resources/{resourceId}/data:
    get:
      description: Retrieves the binary content of a deployment resource for the given
        deployment by id.
      operationId: getDeploymentResourceData
      parameters:
      - description: The id of the deployment.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - description: The id of the deployment resource.
        explode: false
        in: path
        name: resourceId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/octet-stream:
              schema:
                description: For files without any MIME type information, a byte stream
                  is returned.
                format: binary
                type: string
            '*/*':
              schema:
                description: |-
                  Files with MIME type information are returned as the saved type. For example, a
                                              `process.bpmn` resource will have the media type `application/xml`.
                format: binary
                type: string
          description: Request successful. The media type of the response depends
            on the filename.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
          description: |-
            Deployment Resource with given resource id or deployment id does not exist. See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
      tags:
      - Deployment
      x-accepts: application/json
  /engine:
    get:
      description: |-
        Retrieves the names of all process engines available on your platform.
        **Note**: You cannot prepend `/engine/{name}` to this method.
      operationId: getProcessEngineNames
      responses:
        "200":
          content:
            application/json:
              examples:
                example-1:
                  value:
                  - name: default
                  - name: anotherEngineName
              schema:
                items:
                  $ref: '#/components/schemas/ProcessEngineDto'
                type: array
          description: Request successful.
      tags:
      - Engine
      x-accepts: application/json
  /event-subscription:
    get:
      description: |-
        Queries for event subscriptions that fulfill given parameters.
        The size of the result set can be retrieved by using the
        [Get Event Subscriptions count](https://docs.camunda.org/manual/7.14/reference/rest/event-subscription/get-query-count/) method.
      operationId: getEventSubscriptions
      parameters:
      - description: Only select subscription with the given id.
        explode: true
        in: query
        name: eventSubscriptionId
        required: false
        schema:
          type: string
        style: form
      - description: Only select subscriptions for events with the given name.
        explode: true
        in: query
        name: eventName
        required: false
        schema:
          type: string
        style: form
      - description: |-
          Only select subscriptions for events with the given type.
          Valid values: `message`, `signal`, `compensate` and `conditional`.
        explode: true
        in: query
        name: eventType
        required: false
        schema:
          enum:
          - message
          - signal
          - compensate
          - conditional
          type: string
        style: form
      - description: Only select subscriptions that belong to an execution with the
          given id.
        explode: true
        in: query
        name: executionId
        required: false
        schema:
          type: string
        style: form
      - description: Only select subscriptions that belong to a process instance with
          the given id.
        explode: true
        in: query
        name: processInstanceId
        required: false
        schema:
          type: string
        style: form
      - description: Only select subscriptions that belong to an activity with the
          given id.
        explode: true
        in: query
        name: activityId
        required: false
        schema:
          type: string
        style: form
      - description: |-
          Filter by a comma-separated list of tenant ids.
          Only select subscriptions that belong to one of the given tenant ids.
        explode: true
        in: query
        name: tenantIdIn
        required: false
        schema:
          type: string
        style: form
      - description: |-
          Only select subscriptions which have no tenant id.
          Value may only be `true`, as `false` is the default behavior.
        explode: true
        in: query
        name: withoutTenantId
        required: false
        schema:
          type: boolean
        style: form
      - description: |-
          Select event subscriptions which have no tenant id.
          Can be used in combination with tenantIdIn parameter.
          Value may only be `true`, as `false` is the default behavior.
        explode: true
        in: query
        name: includeEventSubscriptionsWithoutTenantId
        required: false
        schema:
          type: boolean
        style: form
      - description: |-
          Sort the results lexicographically by a given criterion.
          Must be used in conjunction with the sortOrder parameter.
        explode: true
        in: query
        name: sortBy
        required: false
        schema:
          enum:
          - created
          - tenantId
          type: string
        style: form
      - description: |-
          Sort the results in a given order. Values may be asc for ascending order or desc for descending order.
          Must be used in conjunction with the sortBy parameter.
        explode: true
        in: query
        name: sortOrder
        required: false
        schema:
          enum:
          - asc
          - desc
          type: string
        style: form
      - description: Pagination of results. Specifies the index of the first result
          to return.
        explode: true
        in: query
        name: firstResult
        required: false
        schema:
          type: integer
        style: form
      - description: |-
          Pagination of results. Specifies the maximum number of results to return.
          Will return less results if there are no more results left.
        explode: true
        in: query
        name: maxResults
        required: false
        schema:
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              examples:
                example-1:
                  summary: GET `/event-subscription?eventType=message&sortBy=created&sortOrder=desc`
                  value:
                  - id: anId
                    eventType: message
                    eventName: anEventName
                    executionId: anExecutionId
                    processInstanceId: aProcessInstanceId
                    activityId: anActivityId
                    createdDate: 2020-04-20T15:23:12.229+0200
                    tenantId: null
                  - id: anotherId
                    eventType: message
                    eventName: anotherEventName
                    executionId: anotherExecutionId
                    processInstanceId: anotherProcessInstanceId
                    activityId: anotherActivityId
                    createdDate: 2020-04-20T15:20:12.229+0200
                    tenantId: null
              schema:
                items:
                  $ref: '#/components/schemas/EventSubscriptionDto'
                type: array
          description: Request successful.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
          description: |-
            Bad Request
            Returned if some of the query parameters are invalid,
            for example if a `sortOrder` parameter is supplied, but no `sortBy`.
            See the [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
      tags:
      - Event Subscription
      x-accepts: application/json
  /event-subscription/count:
    get:
      description: |-
        Queries for the number of event subscriptions that fulfill given parameters.
        Takes the same parameters as the
        [Get Event Subscriptions](https://docs.camunda.org/manual/7.14/reference/rest/event-subscription/get-query/) method.
      operationId: getEventSubscriptionsCount
      parameters:
      - description: Only select subscription with the given id.
        explode: true
        in: query
        name: eventSubscriptionId
        required: false
        schema:
          type: string
        style: form
      - description: Only select subscriptions for events with the given name.
        explode: true
        in: query
        name: eventName
        required: false
        schema:
          type: string
        style: form
      - description: |-
          Only select subscriptions for events with the given type.
          Valid values: `message`, `signal`, `compensate` and `conditional`.
        explode: true
        in: query
        name: eventType
        required: false
        schema:
          enum:
          - message
          - signal
          - compensate
          - conditional
          type: string
        style: form
      - description: Only select subscriptions that belong to an execution with the
          given id.
        explode: true
        in: query
        name: executionId
        required: false
        schema:
          type: string
        style: form
      - description: Only select subscriptions that belong to a process instance with
          the given id.
        explode: true
        in: query
        name: processInstanceId
        required: false
        schema:
          type: string
        style: form
      - description: Only select subscriptions that belong to an activity with the
          given id.
        explode: true
        in: query
        name: activityId
        required: false
        schema:
          type: string
        style: form
      - description: |-
          Filter by a comma-separated list of tenant ids.
          Only select subscriptions that belong to one of the given tenant ids.
        explode: true
        in: query
        name: tenantIdIn
        required: false
        schema:
          type: string
        style: form
      - description: |-
          Only select subscriptions which have no tenant id.
          Value may only be `true`, as `false` is the default behavior.
        explode: true
        in: query
        name: withoutTenantId
        required: false
        schema:
          type: boolean
        style: form
      - description: |-
          Select event subscriptions which have no tenant id.
          Can be used in combination with tenantIdIn parameter.
          Value may only be `true`, as `false` is the default behavior.
        explode: true
        in: query
        name: includeEventSubscriptionsWithoutTenantId
        required: false
        schema:
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/json:
              examples:
                example-1:
                  summary: GET `/event-subscription/count`
                  value:
                    count: 1
              schema:
                $ref: '#/components/schemas/CountResultDto'
          description: Request successful.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
          description: |-
            Returned if some of the query parameters are invalid.
            See the [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
      tags:
      - Event Subscription
      x-accepts: application/json
  /external-task:
    get:
      description: |-
        Queries for the external tasks that fulfill given parameters. Parameters may be static as well as dynamic
        runtime properties of executions. The size of the result set can be retrieved by using the
        [Get External Task Count](https://docs.camunda.org/manual/7.14/reference/rest/external-task/get-query-count/) method.
      operationId: getExternalTasks
      parameters:
      - description: Filter by an external task's id.
        explode: true
        in: query
        name: externalTaskId
        required: false
        schema:
          type: string
        style: form
      - description: Filter by the comma-separated list of external task ids.
        explode: true
        in: query
        name: externalTaskIdIn
        required: false
        schema:
          type: string
        style: form
      - description: Filter by an external task topic.
        explode: true
        in: query
        name: topicName
        required: false
        schema:
          type: string
        style: form
      - description: Filter by the id of the worker that the task was most recently
          locked by.
        explode: true
        in: query
        name: workerId
        required: false
        schema:
          type: string
        style: form
      - description: |-
          Only include external tasks that are currently locked (i.e., they have a lock time and it has not expired).
          Value may only be `true`, as `false` matches any external task.
        explode: true
        in: query
        name: locked
        required: false
        schema:
          type: boolean
        style: form
      - description: |-
          Only include external tasks that are currently not locked (i.e., they have no lock or it has expired).
          Value may only be `true`, as `false` matches any external task.
        explode: true
        in: query
        name: notLocked
        required: false
        schema:
          type: boolean
        style: form
      - description: |-
          Only include external tasks that have a positive (&gt; 0) number of retries (or `null`). Value may only be
          `true`, as `false` matches any external task.
        explode: true
        in: query
        name: withRetriesLeft
        required: false
        schema:
          type: boolean
        style: form
      - description: |-
          Only include external tasks that have 0 retries. Value may only be `true`, as `false` matches any
          external task.
        explode: true
        in: query
        name: noRetriesLeft
        required: false
        schema:
          type: boolean
        style: form
      - description: |-
          Restrict to external tasks that have a lock that expires after a given date. By
          [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format
          `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
        explode: true
        in: query
        name: lockExpirationAfter
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - description: |-
          Restrict to external tasks that have a lock that expires before a given date. By
          [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format
          `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
        explode: true
        in: query
        name: lockExpirationBefore
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - description: Filter by the id of the activity that an external task is created
          for.
        explode: true
        in: query
        name: activityId
        required: false
        schema:
          type: string
        style: form
      - description: Filter by the comma-separated list of ids of the activities that
          an external task is created for.
        explode: true
        in: query
        name: activityIdIn
        required: false
        schema:
          type: string
        style: form
      - description: Filter by the id of the execution that an external task belongs
          to.
        explode: true
        in: query
        name: executionId
        required: false
        schema:
          type: string
        style: form
      - description: Filter by the id of the process instance that an external task
          belongs to.
        explode: true
        in: query
        name: processInstanceId
        required: false
        schema:
          type: string
        style: form
      - description: Filter by a comma-separated list of process instance ids that
          an external task may belong to.
        explode: true
        in: query
        name: processInstanceIdIn
        required: false
        schema:
          type: string
        style: form
      - description: Filter by the id of the process definition that an external task
          belongs to.
        explode: true
        in: query
        name: processDefinitionId
        required: false
        schema:
          type: string
        style: form
      - description: |-
          Filter by a comma-separated list of tenant ids.
          An external task must have one of the given tenant ids.
        explode: true
        in: query
        name: tenantIdIn
        required: false
        schema:
          type: string
        style: form
      - description: Only include active tasks. Value may only be `true`, as `false`
          matches any external task.
        explode: true
        in: query
        name: active
        required: false
        schema:
          type: boolean
        style: form
      - description: Only include suspended tasks. Value may only be `true`, as `false`
          matches any external task.
        explode: true
        in: query
        name: suspended
        required: false
        schema:
          type: boolean
        style: form
      - description: |-
          Only include jobs with a priority higher than or equal to the given value.
          Value must be a valid `long` value.
        explode: true
        in: query
        name: priorityHigherThanOrEquals
        required: false
        schema:
          format: int64
          type: integer
        style: form
      - description: |-
          Only include jobs with a priority lower than or equal to the given value.
          Value must be a valid `long` value.
        explode: true
        in: query
        name: priorityLowerThanOrEquals
        required: false
        schema:
          format: int64
          type: integer
        style: form
      - description: |-
          Sort the results lexicographically by a given criterion.
          Must be used in conjunction with the sortOrder parameter.
        explode: true
        in: query
        name: sortBy
        required: false
        schema:
          enum:
          - id
          - lockExpirationTime
          - processInstanceId
          - processDefinitionId
          - processDefinitionKey
          - taskPriority
          - tenantId
          type: string
        style: form
      - description: |-
          Sort the results in a given order. Values may be asc for ascending order or desc for descending order.
          Must be used in conjunction with the sortBy parameter.
        explode: true
        in: query
        name: sortOrder
        required: false
        schema:
          enum:
          - asc
          - desc
          type: string
        style: form
      - description: Pagination of results. Specifies the index of the first result
          to return.
        explode: true
        in: query
        name: firstResult
        required: false
        schema:
          type: integer
        style: form
      - description: |-
          Pagination of results. Specifies the maximum number of results to return.
          Will return less results if there are no more results left.
        explode: true
        in: query
        name: maxResults
        required: false
        schema:
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              examples:
                example-1:
                  summary: GET /external-task?topicName=aTopic
                  value:
                  - activityId: anActivityId
                    activityInstanceId: anActivityInstanceId
                    errorMessage: anErrorMessage
                    executionId: anExecutionId
                    id: anExternalTaskId
                    lockExpirationTime: 2015-10-06T16:34:42.000+0200
                    processDefinitionId: aProcessDefinitionId
                    processDefinitionKey: aProcessDefinitionKey
                    processInstanceId: aProcessInstanceId
                    tenantId: null
                    retries: 3
                    suspended: false
                    workerId: aWorkerId
                    topicName: aTopic
                    priority: 9
                    businessKey: aBusinessKey
                  - activityId: anotherActivityId
                    activityInstanceId: anotherActivityInstanceId
                    errorMessage: anotherErrorMessage
                    executionId: anotherExecutionId
                    id: anotherExternalTaskId
                    lockExpirationTime: 2015-10-06T16:34:42.000+0200
                    processDefinitionId: anotherProcessDefinitionId
                    processDefinitionKey: anotherProcessDefinitionKey
                    processInstanceId: anotherProcessInstanceId
                    tenantId: null
                    retries: 1
                    suspended: false
                    workerId: aWorkerId
                    topicName: aTopic
                    priority: 3
                    businessKey: aBusinessKey
              schema:
                items:
                  $ref: '#/components/schemas/ExternalTaskDto'
                type: array
          description: Request successful.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
          description: |-
            Returned if some of the query parameters are invalid, for example if a `sortOrder` parameter is supplied,
            but no `sortBy`. See the [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
      tags:
      - External Task
      x-accepts: application/json
    post:
      description: |-
        Queries for external tasks that fulfill given parameters in the form of a JSON object.

        This method is slightly more powerful than the
        [Get External Tasks](https://docs.camunda.org/manual/7.14/reference/rest/external-task/get-query/) method because it allows to
        specify a hierarchical result sorting.
      operationId: queryExternalTasks
      parameters:
      - description: Pagination of results. Specifies the index of the first result
          to return.
        explode: true
        in: query
        name: firstResult
        required: false
        schema:
          type: integer
        style: form
      - description: |-
          Pagination of results. Specifies the maximum number of results to return.
          Will return less results if there are no more results left.
        explode: true
        in: query
        name: maxResults
        required: false
        schema:
          type: integer
        style: form
      requestBody:
        content:
          application/json:
            examples:
              example-1:
                summary: POST /external-task
                value:
                  processDefinitionId: aProcessDefinitionId
                  sorting:
                  - sortBy: processDefinitionKey
                    sortOrder: asc
                  - sortBy: lockExpirationTime
                    sortOrder: desc
            schema:
              $ref: '#/components/schemas/ExternalTaskQueryDto'
      responses:
        "200":
          content:
            application/json:
              examples:
                example-1:
                  summary: Status 200 Response
                  value:
                  - activityId: anActivityId
                    activityInstanceId: anActivityInstanceId
                    errorMessage: anErrorMessage
                    executionId: anExecutionId
                    id: anExternalTaskId
                    lockExpirationTime: 2015-10-06T16:34:42.000+0200
                    processDefinitionId: aProcessDefinitionId
                    processDefinitionKey: aProcessDefinitionKey
                    processInstanceId: aProcessInstanceId
                    tenantId: null
                    retries: 3
                    suspended: false
                    workerId: aWorkerId
                    topicName: aTopic
                    priority: 9
                    businessKey: aBusinessKey
                  - activityId: anotherActivityId
                    activityInstanceId: anotherActivityInstanceId
                    errorMessage: anotherErrorMessage
                    executionId: anotherExecutionId
                    id: anotherExternalTaskId
                    lockExpirationTime: 2015-10-06T16:34:42.000+0200
                    processDefinitionId: aProcessDefinitionId
                    processDefinitionKey: anotherProcessDefinitionKey
                    processInstanceId: anotherProcessInstanceId
                    tenantId: null
                    retries: 1
                    suspended: false
                    workerId: aWorkerId
                    topicName: aTopic
                    priority: 3
                    businessKey: aBusinessKey
              schema:
                items:
                  $ref: '#/components/schemas/ExternalTaskDto'
                type: array
          description: Request successful. The Response is a JSON array of external
            task objects.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
          description: |-
            Returned if some of the query parameters are invalid, for example if a `sortOrder` parameter is supplied,
            but no `sortBy`. See the [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
      tags:
      - External Task
      x-contentType: application/json
      x-accepts: application/json
  /external-task/count:
    get:
      description: |-
        Queries for the number of external tasks that fulfill given parameters. Takes the same parameters as the
        [Get External Tasks](https://docs.camunda.org/manual/7.14/reference/rest/external-task/get-query/) method.
      operationId: getExternalTasksCount
      parameters:
      - description: Filter by an external task's id.
        explode: true
        in: query
        name: externalTaskId
        required: false
        schema:
          type: string
        style: form
      - description: Filter by the comma-separated list of external task ids.
        explode: true
        in: query
        name: externalTaskIdIn
        required: false
        schema:
          type: string
        style: form
      - description: Filter by an external task topic.
        explode: true
        in: query
        name: topicName
        required: false
        schema:
          type: string
        style: form
      - description: Filter by the id of the worker that the task was most recently
          locked by.
        explode: true
        in: query
        name: workerId
        required: false
        schema:
          type: string
        style: form
      - description: |-
          Only include external tasks that are currently locked (i.e., they have a lock time and it has not expired).
          Value may only be `true`, as `false` matches any external task.
        explode: true
        in: query
        name: locked
        required: false
        schema:
          type: boolean
        style: form
      - description: |-
          Only include external tasks that are currently not locked (i.e., they have no lock or it has expired).
          Value may only be `true`, as `false` matches any external task.
        explode: true
        in: query
        name: notLocked
        required: false
        schema:
          type: boolean
        style: form
      - description: |-
          Only include external tasks that have a positive (&gt; 0) number of retries (or `null`). Value may only be
          `true`, as `false` matches any external task.
        explode: true
        in: query
        name: withRetriesLeft
        required: false
        schema:
          type: boolean
        style: form
      - description: |-
          Only include external tasks that have 0 retries. Value may only be `true`, as `false` matches any
          external task.
        explode: true
        in: query
        name: noRetriesLeft
        required: false
        schema:
          type: boolean
        style: form
      - description: |-
          Restrict to external tasks that have a lock that expires after a given date. By
          [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format
          `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
        explode: true
        in: query
        name: lockExpirationAfter
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - description: |-
          Restrict to external tasks that have a lock that expires before a given date. By
          [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format
          `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
        explode: true
        in: query
        name: lockExpirationBefore
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - description: Filter by the id of the activity that an external task is created
          for.
        explode: true
        in: query
        name: activityId
        required: false
        schema:
          type: string
        style: form
      - description: Filter by the comma-separated list of ids of the activities that
          an external task is created for.
        explode: true
        in: query
        name: activityIdIn
        required: false
        schema:
          type: string
        style: form
      - description: Filter by the id of the execution that an external task belongs
          to.
        explode: true
        in: query
        name: executionId
        required: false
        schema:
          type: string
        style: form
      - description: Filter by the id of the process instance that an external task
          belongs to.
        explode: true
        in: query
        name: processInstanceId
        required: false
        schema:
          type: string
        style: form
      - description: Filter by a comma-separated list of process instance ids that
          an external task may belong to.
        explode: true
        in: query
        name: processInstanceIdIn
        required: false
        schema:
          type: string
        style: form
      - description: Filter by the id of the process definition that an external task
          belongs to.
        explode: true
        in: query
        name: processDefinitionId
        required: false
        schema:
          type: string
        style: form
      - description: |-
          Filter by a comma-separated list of tenant ids.
          An external task must have one of the given tenant ids.
        explode: true
        in: query
        name: tenantIdIn
        required: false
        schema:
          type: string
        style: form
      - description: Only include active tasks. Value may only be `true`, as `false`
          matches any external task.
        explode: true
        in: query
        name: active
        required: false
        schema:
          type: boolean
        style: form
      - description: Only include suspended tasks. Value may only be `true`, as `false`
          matches any external task.
        explode: true
        in: query
        name: suspended
        required: false
        schema:
          type: boolean
        style: form
      - description: |-
          Only include jobs with a priority higher than or equal to the given value.
          Value must be a valid `long` value.
        explode: true
        in: query
        name: priorityHigherThanOrEquals
        required: false
        schema:
          format: int64
          type: integer
        style: form
      - description: |-
          Only include jobs with a priority lower than or equal to the given value.
          Value must be a valid `long` value.
        explode: true
        in: query
        name: priorityLowerThanOrEquals
        required: false
        schema:
          format: int64
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              examples:
                example-1:
                  summary: GET /external-task/count?topicName=aTopic
                  value:
                    count: 42
              schema:
                $ref: '#/components/schemas/CountResultDto'
          description: Request successful.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
          description: |-
            Returned if some of the query parameters are invalid. See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
      tags:
      - External Task
      x-accepts: application/json
    post:
      description: |-
        Queries for the number of external tasks that fulfill given parameters. This method takes the same message
        body as the [Get External Tasks (POST)](https://docs.camunda.org/manual/7.14/reference/rest/external-task/post-query/) method.
      operationId: queryExternalTasksCount
      requestBody:
        content:
          application/json:
            examples:
              example-1:
                summary: POST /external-task/count
                value:
                  topicName: aTopicName
                  withRetriesLeft: true
            schema:
              $ref: '#/components/schemas/ExternalTaskQueryDto'
      responses:
        "200":
          content:
            application/json:
              examples:
                example-1:
                  summary: Status 200 Response
                  value:
                    count: 1
              schema:
                $ref: '#/components/schemas/CountResultDto'
          description: Request successful.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
          description: |-
            Returned if some of the query parameters are invalid. See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
      tags:
      - External Task
      x-contentType: application/json
      x-accepts: application/json
  /external-task/fetchAndLock:
    post:
      description: |-
        Fetches and locks a specific number of external tasks for execution by a worker. Query can be restricted
        to specific task topics and for each task topic an individual lock time can be provided.
      operationId: fetchAndLock
      requestBody:
        content:
          application/json:
            examples:
              example-1:
                description: Request with variable filtering
                summary: POST /external-task/fetchAndLock (1)
                value:
                  workerId: aWorkerId
                  maxTasks: 2
                  usePriority: true
                  topics:
                  - topicName: createOrder
                    lockDuration: 10000
                    variables:
                    - orderId
              example-2:
                description: Request with all variables included
                summary: POST /external-task/fetchAndLock (2)
                value:
                  workerId: aWorkerId
                  maxTasks: 2
                  usePriority: true
                  topics:
                  - topicName: createOrder
                    lockDuration: 10000
                    processDefinitionId: aProcessDefinitionId
                    tenantIdIn: tenantOne
              example-3:
                description: Request with includeExtensionProperties
                summary: POST /external-task/fetchAndLock (3)
                value:
                  workerId: aWorkerId
                  maxTasks: 1
                  usePriority: true
                  topics:
                  - topicName: createOrder
                    lockDuration: 10000
                    includeExtensionProperties: true
            schema:
              $ref: '#/components/schemas/FetchExternalTasksDto'
      responses:
        "200":
          content:
            application/json:
              examples:
                example-1:
                  description: Request with variable filtering
                  summary: POST /external-task/fetchAndLock (1)
                  value:
                  - activityId: anActivityId
                    activityInstanceId: anActivityInstanceId
                    errorMessage: anErrorMessage
                    errorDetails: anErrorDetails
                    executionId: anExecutionId
                    id: anExternalTaskId
                    lockExpirationTime: 2015-10-06T16:34:42.000+0200
                    processDefinitionId: aProcessDefinitionId
                    processDefinitionKey: aProcessDefinitionKey
                    processInstanceId: aProcessInstanceId
                    tenantId: null
                    retries: 3
                    workerId: aWorkerId
                    priority: 4
                    topicName: createOrder
                    variables:
                      orderId:
                        type: String
                        value: "1234"
                        valueInfo: {}
                  - activityId: anActivityId
                    activityInstanceId: anActivityInstanceId
                    errorMessage: anErrorMessage
                    errorDetails: anotherErrorDetails
                    executionId: anExecutionId
                    id: anExternalTaskId
                    lockExpirationTime: 2015-10-06T16:34:42.000+0200
                    processDefinitionId: aProcessDefinitionId
                    processDefinitionKey: aProcessDefinitionKey
                    processInstanceId: aProcessInstanceId
                    tenantId: null
                    retries: 3
                    workerId: aWorkerId
                    priority: 0
                    topicName: createOrder
                    variables:
                      orderId:
                        type: String
                        value: "3456"
                        valueInfo: {}
                example-2:
                  description: Request with all variables included
                  summary: POST /external-task/fetchAndLock (2)
                  value:
                  - activityId: anActivityId
                    activityInstanceId: anActivityInstanceId
                    errorMessage: anErrorMessage
                    errorDetails: anErrorDetails
                    executionId: anExecutionId
                    id: anExternalTaskId
                    lockExpirationTime: 2015-10-06T16:34:42.00+0200
                    processDefinitionId: aProcessDefinitionId
                    processDefinitionKey: aProcessDefinitionKey
                    processInstanceId: aProcessInstanceId
                    tenantId: tenantOne
                    retries: 3
                    workerId: aWorkerId
                    priority: 4
                    topicName: createOrder
                    businessKey: aBusinessKey
                    variables:
                      orderId:
                        type: String
                        value: "1234"
                        valueInfo: {}
                  - activityId: anActivityId
                    activityInstanceId: anActivityInstanceId
                    errorMessage: anErrorMessage
                    errorDetails: anotherErrorDetails
                    executionId: anExecutionId
                    id: anExternalTaskId
                    lockExpirationTime: 2015-10-06T16:34:42.000+0200
                    processDefinitionId: aProcessDefinitionId
                    processDefinitionKey: aProcessDefinitionKey
                    processInstanceId: aProcessInstanceId
                    tenantId: null
                    retries: 3
                    workerId: aWorkerId
                    priority: 0
                    topicName: createOrder
                    businessKey: aBusinessKey
                    variables:
                      orderId:
                        type: String
                        value: "3456"
                        valueInfo: {}
                example-3:
                  description: Request with includeExtensionProperties
                  summary: POST /external-task/fetchAndLock (3)
                  value:
                  - activityId: anActivityId
                    activityInstanceId: anActivityInstanceId
                    errorMessage: anErrorMessage
                    errorDetails: anErrorDetails
                    executionId: anExecutionId
                    id: anExternalTaskId
                    lockExpirationTime: 2015-10-06T16:34:42.000+0200
                    processDefinitionId: aProcessDefinitionId
                    processDefinitionKey: aProcessDefinitionKey
                    processInstanceId: aProcessInstanceId
                    retries: null
                    suspended: false
                    workerId: aWorkerId
                    topicName: createOrder
                    tenantId: null
                    variables: {}
                    priority: 0
                    businessKey: default
                    extensionProperties:
                      property2: value2
                      property1: value1
              schema:
                items:
                  $ref: '#/components/schemas/LockedExternalTaskDto'
                type: array
          description: Request successful.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
          description: |-
            Bad Request. See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
      tags:
      - External Task
      x-contentType: application/json
      x-accepts: application/json
  /external-task/retries:
    put:
      description: "Sets the number of retries left to execute external tasks by id\
        \ synchronously. If retries are set to 0, \nan incident is created."
      operationId: setExternalTaskRetries
      requestBody:
        content:
          application/json:
            examples:
              example-1:
                summary: PUT /external-task/retries
                value:
                  retries: 123
                  externalTaskIds:
                  - anExternalTask
                  - anotherExternalTask
            schema:
              $ref: '#/components/schemas/SetRetriesForExternalTasksDto'
      responses:
        "204":
          description: Request successful.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
          description: |-
            In case the number of retries is negative or null, an exception of type `InvalidRequestException` is
            returned. See the [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
          description: "Returned if the task does not exist. This could indicate a\
            \ wrong task id as well as a cancelled task, \ne.g., due to a caught BPMN\
            \ boundary event. See the\n[Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)\n\
            for the error response format."
      tags:
      - External Task
      x-contentType: application/json
      x-accepts: application/json
  /external-task/retries-async:
    post:
      description: |-
        Sets the number of retries left to execute external tasks by id asynchronously. If retries are set to 0,
        an incident is created.
      operationId: setExternalTaskRetriesAsyncOperation
      requestBody:
        content:
          application/json:
            examples:
              example-1:
                summary: POST /external-task/retries-async
                value:
                  retries: 123
                  externalTaskIds:
                  - anExternalTask
                  - anotherExternalTask
            schema:
              $ref: '#/components/schemas/SetRetriesForExternalTasksDto'
      responses:
        "200":
          content:
            application/json:
              examples:
                example-1:
                  summary: Status 200 Response
                  value:
                    id: aBatchId
                    type: aBatchType
                    totalJobs: 10
                    jobsCreated: 10
                    batchJobsPerSeed: 100
                    invocationsPerBatchJob: 1
                    seedJobDefinitionId: aSeedJobDefinitionId
                    monitorJobDefinitionId: aMonitorJobDefinitionId
                    batchJobDefinitionId: aBatchJobDefinitionId
                    tenantId: aTenantId
                    suspended: false
                    createUserId: demo
              schema:
                $ref: '#/components/schemas/BatchDto'
          description: Request successful.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
          description: "If neither externalTaskIds nor externalTaskQuery are present\
            \ or externalTaskIds contains null value or \nthe number of retries is\
            \ negative or null, an exception of type `InvalidRequestException` is\
            \ returned.\nSee the [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)\n\
            for the error response format."
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
          description: "Returned if the task does not exist. This could indicate a\
            \ wrong task id as well as a cancelled task, \ne.g., due to a caught BPMN\
            \ boundary event. See the\n[Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)\n\
            for the error response format."
      tags:
      - External Task
      x-contentType: application/json
      x-accepts: application/json
  /external-task/topic-names:
    get:
      description: |-
        Queries for distinct topic names of external tasks that fulfill given parameters.
        Query can be restricted to only tasks with retries left, tasks that are locked, or tasks
        that are unlocked. The parameters withLockedTasks and withUnlockedTasks are
        exclusive. Setting them both to true will return an empty list.
        Providing no parameters will return a list of all distinct topic names with external tasks.
      operationId: getTopicNames
      parameters:
      - description: |-
          Only include external tasks that are currently locked (i.e., they have a lock time and it has not expired).
          Value may only be `true`, as `false` matches any external task.
        explode: true
        in: query
        name: withLockedTasks
        required: false
        schema:
          type: boolean
        style: form
      - description: |-
          Only include external tasks that are currently not locked (i.e., they have no lock or it has expired).
          Value may only be `true`, as `false` matches any external task.
        explode: true
        in: query
        name: withUnlockedTasks
        required: false
        schema:
          type: boolean
        style: form
      - description: |-
          Only include external tasks that have a positive (&gt; 0) number of retries (or `null`). Value may only be
          `true`, as `false` matches any external task.
        explode: true
        in: query
        name: withRetriesLeft
        required: false
        schema:
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/json:
              examples:
                example-1:
                  summary: GET /external-task/topic-names?withLockedTasks
                  value:
                  - topic-a
                  - topic-b
                  - topic-c
              schema:
                items:
                  type: string
                type: array
          description: Request successful.
        "400":
          content:
            application/json:
              schema: {}
          description: Returned if some of the query parameters are invalid.
      tags:
      - External Task
      x-accepts: application/json
  /external-task/{id}:
    get:
      description: Retrieves an external task by id, corresponding to the `ExternalTask`
        interface in the engine.
      operationId: getExternalTask
      parameters:
      - description: The id of the external task to be retrieved.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              examples:
                example-1:
                  summary: GET /external-task/anExternalTaskId
                  value:
                    activityId: anActivityId
                    activityInstanceId: anActivityInstanceId
                    errorMessage: anErrorMessage
                    executionId: anExecutionId
                    id: anExternalTaskId
                    lockExpirationTime: 2015-10-06T16:34:42.000+0200
                    processDefinitionId: aProcessDefinitionId
                    processDefinitionKey: aProcessDefinitionKey
                    processInstanceId: aProcessInstanceId
                    tenantId: null
                    retries: 3
                    suspended: false
                    workerId: aWorkerId
                    priority: 0
                    topicName: aTopic
                    businessKey: aBusinessKey
              schema:
                $ref: '#/components/schemas/ExternalTaskDto'
          description: Request successful.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
          description: |-
            External task with the given id does not exist. See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
      tags:
      - External Task
      x-accepts: application/json
  /external-task/{id}/bpmnError:
    post:
      description: |-
        Reports a business error in the context of a running external task by id. The error code must be specified
        to identify the BPMN error handler.
      operationId: handleExternalTaskBpmnError
      parameters:
      - description: The id of the external task in which context a BPMN error is
          reported.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            examples:
              example-1:
                summary: POST /external-task/anId/bpmnError
                value:
                  workerId: aWorker
                  errorCode: bpmn-error
                  errorMessage: anErrorMessage
                  variables:
                    aVariable:
                      value: aStringValue
                      type: String
                    anotherVariable:
                      value: true
                      type: Boolean
            schema:
              $ref: '#/components/schemas/ExternalTaskBpmnError'
      responses:
        "204":
          description: Request successful.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
          description: |-
            Returned if the task's most recent lock was not acquired by the provided worker.

            See the [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
          description: |-
            Returned if the task does not exist. This could indicate a wrong task id as well as a cancelled task,
            e.g., due to a caught BPMN boundary event.

            See the [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
          description: |-
            Returned if the corresponding process instance could not be resumed successfully.

            See the [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
      tags:
      - External Task
      x-contentType: application/json
      x-accepts: application/json
  /external-task/{id}/complete:
    post:
      description: Completes an external task by id and updates process variables.
      operationId: completeExternalTaskResource
      parameters:
      - description: The id of the task to complete.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            examples:
              example-1:
                summary: POST /external-task/anId/complete
                value:
                  workerId: aWorker
                  variables:
                    aVariable:
                      value: aStringValue
                    anotherVariable:
                      value: 42
                    aThirdVariable:
                      value: true
                  localVariables:
                    aLocalVariable:
                      value: aStringValue
            schema:
              $ref: '#/components/schemas/CompleteExternalTaskDto'
      responses:
        "204":
          description: Request successful.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
          description: |-
            Returned if the task's most recent lock was not acquired by the provided worker. See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
          description: |-
            Returned if the task does not exist. This could indicate a wrong task id as well as a cancelled task,
            e.g., due to a caught BPMN boundary event. See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
          description: |-
            Returned if the corresponding process instance could not be resumed successfully. See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
      tags:
      - External Task
      x-contentType: application/json
      x-accepts: application/json
  /external-task/{id}/errorDetails:
    get:
      description: Retrieves the error details in the context of a running external
        task by id.
      operationId: getExternalTaskErrorDetails
      parameters:
      - description: The id of the external task for which the error details should
          be retrieved.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            text/plain:
              examples:
                example-1:
                  value: "org.apache.ibatis.jdbc.RuntimeSqlException: org.apache.ibatis.jdbc.RuntimeSqlException:\
                    \ test cause\n                  at org.camunda.bpm.engine.test.api.externaltask.ExternalTaskServiceTest.testHandleFailureWithErrorDetails(ExternalTaskServiceTest.java:1424)\n\
                    \                  at sun.reflect.NativeMethodAccessorImpl.invoke0(Native\
                    \ Method)\n                  at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\
                    \                  at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
                    \                "
              schema:
                description: The error details for the external task.
                type: string
          description: Request successful.
        "204":
          description: Request successful. In case the external task has no error
            details.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
          description: |-
            An external task with the given id does not exist. See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
      tags:
      - External Task
      x-accepts: application/json
  /external-task/{id}/extendLock:
    post:
      description: Extends the timeout of the lock by a given amount of time.
      operationId: extendLock
      parameters:
      - description: The id of the external task.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            examples:
              example-1:
                summary: POST /external-task/anId/extendLock
                value:
                  workerId: anId
                  newDuration: 100000
            schema:
              $ref: '#/components/schemas/ExtendLockOnExternalTaskDto'
      responses:
        "204":
          description: Request successful.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
          description: "In case the new lock duration is negative or the external\
            \ task is not locked by the given worker or not \nlocked at all, an exception\
            \ of type `InvalidRequestException` is returned. See the\n[Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)\n\
            for the error response format."
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
          description: |-
            Returned if the task does not exist. This could indicate a wrong task id as well as a cancelled task,
            e.g., due to a caught BPMN boundary event. See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
      tags:
      - External Task
      x-contentType: application/json
      x-accepts: application/json
  /external-task/{id}/failure:
    post:
      description: |-
        Reports a failure to execute an external task by id. A number of retries and a timeout until the task can
        be retried can be specified. If retries are set to 0, an incident for this task is created.
      operationId: handleFailure
      parameters:
      - description: The id of the external task to report a failure for.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            examples:
              example-1:
                summary: POST /external-task/anId/failure
                value:
                  workerId: aWorker
                  errorMessage: Does not compute
                  retries: 3
                  retryTimeout: 60000
            schema:
              $ref: '#/components/schemas/ExternalTaskFailureDto'
      responses:
        "204":
          description: Request successful.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
          description: |-
            Returned if the task's most recent lock was not acquired by the provided worker. See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
          description: |-
            Returned if the task does not exist. This could indicate a wrong task id as well as a cancelled task,
            e.g., due to a caught BPMN boundary event. See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
          description: |-
            Returned if the corresponding process instance could not be resumed successfully. See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
      tags:
      - External Task
      x-contentType: application/json
      x-accepts: application/json
  /external-task/{id}/priority:
    put:
      description: Sets the priority of an existing external task by id. The default
        value of a priority is 0.
      operationId: setExternalTaskResourcePriority
      parameters:
      - description: The id of the external task to set the priority for.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            examples:
              example-1:
                summary: PUT /external-task/anId/priority
                value:
                  priority: 5
            schema:
              $ref: '#/components/schemas/PriorityDto'
      responses:
        "204":
          description: Request successful.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
          description: |-
            Returned if the task does not exist. This could indicate a wrong task id as well as a cancelled task,
            e.g., due to a caught BPMN boundary event. See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
      tags:
      - External Task
      x-contentType: application/json
      x-accepts: application/json
  /external-task/{id}/retries:
    put:
      description: "Sets the number of retries left to execute an external task by\
        \ id. If retries are set to 0, an \nincident is created."
      operationId: setExternalTaskResourceRetries
      parameters:
      - description: The id of the external task to set the number of retries for.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            examples:
              example-1:
                summary: PUT /external-task/anId/retries
                value:
                  retries: 123
            schema:
              $ref: '#/components/schemas/RetriesDto'
      responses:
        "204":
          description: Request successful.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
          description: |-
            Returned if the task does not exist. This could indicate a wrong task id as well as a cancelled task,
            e.g., due to a caught BPMN boundary event. See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
          description: |-
            In case the number of retries is negative or null, an exception of type `InvalidRequestException`
            is returned. See the [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
      tags:
      - External Task
      x-contentType: application/json
      x-accepts: application/json
  /external-task/{id}/unlock:
    post:
      description: Unlocks an external task by id. Clears the task's lock expiration
        time and worker id.
      operationId: unlock
      parameters:
      - description: The id of the external task to unlock.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: Request successful.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
          description: |-
            Returned if the task does not exist. This could indicate a wrong task id as well as a cancelled task,
            e.g., due to a caught BPMN boundary event. See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
      tags:
      - External Task
      x-accepts: application/json
  /history/activity-instance:
    get:
      description: |-
        Queries for historic activity instances that fulfill the given parameters.
        The size of the result set can be retrieved by using the
        [Get Historic Activity Instance Count](https://docs.camunda.org/manual/7.14/reference/rest/history/activity-instance/get-activity-instance-query-count/) method.
      operationId: getHistoricActivityInstances
      parameters:
      - description: |-
          Sort the results lexicographically by a given criterion.
          Must be used in conjunction with the sortOrder parameter.
        explode: true
        in: query
        name: sortBy
        required: false
        schema:
          enum:
          - activityInstanceId
          - instanceId
          - executionId
          - activityId
          - activityName
          - activityType
          - startTime
          - endTime
          - duration
          - definitionId
          - occurrence
          - tenantId
          type: string
        style: form
      - description: |-
          Sort the results in a given order. Values may be asc for ascending order or desc for descending order.
          Must be used in conjunction with the sortBy parameter.
        explode: true
        in: query
        name: sortOrder
        required: false
        schema:
          enum:
          - asc
          - desc
          type: string
        style: form
      - description: Pagination of results. Specifies the index of the first result
          to return.
        explode: true
        in: query
        name: firstResult
        required: false
        schema:
          type: integer
        style: form
      - description: |-
          Pagination of results. Specifies the maximum number of results to return.
          Will return less results if there are no more results left.
        explode: true
        in: query
        name: maxResults
        required: false
        schema:
          type: integer
        style: form
      - description: Filter by activity instance id.
        explode: true
        in: query
        name: activityInstanceId
        required: false
        schema:
          type: string
        style: form
      - description: Filter by process instance id.
        explode: true
        in: query
        name: processInstanceId
        required: false
        schema:
          type: string
        style: form
      - description: Filter by process definition id.
        explode: true
        in: query
        name: processDefinitionId
        required: false
        schema:
          type: string
        style: form
      - description: Filter by the id of the execution that executed the activity
          instance.
        explode: true
        in: query
        name: executionId
        required: false
        schema:
          type: string
        style: form
      - description: Filter by the activity id (according to BPMN 2.0 XML).
        explode: true
        in: query
        name: activityId
        required: false
        schema:
          type: string
        style: form
      - description: Filter by the activity name (according to BPMN 2.0 XML).
        explode: true
        in: query
        name: activityName
        required: false
        schema:
          type: string
        style: form
      - description: Filter by activity type.
        explode: true
        in: query
        name: activityType
        required: false
        schema:
          type: string
        style: form
      - description: Only include activity instances that are user tasks and assigned
          to a given user.
        explode: true
        in: query
        name: taskAssignee
        required: false
        schema:
          type: string
        style: form
      - description: |-
          Only include finished activity instances.
          Value may only be `true`, as `false` behaves the same as when the property is not set.
        explode: true
        in: query
        name: finished
        required: false
        schema:
          type: boolean
        style: form
      - description: |-
          Only include unfinished activity instances.
          Value may only be `true`, as `false` behaves the same as when the property is not set.
        explode: true
        in: query
        name: unfinished
        required: false
        schema:
          type: boolean
        style: form
      - description: |-
          Only include canceled activity instances.
          Value may only be `true`, as `false` behaves the same as when the property is not set.
        explode: true
        in: query
        name: canceled
        required: false
        schema:
          type: boolean
        style: form
      - description: |-
          Only include activity instances which completed a scope.
          Value may only be `true`, as `false` behaves the same as when the property is not set.
        explode: true
        in: query
        name: completeScope
        required: false
        schema:
          type: boolean
        style: form
      - description: |-
          Restrict to instances that were started before the given date. By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/),
          the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
        explode: true
        in: query
        name: startedBefore
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - description: |-
          Restrict to instances that were started after the given date. By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/),
          the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
        explode: true
        in: query
        name: startedAfter
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - description: |-
          Restrict to instances that were finished before the given date. By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/),
          the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
        explode: true
        in: query
        name: finishedBefore
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - description: |-
          Restrict to instances that were finished after the given date. By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/),
          the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
        explode: true
        in: query
        name: finishedAfter
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - description: Filter by a comma-separated list of ids. An activity instance
          must have one of the given tenant ids.
        explode: true
        in: query
        name: tenantIdIn
        required: false
        schema:
          type: string
        style: form
      - description: Only include historic activity instances that belong to no tenant.
          Value may only be `true`, as `false` is the default behavior.
        explode: true
        in: query
        name: withoutTenantId
        required: false
        schema:
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/json:
              examples:
                example-1:
                  description: Response for GET `/history/activity-instance?activityType=userTask&taskAssignee=peter`
                  summary: Status 200 response
                  value:
                  - activityId: anActivity
                    activityName: anActivityName
                    activityType: userTask
                    assignee: peter
                    calledProcessInstanceId: aHistoricCalledProcessInstanceId
                    calledCaseInstanceId: null
                    canceled: true
                    completeScope: false
                    durationInMillis: 2000
                    endTime: 2013-04-23T18:42:43.000+0200
                    executionId: anExecutionId
                    id: aHistoricActivityInstanceId
                    parentActivityInstanceId: aHistoricParentActivityInstanceId
                    processDefinitionId: aProcDefId
                    processInstanceId: aProcInstId
                    startTime: 2013-04-23T11:20:43.000+0200
                    taskId: aTaskId
                    tenantId: null
                    removalTime: 2018-02-10T14:33:19.000+0200
                    rootProcessInstanceId: aRootProcessInstanceId
              schema:
                items:
                  $ref: '#/components/schemas/HistoricActivityInstanceDto'
                type: array
          description: Request successful.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
          description: |-
            Bad Request
            Returned if some of the query parameters are invalid, for example if a sortOrder parameter is supplied, but no sortBy.
            See the [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling) for the error response format.
      summary: Get List
      tags:
      - Historic Activity Instance
      x-accepts: application/json
    post:
      description: |-
        Queries for historic activity instances that fulfill the given parameters.
        The size of the result set can be retrieved by using the
        [Get Historic Activity Instance Count](https://docs.camunda.org/manual/7.14/reference/rest/history/activity-instance/get-activity-instance-query-count/) method.
      operationId: queryHistoricActivityInstances
      parameters:
      - description: Pagination of results. Specifies the index of the first result
          to return.
        explode: true
        in: query
        name: firstResult
        required: false
        schema:
          type: integer
        style: form
      - description: |-
          Pagination of results. Specifies the maximum number of results to return.
          Will return less results if there are no more results left.
        explode: true
        in: query
        name: maxResults
        required: false
        schema:
          type: integer
        style: form
      requestBody:
        content:
          application/json:
            examples:
              example-1:
                summary: POST `/history/activity-instance`
                value:
                  activityType: userTask
                  taskAssignee: peter
                  sorting:
                  - sortBy: activityId
                    sortOrder: asc
                  - sortBy: executionId
                    sortOrder: desc
            schema:
              $ref: '#/components/schemas/HistoricActivityInstanceQueryDto'
      responses:
        "200":
          content:
            application/json:
              examples:
                example-1:
                  summary: Status 200 Response 1
                  value:
                  - activityId: anActivity
                    activityName: anActivityName
                    activityType: userTask
                    assignee: peter
                    calledProcessInstanceId: aHistoricCalledProcessInstanceId
                    calledCaseInstanceId: null
                    canceled: true
                    completeScope: false
                    durationInMillis: 2000
                    endTime: 2013-04-23T18:42:43.000+0200
                    executionId: anExecutionId
                    id: aHistoricActivityInstanceId
                    parentActivityInstanceId: aHistoricParentActivityInstanceId
                    processDefinitionId: aProcDefId
                    processInstanceId: aProcInstId
                    startTime: 2013-04-23T11:20:43.000+0200
                    taskId: aTaskId
                    tenantId: null
                    removalTime: 2018-02-10T14:33:19.000+0200
                    rootProcessInstanceId: aRootProcessInstanceId
              schema:
                items:
                  $ref: '#/components/schemas/HistoricActivityInstanceDto'
                type: array
          description: Request successful.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
          description: |-
            Bad Request
            Returned if some of the query parameters are invalid, for example if a sortOrder parameter is supplied, but no sortBy.
            See the [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling) for the error response format.
      summary: Get List (POST)
      tags:
      - Historic Activity Instance
      x-contentType: application/json
      x-accepts: application/json
  /history/activity-instance/count:
    get:
      description: |-
        Queries for the number of historic activity instances that fulfill the given parameters.
        Takes the same parameters as the [Get Historic Activity Instance](https://docs.camunda.org/manual/7.14/reference/rest/history/activity-instance/get-activity-instance-query/)  method.
      operationId: getHistoricActivityInstancesCount
      parameters:
      - description: Filter by activity instance id.
        explode: true
        in: query
        name: activityInstanceId
        required: false
        schema:
          type: string
        style: form
      - description: Filter by process instance id.
        explode: true
        in: query
        name: processInstanceId
        required: false
        schema:
          type: string
        style: form
      - description: Filter by process definition id.
        explode: true
        in: query
        name: processDefinitionId
        required: false
        schema:
          type: string
        style: form
      - description: Filter by the id of the execution that executed the activity
          instance.
        explode: true
        in: query
        name: executionId
        required: false
        schema:
          type: string
        style: form
      - description: Filter by the activity id (according to BPMN 2.0 XML).
        explode: true
        in: query
        name: activityId
        required: false
        schema:
          type: string
        style: form
      - description: Filter by the activity name (according to BPMN 2.0 XML).
        explode: true
        in: query
        name: activityName
        required: false
        schema:
          type: string
        style: form
      - description: Filter by activity type.
        explode: true
        in: query
        name: activityType
        required: false
        schema:
          type: string
        style: form
      - description: Only include activity instances that are user tasks and assigned
          to a given user.
        explode: true
        in: query
        name: taskAssignee
        required: false
        schema:
          type: string
        style: form
      - description: |-
          Only include finished activity instances.
          Value may only be `true`, as `false` behaves the same as when the property is not set.
        explode: true
        in: query
        name: finished
        required: false
        schema:
          type: boolean
        style: form
      - description: |-
          Only include unfinished activity instances.
          Value may only be `true`, as `false` behaves the same as when the property is not set.
        explode: true
        in: query
        name: unfinished
        required: false
        schema:
          type: boolean
        style: form
      - description: |-
          Only include canceled activity instances.
          Value may only be `true`, as `false` behaves the same as when the property is not set.
        explode: true
        in: query
        name: canceled
        required: false
        schema:
          type: boolean
        style: form
      - description: |-
          Only include activity instances which completed a scope.
          Value may only be `true`, as `false` behaves the same as when the property is not set.
        explode: true
        in: query
        name: completeScope
        required: false
        schema:
          type: boolean
        style: form
      - description: |-
          Restrict to instances that were started before the given date. By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/),
          the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
        explode: true
        in: query
        name: startedBefore
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - description: |-
          Restrict to instances that were started after the given date. By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/),
          the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
        explode: true
        in: query
        name: startedAfter
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - description: |-
          Restrict to instances that were finished before the given date. By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/),
          the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
        explode: true
        in: query
        name: finishedBefore
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - description: |-
          Restrict to instances that were finished after the given date. By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/),
          the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
        explode: true
        in: query
        name: finishedAfter
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - description: Filter by a comma-separated list of ids. An activity instance
          must have one of the given tenant ids.
        explode: true
        in: query
        name: tenantIdIn
        required: false
        schema:
          type: string
        style: form
      - description: Only include historic activity instances that belong to no tenant.
          Value may only be `true`, as `false` is the default behavior.
        explode: true
        in: query
        name: withoutTenantId
        required: false
        schema:
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/json:
              examples:
                example-1:
                  description: Response for GET `/history/activity-instance/count?activityType=userTask`
                  summary: Status 200 response
                  value:
                    count: 1
              schema:
                $ref: '#/components/schemas/CountResultDto'
          description: Request successful.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
          description: |-
            Bad Request
            Returned if some of the query parameters are invalid.
            See the [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling) for the error response format.
      summary: Get List Count
      tags:
      - Historic Activity Instance
      x-accepts: application/json
    post:
      description: Queries for the number of historic activity instances that fulfill
        the given parameters.
      operationId: queryHistoricActivityInstancesCount
      requestBody:
        content:
          application/json:
            examples:
              example-1:
                summary: POST `/history/activity-instance/count`
                value:
                  activityType: userTask
            schema:
              $ref: '#/components/schemas/HistoricActivityInstanceQueryDto'
      responses:
        "200":
          content:
            application/json:
              examples:
                example-1:
                  summary: Status 200 Response 1
                  value:
                    count: 1
              schema:
                $ref: '#/components/schemas/CountResultDto'
          description: Request successful.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
          description: |-
            Bad Request
            Returned if some of the query parameters are invalid.
            See the [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling) for the error response format.
      summary: Get List Count (POST)
      tags:
      - Historic Activity Instance
      x-contentType: application/json
      x-accepts: application/json
  /history/activity-instance/{id}:
    get:
      description: Retrieves a historic activity instance by id, according to the
        `HistoricActivityInstance` interface in the engine.
      operationId: getHistoricActivityInstance
      parameters:
      - description: The id of the historic activity instance to be retrieved.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              examples:
                example-1:
                  summary: GET `/history/activity-instance/aActivityInstId`
                  value:
                    id: aActivityInstId
                    activityId: anActivity
                    activityName: anActivityName
                    activityType: userTask
                    assignee: peter
                    calledProcessInstanceId: aHistoricCalledProcessInstanceId
                    calledCaseInstanceId: null
                    canceled: true
                    completeScope: false
                    durationInMillis: 2000
                    endTime: 2013-04-23T18:42:43.000+0200
                    executionId: anExecutionId
                    parentActivityInstanceId: aHistoricParentActivityInstanceId
                    processDefinitionId: aProcDefId
                    processInstanceId: aProcInstId
                    startTime: 2013-04-23T11:20:43.000+0200
                    taskId: aTaskId
                    tenantId: null
                    removalTime: 2018-02-10T14:33:19.000+0200
                    rootProcessInstanceId: aRootProcessInstanceId
              schema:
                $ref: '#/components/schemas/HistoricActivityInstanceDto'
          description: Request successful.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
          description: |-
            Not Found
            Historic activity instance with given id does not exist.
            See the [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling) for the error response format.
      summary: Get
      tags:
      - Historic Activity Instance
      x-accepts: application/json
  /history/process-instance:
    get:
      description: |-
        Queries for historic process instances that fulfill the given parameters.
        The size of the result set can be retrieved by using the
        [Get Process Instance Count](https://docs.camunda.org/manual/7.14/reference/rest/history/process-instance/get-process-instance-query-count/) method.
      operationId: getHistoricProcessInstances
      parameters:
      - description: |-
          Sort the results lexicographically by a given criterion.
          Must be used in conjunction with the sortOrder parameter.
        explode: true
        in: query
        name: sortBy
        required: false
        schema:
          enum:
          - instanceId
          - definitionId
          - definitionKey
          - definitionName
          - definitionVersion
          - businessKey
          - startTime
          - endTime
          - duration
          - tenantId
          type: string
        style: form
      - description: |-
          Sort the results in a given order. Values may be asc for ascending order or desc for descending order.
          Must be used in conjunction with the sortBy parameter.
        explode: true
        in: query
        name: sortOrder
        required: false
        schema:
          enum:
          - asc
          - desc
          type: string
        style: form
      - description: Pagination of results. Specifies the index of the first result
          to return.
        explode: true
        in: query
        name: firstResult
        required: false
        schema:
          type: integer
        style: form
      - description: |-
          Pagination of results. Specifies the maximum number of results to return.
          Will return less results if there are no more results left.
        explode: true
        in: query
        name: maxResults
        required: false
        schema:
          type: integer
        style: form
      - description: Filter by process instance id.
        explode: true
        in: query
        name: processInstanceId
        required: false
        schema:
          type: string
        style: form
      - description: Filter by process instance ids. Filter by a comma-separated list
          of `Strings`.
        explode: true
        in: query
        name: processInstanceIds
        required: false
        schema:
          type: string
        style: form
      - description: Filter by the process definition the instances run on.
        explode: true
        in: query
        name: processDefinitionId
        required: false
        schema:
          type: string
        style: form
      - description: Filter by the key of the process definition the instances run
          on.
        explode: true
        in: query
        name: processDefinitionKey
        required: false
        schema:
          type: string
        style: form
      - description: Filter by a list of process definition keys. A process instance
          must have one of the given process definition keys. Filter by a comma-separated
          list of `Strings`.
        explode: true
        in: query
        name: processDefinitionKeyIn
        required: false
        schema:
          type: string
        style: form
      - description: Filter by the name of the process definition the instances run
          on.
        explode: true
        in: query
        name: processDefinitionName
        required: false
        schema:
          type: string
        style: form
      - description: Filter by process definition names that the parameter is a substring
          of.
        explode: true
        in: query
        name: processDefinitionNameLike
        required: false
        schema:
          type: string
        style: form
      - description: Exclude instances that belong to a set of process definitions.
          Filter by a comma-separated list of `Strings`.
        explode: true
        in: query
        name: processDefinitionKeyNotIn
        required: false
        schema:
          type: string
        style: form
      - description: Filter by process instance business key.
        explode: true
        in: query
        name: processInstanceBusinessKey
        required: false
        schema:
          type: string
        style: form
      - description: Filter by process instance business key that the parameter is
          a substring of.
        explode: true
        in: query
        name: processInstanceBusinessKeyLike
        required: false
        schema:
          type: string
        style: form
      - description: Restrict the query to all process instances that are top level
          process instances.
        explode: true
        in: query
        name: rootProcessInstances
        required: false
        schema:
          type: boolean
        style: form
      - description: Only include finished process instances. Value may only be `true`,
          as `false` is the default behavior.
        explode: true
        in: query
        name: finished
        required: false
        schema:
          type: boolean
        style: form
      - description: Only include unfinished process instances. Value may only be
          `true`, as `false` is the default behavior.
        explode: true
        in: query
        name: unfinished
        required: false
        schema:
          type: boolean
        style: form
      - description: Only include process instances which have an incident. Value
          may only be `true`, as `false` is the default behavior.
        explode: true
        in: query
        name: withIncidents
        required: false
        schema:
          type: boolean
        style: form
      - description: Only include process instances which have a root incident. Value
          may only be `true`, as `false` is the default behavior.
        explode: true
        in: query
        name: withRootIncidents
        required: false
        schema:
          type: boolean
        style: form
      - description: Filter by the incident type. See the [User Guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/incidents/#incident-types)
          for a list of incident types.
        explode: true
        in: query
        name: incidentType
        required: false
        schema:
          type: string
        style: form
      - description: Only include process instances which have an incident in status
          either open or resolved. To get all process instances, use the query parameter
          withIncidents.
        explode: true
        in: query
        name: incidentStatus
        required: false
        schema:
          enum:
          - open
          - resolved
          type: string
        style: form
      - description: Filter by the incident message. Exact match.
        explode: true
        in: query
        name: incidentMessage
        required: false
        schema:
          type: string
        style: form
      - description: Filter by the incident message that the parameter is a substring
          of.
        explode: true
        in: query
        name: incidentMessageLike
        required: false
        schema:
          type: string
        style: form
      - description: |-
          Restrict to instances that were started before the given date.
          By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
        explode: true
        in: query
        name: startedBefore
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - description: |-
          Restrict to instances that were started after the given date.
          By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
        explode: true
        in: query
        name: startedAfter
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - description: |-
          Restrict to instances that were finished before the given date.
          By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
        explode: true
        in: query
        name: finishedBefore
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - description: |-
          Restrict to instances that were finished after the given date.
          By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
        explode: true
        in: query
        name: finishedAfter
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - description: |-
          Restrict to instances that executed an activity after the given date (inclusive).
          By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
        explode: true
        in: query
        name: executedActivityAfter
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - description: |-
          Restrict to instances that executed an activity before the given date (inclusive).
          By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
        explode: true
        in: query
        name: executedActivityBefore
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - description: |-
          Restrict to instances that executed an job after the given date (inclusive).
          By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
        explode: true
        in: query
        name: executedJobAfter
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - description: |-
          Restrict to instances that executed an job before the given date (inclusive).
          By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
        explode: true
        in: query
        name: executedJobBefore
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - description: Only include process instances that were started by the given
          user.
        explode: true
        in: query
        name: startedBy
        required: false
        schema:
          type: string
        style: form
      - description: Restrict query to all process instances that are sub process
          instances of the given process instance. Takes a process instance id.
        explode: true
        in: query
        name: superProcessInstanceId
        required: false
        schema:
          type: string
        style: form
      - description: Restrict query to one process instance that has a sub process
          instance with the given id.
        explode: true
        in: query
        name: subProcessInstanceId
        required: false
        schema:
          type: string
        style: form
      - description: Restrict query to all process instances that are sub process
          instances of the given case instance. Takes a case instance id.
        explode: true
        in: query
        name: superCaseInstanceId
        required: false
        schema:
          type: string
        style: form
      - description: Restrict query to one process instance that has a sub case instance
          with the given id.
        explode: true
        in: query
        name: subCaseInstanceId
        required: false
        schema:
          type: string
        style: form
      - description: Restrict query to all process instances that are sub process
          instances of the given case instance. Takes a case instance id.
        explode: true
        in: query
        name: caseInstanceId
        required: false
        schema:
          type: string
        style: form
      - description: Filter by a list of tenant ids. A process instance must have
          one of the given tenant ids. Filter by a comma-separated list of `Strings`
        explode: true
        in: query
        name: tenantIdIn
        required: false
        schema:
          type: string
        style: form
      - description: Only include historic process instances which belong to no tenant.
          Value may only be `true`, as `false` is the default behavior.
        explode: true
        in: query
        name: withoutTenantId
        required: false
        schema:
          type: boolean
        style: form
      - description: Restrict to instances that executed an activity with one of given
          ids. Filter by a comma-separated list of `Strings`
        explode: true
        in: query
        name: executedActivityIdIn
        required: false
        schema:
          type: string
        style: form
      - description: Restrict to instances that have an active activity with one of
          given ids. Filter by a comma-separated list of `Strings`
        explode: true
        in: query
        name: activeActivityIdIn
        required: false
        schema:
          type: string
        style: form
      - description: Restrict to instances that are active.
        explode: true
        in: query
        name: active
        required: false
        schema:
          type: boolean
        style: form
      - description: Restrict to instances that are suspended.
        explode: true
        in: query
        name: suspended
        required: false
        schema:
          type: boolean
        style: form
      - description: Restrict to instances that are completed.
        explode: true
        in: query
        name: completed
        required: false
        schema:
          type: boolean
        style: form
      - description: Restrict to instances that are externallyTerminated.
        explode: true
        in: query
        name: externallyTerminated
        required: false
        schema:
          type: boolean
        style: form
      - description: Restrict to instances that are internallyTerminated.
        explode: true
        in: query
        name: internallyTerminated
        required: false
        schema:
          type: boolean
        style: form
      - description: |
          Only include process instances that have/had variables with certain values.
          Variable filtering expressions are comma-separated and are structured as follows:
          A valid parameter value has the form `key_operator_value`. `key` is the variable name, `operator` is the comparison operator to be used and `value` the variable value.

          **Note:** Values are always treated as String objects on server side.

          Valid operator values are: `eq` - equal to; `neq` - not equal to; `gt` - greater than; `gteq` - greater than or equal to; `lt` - lower than; `lteq` - lower than or equal to; `like`.

          Key and value may not contain underscore or comma characters.
        explode: true
        in: query
        name: variables
        required: false
        schema:
          type: string
        style: form
      - description: Match all variable names provided in variables case-insensitively.
          If set to `true` variableName and variablename are treated as equal.
        explode: true
        in: query
        name: variableNamesIgnoreCase
        required: false
        schema:
          type: boolean
        style: form
      - description: Match all variable values provided in variables case-insensitively.
          If set to `true` variableValue and variablevalue are treated as equal.
        explode: true
        in: query
        name: variableValuesIgnoreCase
        required: false
        schema:
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/json:
              examples:
                example-1:
                  description: Response for GET `/history/process-instance?finishedAfter=2013-01-01T00:00:00.000%2b0200&finishedBefore=2013-04-01T23:59:59.000%2b0200&executedActivityAfter=2013-03-23T13:42:44.000%2b0200`
                  summary: Status 200 response
                  value:
                  - id: 7c80cc8f-ef95-11e6-b6e6-34f39ab71d4e
                    businessKey: null
                    processDefinitionId: invoice:1:7bf79f13-ef95-11e6-b6e6-34f39ab71d4e
                    processDefinitionKey: invoice
                    processDefinitionName: Invoice Receipt
                    processDefinitionVersion: 1
                    startTime: 2017-02-10T14:33:19.000+0200
                    endTime: null
                    removalTime: null
                    durationInMillis: null
                    startUserId: null
                    startActivityId: StartEvent_1
                    deleteReason: null
                    rootProcessInstanceId: f8259e5d-ab9d-11e8-8449-e4a7a094a9d6
                    superProcessInstanceId: null
                    superCaseInstanceId: null
                    caseInstanceId: null
                    tenantId: null
                    state: ACTIVE
              schema:
                items:
                  $ref: '#/components/schemas/HistoricProcessInstanceDto'
                type: array
          description: Request successful.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
          description: |-
            Bad Request
            Returned if some of the query parameters are invalid, for example if a sortOrder parameter is supplied, but no sortBy.
            See the [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling) for the error response format.
      summary: Get List
      tags:
      - Historic Process Instance
      x-accepts: application/json
    post:
      description: |-
        Queries for historic process instances that fulfill the given parameters.
        This method is slightly more powerful than the
        [Get Process Instance](https://docs.camunda.org/manual/7.14/reference/rest/history/process-instance/get-process-instance-query/)
        because it allows filtering by multiple process variables of types `String`, `Number` or `Boolean`.
      operationId: queryHistoricProcessInstances
      parameters:
      - description: Pagination of results. Specifies the index of the first result
          to return.
        explode: true
        in: query
        name: firstResult
        required: false
        schema:
          type: integer
        style: form
      - description: |-
          Pagination of results. Specifies the maximum number of results to return.
          Will return less results if there are no more results left.
        explode: true
        in: query
        name: maxResults
        required: false
        schema:
          type: integer
        style: form
      requestBody:
        content:
          application/json:
            examples:
              example-1:
                summary: POST `/history/process-instance`
                value:
                  finishedAfter: 2013-01-01T00:00:00.000+0200
                  finishedBefore: 2013-04-01T23:59:59.000+0200
                  executedActivityAfter: 2013-03-23T13:42:44.000+0200
                  variables:
                  - name: myVariable
                    operator: eq
                    value: camunda
                  - name: mySecondVariable
                    operator: neq
                    value: 124
                  sorting:
                  - sortBy: businessKey
                    sortOrder: asc
                  - sortBy: startTime
                    sortOrder: desc
            schema:
              $ref: '#/components/schemas/HistoricProcessInstanceQueryDto'
      responses:
        "200":
          content:
            application/json:
              examples:
                example-1:
                  description: Response for POST `/history/process-instance`
                  summary: Status 200 response
                  value:
                  - id: 7c80cc8f-ef95-11e6-b6e6-34f39ab71d4e
                    businessKey: null
                    processDefinitionId: invoice:1:7bf79f13-ef95-11e6-b6e6-34f39ab71d4e
                    processDefinitionKey: invoice
                    processDefinitionName: Invoice Receipt
                    processDefinitionVersion: 1
                    startTime: 2017-02-10T14:33:19.000+0200
                    endTime: null
                    removalTime: null
                    durationInMillis: null
                    startUserId: null
                    startActivityId: StartEvent_1
                    deleteReason: null
                    rootProcessInstanceId: f8259e5d-ab9d-11e8-8449-e4a7a094a9d6
                    superProcessInstanceId: null
                    superCaseInstanceId: null
                    caseInstanceId: null
                    tenantId: null
                    state: ACTIVE
              schema:
                items:
                  $ref: '#/components/schemas/HistoricProcessInstanceDto'
                type: array
          description: Request successful.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
          description: |-
            Bad Request
            Returned if some of the query parameters are invalid, for example if a sortOrder parameter is supplied, but no sortBy.
            See the [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling) for the error response format.
      summary: Get List (POST)
      tags:
      - Historic Process Instance
      x-contentType: application/json
      x-accepts: application/json
  /history/process-instance/count:
    get:
      description: |-
        Queries for the number of historic process instances that fulfill the given parameters.
        Takes the same parameters as the [Get Process Instances](https://docs.camunda.org/manual/7.14/reference/rest/history/process-instance/get-process-instance-query/) method.
      operationId: getHistoricProcessInstancesCount
      parameters:
      - description: Filter by process instance id.
        explode: true
        in: query
        name: processInstanceId
        required: false
        schema:
          type: string
        style: form
      - description: Filter by process instance ids. Filter by a comma-separated list
          of `Strings`.
        explode: true
        in: query
        name: processInstanceIds
        required: false
        schema:
          type: string
        style: form
      - description: Filter by the process definition the instances run on.
        explode: true
        in: query
        name: processDefinitionId
        required: false
        schema:
          type: string
        style: form
      - description: Filter by the key of the process definition the instances run
          on.
        explode: true
        in: query
        name: processDefinitionKey
        required: false
        schema:
          type: string
        style: form
      - description: Filter by a list of process definition keys. A process instance
          must have one of the given process definition keys. Filter by a comma-separated
          list of `Strings`.
        explode: true
        in: query
        name: processDefinitionKeyIn
        required: false
        schema:
          type: string
        style: form
      - description: Filter by the name of the process definition the instances run
          on.
        explode: true
        in: query
        name: processDefinitionName
        required: false
        schema:
          type: string
        style: form
      - description: Filter by process definition names that the parameter is a substring
          of.
        explode: true
        in: query
        name: processDefinitionNameLike
        required: false
        schema:
          type: string
        style: form
      - description: Exclude instances that belong to a set of process definitions.
          Filter by a comma-separated list of `Strings`.
        explode: true
        in: query
        name: processDefinitionKeyNotIn
        required: false
        schema:
          type: string
        style: form
      - description: Filter by process instance business key.
        explode: true
        in: query
        name: processInstanceBusinessKey
        required: false
        schema:
          type: string
        style: form
      - description: Filter by process instance business key that the parameter is
          a substring of.
        explode: true
        in: query
        name: processInstanceBusinessKeyLike
        required: false
        schema:
          type: string
        style: form
      - description: Restrict the query to all process instances that are top level
          process instances.
        explode: true
        in: query
        name: rootProcessInstances
        required: false
        schema:
          type: boolean
        style: form
      - description: Only include finished process instances. Value may only be `true`,
          as `false` is the default behavior.
        explode: true
        in: query
        name: finished
        required: false
        schema:
          type: boolean
        style: form
      - description: Only include unfinished process instances. Value may only be
          `true`, as `false` is the default behavior.
        explode: true
        in: query
        name: unfinished
        required: false
        schema:
          type: boolean
        style: form
      - description: Only include process instances which have an incident. Value
          may only be `true`, as `false` is the default behavior.
        explode: true
        in: query
        name: withIncidents
        required: false
        schema:
          type: boolean
        style: form
      - description: Only include process instances which have a root incident. Value
          may only be `true`, as `false` is the default behavior.
        explode: true
        in: query
        name: withRootIncidents
        required: false
        schema:
          type: boolean
        style: form
      - description: Filter by the incident type. See the [User Guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/incidents/#incident-types)
          for a list of incident types.
        explode: true
        in: query
        name: incidentType
        required: false
        schema:
          type: string
        style: form
      - description: Only include process instances which have an incident in status
          either open or resolved. To get all process instances, use the query parameter
          withIncidents.
        explode: true
        in: query
        name: incidentStatus
        required: false
        schema:
          enum:
          - open
          - resolved
          type: string
        style: form
      - description: Filter by the incident message. Exact match.
        explode: true
        in: query
        name: incidentMessage
        required: false
        schema:
          type: string
        style: form
      - description: Filter by the incident message that the parameter is a substring
          of.
        explode: true
        in: query
        name: incidentMessageLike
        required: false
        schema:
          type: string
        style: form
      - description: |-
          Restrict to instances that were started before the given date.
          By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
        explode: true
        in: query
        name: startedBefore
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - description: |-
          Restrict to instances that were started after the given date.
          By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
        explode: true
        in: query
        name: startedAfter
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - description: |-
          Restrict to instances that were finished before the given date.
          By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
        explode: true
        in: query
        name: finishedBefore
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - description: |-
          Restrict to instances that were finished after the given date.
          By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
        explode: true
        in: query
        name: finishedAfter
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - description: |-
          Restrict to instances that executed an activity after the given date (inclusive).
          By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
        explode: true
        in: query
        name: executedActivityAfter
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - description: |-
          Restrict to instances that executed an activity before the given date (inclusive).
          By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
        explode: true
        in: query
        name: executedActivityBefore
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - description: |-
          Restrict to instances that executed an job after the given date (inclusive).
          By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
        explode: true
        in: query
        name: executedJobAfter
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - description: |-
          Restrict to instances that executed an job before the given date (inclusive).
          By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
        explode: true
        in: query
        name: executedJobBefore
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - description: Only include process instances that were started by the given
          user.
        explode: true
        in: query
        name: startedBy
        required: false
        schema:
          type: string
        style: form
      - description: Restrict query to all process instances that are sub process
          instances of the given process instance. Takes a process instance id.
        explode: true
        in: query
        name: superProcessInstanceId
        required: false
        schema:
          type: string
        style: form
      - description: Restrict query to one process instance that has a sub process
          instance with the given id.
        explode: true
        in: query
        name: subProcessInstanceId
        required: false
        schema:
          type: string
        style: form
      - description: Restrict query to all process instances that are sub process
          instances of the given case instance. Takes a case instance id.
        explode: true
        in: query
        name: superCaseInstanceId
        required: false
        schema:
          type: string
        style: form
      - description: Restrict query to one process instance that has a sub case instance
          with the given id.
        explode: true
        in: query
        name: subCaseInstanceId
        required: false
        schema:
          type: string
        style: form
      - description: Restrict query to all process instances that are sub process
          instances of the given case instance. Takes a case instance id.
        explode: true
        in: query
        name: caseInstanceId
        required: false
        schema:
          type: string
        style: form
      - description: Filter by a list of tenant ids. A process instance must have
          one of the given tenant ids. Filter by a comma-separated list of `Strings`
        explode: true
        in: query
        name: tenantIdIn
        required: false
        schema:
          type: string
        style: form
      - description: Only include historic process instances which belong to no tenant.
          Value may only be `true`, as `false` is the default behavior.
        explode: true
        in: query
        name: withoutTenantId
        required: false
        schema:
          type: boolean
        style: form
      - description: Restrict to instances that executed an activity with one of given
          ids. Filter by a comma-separated list of `Strings`
        explode: true
        in: query
        name: executedActivityIdIn
        required: false
        schema:
          type: string
        style: form
      - description: Restrict to instances that have an active activity with one of
          given ids. Filter by a comma-separated list of `Strings`
        explode: true
        in: query
        name: activeActivityIdIn
        required: false
        schema:
          type: string
        style: form
      - description: Restrict to instances that are active.
        explode: true
        in: query
        name: active
        required: false
        schema:
          type: boolean
        style: form
      - description: Restrict to instances that are suspended.
        explode: true
        in: query
        name: suspended
        required: false
        schema:
          type: boolean
        style: form
      - description: Restrict to instances that are completed.
        explode: true
        in: query
        name: completed
        required: false
        schema:
          type: boolean
        style: form
      - description: Restrict to instances that are externallyTerminated.
        explode: true
        in: query
        name: externallyTerminated
        required: false
        schema:
          type: boolean
        style: form
      - description: Restrict to instances that are internallyTerminated.
        explode: true
        in: query
        name: internallyTerminated
        required: false
        schema:
          type: boolean
        style: form
      - description: |
          Only include process instances that have/had variables with certain values.
          Variable filtering expressions are comma-separated and are structured as follows:
          A valid parameter value has the form `key_operator_value`. `key` is the variable name, `operator` is the comparison operator to be used and `value` the variable value.

          **Note:** Values are always treated as String objects on server side.

          Valid operator values are: `eq` - equal to; `neq` - not equal to; `gt` - greater than; `gteq` - greater than or equal to; `lt` - lower than; `lteq` - lower than or equal to; `like`.

          Key and value may not contain underscore or comma characters.
        explode: true
        in: query
        name: variables
        required: false
        schema:
          type: string
        style: form
      - description: Match all variable names provided in variables case-insensitively.
          If set to `true` variableName and variablename are treated as equal.
        explode: true
        in: query
        name: variableNamesIgnoreCase
        required: false
        schema:
          type: boolean
        style: form
      - description: Match all variable values provided in variables case-insensitively.
          If set to `true` variableValue and variablevalue are treated as equal.
        explode: true
        in: query
        name: variableValuesIgnoreCase
        required: false
        schema:
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/json:
              examples:
                example-1:
                  description: Response for GET `/history/process-instance/count?variables=myVariable_eq_camunda`
                  summary: Status 200 response
                  value:
                    count: 1
              schema:
                $ref: '#/components/schemas/CountResultDto'
          description: Request successful.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
          description: |-
            Bad Request
            Returned if some of the query parameters are invalid.
            See the [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling) for the error response format.
      summary: Get List Count
      tags:
      - Historic Process Instance
      x-accepts: application/json
    post:
      description: |-
        Queries for the number of historic process instances that fulfill the given parameters.
        This method takes the same message body as the [Get Process Instances (POST)](https://docs.camunda.org/manual/7.14/reference/rest/history/process-instance/get-process-instance-query/) method and
        therefore it is slightly more powerful than the [Get Process Instance Count](https://docs.camunda.org/manual/7.14/reference/rest/history/process-instance/post-process-instance-query-count/) method.
      operationId: queryHistoricProcessInstancesCount
      requestBody:
        content:
          application/json:
            examples:
              example-1:
                summary: POST `/history/process-instance/count`
                value:
                  finishedAfter: 2013-01-01T00:00:00.000+0200
                  finishedBefore: 2013-04-01T23:59:59.000+0200
                  executedActivityAfter: 2013-03-23T13:42:44.000+0200
                  variables:
                  - name: myVariable
                    operator: eq
                    value: camunda
                  - name: mySecondVariable
                    operator: neq
                    value: 124
            schema:
              $ref: '#/components/schemas/HistoricProcessInstanceQueryDto'
      responses:
        "200":
          content:
            application/json:
              examples:
                example-1:
                  summary: Status 200 Response 1
                  value:
                    count: 1
              schema:
                $ref: '#/components/schemas/CountResultDto'
          description: Request successful.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
          description: |-
            Bad Request
            Returned if some of the query parameters are invalid.
            See the [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling) for the error response format.
      summary: Get List Count (POST)
      tags:
      - Historic Process Instance
      x-contentType: application/json
      x-accepts: application/json
  /history/process-instance/delete:
    post:
      description: |-
        Delete multiple historic process instances asynchronously (batch).
        At least `historicProcessInstanceIds` or `historicProcessInstanceQuery` has to be provided.
        If both are provided then all instances matching query criterion and instances from the list will be deleted.
      operationId: deleteHistoricProcessInstancesAsync
      requestBody:
        content:
          application/json:
            examples:
              example-1:
                summary: POST `/history/process-instance/delete`
                value:
                  deleteReason: aReason
                  historicProcessInstanceIds:
                  - aProcess
                  - secondProcess
                  historicProcessInstanceQuery:
                    startedAfter: 2016-10-11T11:44:13.000+0200
                    finishedBefore: 2016-10-13T11:44:17.000+0200
            schema:
              $ref: '#/components/schemas/DeleteHistoricProcessInstancesDto'
      responses:
        "200":
          content:
            application/json:
              examples:
                example-1:
                  description: Response for POST `/history/process-instance/delete`
                  summary: Status 200 response
                  value:
                    id: 120b568d-724a-11e9-98b7-be5e0f7575b7
                    type: process-set-removal-time
                    totalJobs: 12
                    batchJobsPerSeed: 100
                    invocationsPerBatchJob: 1
                    seedJobDefinitionId: 120b5690-724a-11e9-98b7-be5e0f7575b7
                    monitorJobDefinitionId: 120b568f-724a-11e9-98b7-be5e0f7575b7
                    batchJobDefinitionId: 120b568e-724a-11e9-98b7-be5e0f7575b7
                    tenantId: accounting
                    suspended: false
                    createUserId: null
              schema:
                $ref: '#/components/schemas/BatchDto'
          description: Request successful.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
          description: |-
            Returned if some of the query parameters are invalid, i.e. neither historicProcessInstanceIds,
            nor historicProcessInstanceQuery is present. See the [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
      summary: Delete Async (POST)
      tags:
      - Historic Process Instance
      x-contentType: application/json
      x-accepts: application/json
  /history/process-instance/report:
    get:
      description: |-
        Retrieves a report about the duration of completed process instances, grouped by a period.
        These reports include the maximum, minimum and average duration of all completed process instances which were started in a given period.

        **Note:** This only includes historic data.
      operationId: getHistoricProcessInstanceDurationReport
      parameters:
      - description: |-
          **Mandatory.** Specifies the type of the report to retrieve.
          To retrieve a report about the duration of process instances, the value must be set to `duration`.
        explode: true
        in: query
        name: reportType
        required: true
        schema:
          type: string
        style: form
      - description: '**Mandatory.** Specifies the granularity of the report. Valid
          values are `month` and `quarter`.'
        explode: true
        in: query
        name: periodUnit
        required: true
        schema:
          enum:
          - month
          - quarter
          type: string
        style: form
      - description: Filter by process definition ids. Must be a comma-separated list
          of process definition ids.
        explode: true
        in: query
        name: processDefinitionIdIn
        required: false
        schema:
          type: string
        style: form
      - description: Filter by process definition keys. Must be a comma-separated
          list of process definition keys.
        explode: true
        in: query
        name: processDefinitionKeyIn
        required: false
        schema:
          type: string
        style: form
      - description: |-
          Restrict to instances that were started before the given date.
          By [default](), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2016-01-23T14:42:45.000+0200`.
        explode: true
        in: query
        name: startedBefore
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - description: |-
          Restrict to instances that were started after the given date.
          By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2016-01-23T14:42:45.000+0200`.
        explode: true
        in: query
        name: startedAfter
        required: false
        schema:
          format: date-time
          type: string
        style: form
      responses:
        "200":
          content:
            text/csv:
              schema: {}
          description: Request successful. In case of an expected text/csv response
            to retrieve the result as a csv file.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
          description: |-
            Returned if some of the query parameters are invalid or mandatory parameters are not supplied.
            See the [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling) for the error response format.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
          description: |-
            If the authenticated user is unauthorized to read the history.
            See the [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling) for the error response format.
      summary: Get Duration Report
      tags:
      - Historic Process Instance
      x-accepts: application/json
  /history/process-instance/set-removal-time:
    post:
      description: |-
        Sets the removal time to multiple historic process instances asynchronously (batch).

        At least `historicProcessInstanceIds` or `historicProcessInstanceQuery` has to be provided.
        If both are provided, all instances matching query criterion and instances from the list will be updated with a removal time.
      operationId: setRemovalTimeAsync
      requestBody:
        content:
          application/json:
            examples:
              example-1:
                summary: POST `/history/process-instance/set-removal-time`
                value:
                  absoluteRemovalTime: 2019-05-05T11:56:24.725+0200
                  hierarchical: true
                  historicProcessInstanceQuery:
                    unfinished: true
                  historicProcessInstanceIds:
                  - b4d2ad98-7240-11e9-98b7-be5e0f7575b7
                  - b4d2ad94-7240-11e9-98b7-be5e0f7575b7
            schema:
              $ref: '#/components/schemas/SetRemovalTimeToHistoricProcessInstancesDto'
      responses:
        "200":
          content:
            application/json:
              examples:
                example-1:
                  description: Response for POST `/history/process-instance/set-removal-time`
                  summary: Status 200 response
                  value:
                    id: 120b568d-724a-11e9-98b7-be5e0f7575b7
                    type: process-set-removal-time
                    totalJobs: 12
                    batchJobsPerSeed: 100
                    invocationsPerBatchJob: 1
                    seedJobDefinitionId: 120b5690-724a-11e9-98b7-be5e0f7575b7
                    monitorJobDefinitionId: 120b568f-724a-11e9-98b7-be5e0f7575b7
                    batchJobDefinitionId: 120b568e-724a-11e9-98b7-be5e0f7575b7
                    tenantId: accounting
                    suspended: false
                    createUserId: null
              schema:
                $ref: '#/components/schemas/BatchDto'
          description: Request successful.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
          description: |-
            Bad Request
            Request was unsuccessfull due to a bad user request. This occurs if some of the query parameters are invalid,
            e. g. if neither `historicProcessInstances` nor `historicProcessInstanceQuery` is present or if no mode is specified.

            See the [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling) for the error response format.
      summary: Set Removal Time Async (POST)
      tags:
      - Historic Process Instance
      x-contentType: application/json
      x-accepts: application/json
  /history/process-instance/{id}:
    delete:
      description: Deletes a process instance from the history by id.
      operationId: deleteHistoricProcessInstance
      parameters:
      - description: The id of the historic process instance to be deleted.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - description: If set to `false`, the request will still be successful if the
          process id is not found.
        explode: true
        in: query
        name: failIfNotExists
        required: false
        schema:
          type: boolean
        style: form
      responses:
        "204":
          description: Request successful.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
          description: |-
            Not found
            Historic process instance with given id does not exist.
      summary: Delete
      tags:
      - Historic Process Instance
      x-accepts: application/json
    get:
      description: Retrieves a historic process instance by id, according to the `HistoricProcessInstance`
        interface in the engine.
      operationId: getHistoricProcessInstance
      parameters:
      - description: The id of the historic process instance to be retrieved.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              examples:
                example-1:
                  summary: GET `/history/process-instance/7c80cc8f-ef95-11e6-b6e6-34f39ab71d4e`
                  value:
                    id: 7c80cc8f-ef95-11e6-b6e6-34f39ab71d4e
                    businessKey: null
                    processDefinitionId: invoice:1:7bf79f13-ef95-11e6-b6e6-34f39ab71d4e
                    processDefinitionKey: invoice
                    processDefinitionName: Invoice Receipt
                    processDefinitionVersion: 1
                    startTime: 2017-02-10T14:33:19.000+0200
                    endTime: null
                    removalTime: null
                    durationInMillis: null
                    startUserId: null
                    startActivityId: StartEvent_1
                    deleteReason: null
                    rootProcessInstanceId: f8259e5d-ab9d-11e8-8449-e4a7a094a9d6
                    superProcessInstanceId: null
                    superCaseInstanceId: null
                    caseInstanceId: null
                    tenantId: null
                    state: ACTIVE
              schema:
                $ref: '#/components/schemas/HistoricProcessInstanceDto'
          description: Request successful.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
          description: |-
            Not Found
            Historic process instance with given id does not exist.
            See the [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling) for the error response format.
      summary: Get
      tags:
      - Historic Process Instance
      x-accepts: application/json
  /history/process-instance/{id}/variable-instances:
    delete:
      description: Deletes all variables of a process instance from the history by
        id.
      operationId: deleteHistoricVariableInstancesOfHistoricProcessInstance
      parameters:
      - description: The id of the process instance for which all historic variables
          are to be deleted.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: Request successful.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
          description: |-
            Not found
            Historic process instance with given id does not exist.
            See the [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#parse-exceptions) for the error response format.
      summary: Delete Variable Instances
      tags:
      - Historic Process Instance
      x-accepts: application/json
  /incident:
    get:
      description: |-
        Queries for incidents that fulfill given parameters. The size of the result set can be retrieved by using
        the [Get Incident Count](https://docs.camunda.org/manual/7.14/reference/rest/incident/get-query-count/) method.
      operationId: getIncidents
      parameters:
      - description: Restricts to incidents that have the given id.
        explode: true
        in: query
        name: incidentId
        required: false
        schema:
          type: string
        style: form
      - description: |-
          Restricts to incidents that belong to the given incident type. See the
          [User Guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/incidents/#incident-types) for a list of incident
          types.
        explode: true
        in: query
        name: incidentType
        required: false
        schema:
          type: string
        style: form
      - description: Restricts to incidents that have the given incident message.
        explode: true
        in: query
        name: incidentMessage
        required: false
        schema:
          type: string
        style: form
      - description: |-
          Restricts to incidents that incidents message is a substring of the given value. The string can include
          the wildcard character '%' to express like-strategy: starts with (`string%`), ends with (`%string`) or
          contains (`%string%`).
        explode: true
        in: query
        name: incidentMessageLike
        required: false
        schema:
          type: string
        style: form
      - description: Restricts to incidents that belong to a process definition with
          the given id.
        explode: true
        in: query
        name: processDefinitionId
        required: false
        schema:
          type: string
        style: form
      - description: |-
          Restricts to incidents that belong to a process definition with the given keys. Must be a
          comma-separated list.
        explode: true
        in: query
        name: processDefinitionKeyIn
        required: false
        schema:
          type: string
        style: form
      - description: Restricts to incidents that belong to a process instance with
          the given id.
        explode: true
        in: query
        name: processInstanceId
        required: false
        schema:
          type: string
        style: form
      - description: Restricts to incidents that belong to an execution with the given
          id.
        explode: true
        in: query
        name: executionId
        required: false
        schema:
          type: string
        style: form
      - description: |-
          Restricts to incidents that have an incidentTimestamp date before the given date. By default, the date
          must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
        explode: true
        in: query
        name: incidentTimestampBefore
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - description: |-
          Restricts to incidents that have an incidentTimestamp date after the given date. By default*, the date
          must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
        explode: true
        in: query
        name: incidentTimestampAfter
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - description: Restricts to incidents that belong to an activity with the given
          id.
        explode: true
        in: query
        name: activityId
        required: false
        schema:
          type: string
        style: form
      - description: Restricts to incidents that were created due to the failure of
          an activity with the given id.
        explode: true
        in: query
        name: failedActivityId
        required: false
        schema:
          type: string
        style: form
      - description: Restricts to incidents that have the given incident id as cause
          incident.
        explode: true
        in: query
        name: causeIncidentId
        required: false
        schema:
          type: string
        style: form
      - description: Restricts to incidents that have the given incident id as root
          cause incident.
        explode: true
        in: query
        name: rootCauseIncidentId
        required: false
        schema:
          type: string
        style: form
      - description: Restricts to incidents that have the given parameter set as configuration.
        explode: true
        in: query
        name: configuration
        required: false
        schema:
          type: string
        style: form
      - description: Restricts to incidents that have one of the given comma-separated
          tenant ids.
        explode: true
        in: query
        name: tenantIdIn
        required: false
        schema:
          type: string
        style: form
      - description: Restricts to incidents that have one of the given comma-separated
          job definition ids.
        explode: true
        in: query
        name: jobDefinitionIdIn
        required: false
        schema:
          type: string
        style: form
      - description: |-
          Sort the results lexicographically by a given criterion.
          Must be used in conjunction with the sortOrder parameter.
        explode: true
        in: query
        name: sortBy
        required: false
        schema:
          enum:
          - incidentId
          - incidentMessage
          - incidentTimestamp
          - incidentType
          - executionId
          - activityId
          - processInstanceId
          - processDefinitionId
          - causeIncidentId
          - rootCauseIncidentId
          - configuration
          - tenantId
          type: string
        style: form
      - description: |-
          Sort the results in a given order. Values may be asc for ascending order or desc for descending order.
          Must be used in conjunction with the sortBy parameter.
        explode: true
        in: query
        name: sortOrder
        required: false
        schema:
          enum:
          - asc
          - desc
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              examples:
                example-1:
                  summary: GET `/incident/anIncidentId`
                  value:
                  - id: anIncidentId
                    processDefinitionId: aProcDefId
                    processInstanceId: aProcInstId
                    executionId: anExecutionId
                    incidentTimestamp: 2014-03-01T08:00:00.000+0200
                    incidentType: failedJob
                    activityId: serviceTask
                    failedActivityId: serviceTask
                    causeIncidentId: aCauseIncidentId
                    rootCauseIncidentId: aRootCauseIncidentId
                    configuration: aConfiguration
                    tenantId: null
                    incidentMessage: anIncidentMessage
                    jobDefinitionId: aJobDefinitionId
                  - id: anIncidentId
                    processDefinitionId: aProcDefId
                    processInstanceId: aProcInstId
                    executionId: anotherExecutionId
                    incidentTimestamp: 2014-03-01T09:00:00.000+0200
                    incidentType: customIncidentType
                    activityId: userTask
                    failedActivityId: userTask
                    causeIncidentId: anotherCauseIncidentId
                    rootCauseIncidentId: anotherRootCauseIncidentId
                    configuration: anotherConfiguration
                    tenantId: null
                    incidentMessage: anotherIncidentMessage
                    jobDefinitionId: null
              schema:
                items:
                  $ref: '#/components/schemas/IncidentDto'
                type: array
          description: Request successful.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
          description: |-
            Returned if some of the query parameters are invalid, for example if a `sortOrder` parameter is supplied,
            but no `sortBy`. See the [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling) for the error
            response format.
      summary: Get List
      tags:
      - Incident
      x-accepts: application/json
  /incident/count:
    get:
      description: |-
        Queries for the number of incidents that fulfill given parameters. Takes the same parameters as the
        [Get Incidents](https://docs.camunda.org/manual/7.14/reference/rest/incident/get-query/) method.
      operationId: getIncidentsCount
      parameters:
      - description: Restricts to incidents that have the given id.
        explode: true
        in: query
        name: incidentId
        required: false
        schema:
          type: string
        style: form
      - description: |-
          Restricts to incidents that belong to the given incident type. See the
          [User Guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/incidents/#incident-types) for a list of incident
          types.
        explode: true
        in: query
        name: incidentType
        required: false
        schema:
          type: string
        style: form
      - description: Restricts to incidents that have the given incident message.
        explode: true
        in: query
        name: incidentMessage
        required: false
        schema:
          type: string
        style: form
      - description: |-
          Restricts to incidents that incidents message is a substring of the given value. The string can include
          the wildcard character '%' to express like-strategy: starts with (`string%`), ends with (`%string`) or
          contains (`%string%`).
        explode: true
        in: query
        name: incidentMessageLike
        required: false
        schema:
          type: string
        style: form
      - description: Restricts to incidents that belong to a process definition with
          the given id.
        explode: true
        in: query
        name: processDefinitionId
        required: false
        schema:
          type: string
        style: form
      - description: |-
          Restricts to incidents that belong to a process definition with the given keys. Must be a
          comma-separated list.
        explode: true
        in: query
        name: processDefinitionKeyIn
        required: false
        schema:
          type: string
        style: form
      - description: Restricts to incidents that belong to a process instance with
          the given id.
        explode: true
        in: query
        name: processInstanceId
        required: false
        schema:
          type: string
        style: form
      - description: Restricts to incidents that belong to an execution with the given
          id.
        explode: true
        in: query
        name: executionId
        required: false
        schema:
          type: string
        style: form
      - description: |-
          Restricts to incidents that have an incidentTimestamp date before the given date. By default, the date
          must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
        explode: true
        in: query
        name: incidentTimestampBefore
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - description: |-
          Restricts to incidents that have an incidentTimestamp date after the given date. By default*, the date
          must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
        explode: true
        in: query
        name: incidentTimestampAfter
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - description: Restricts to incidents that belong to an activity with the given
          id.
        explode: true
        in: query
        name: activityId
        required: false
        schema:
          type: string
        style: form
      - description: Restricts to incidents that were created due to the failure of
          an activity with the given id.
        explode: true
        in: query
        name: failedActivityId
        required: false
        schema:
          type: string
        style: form
      - description: Restricts to incidents that have the given incident id as cause
          incident.
        explode: true
        in: query
        name: causeIncidentId
        required: false
        schema:
          type: string
        style: form
      - description: Restricts to incidents that have the given incident id as root
          cause incident.
        explode: true
        in: query
        name: rootCauseIncidentId
        required: false
        schema:
          type: string
        style: form
      - description: Restricts to incidents that have the given parameter set as configuration.
        explode: true
        in: query
        name: configuration
        required: false
        schema:
          type: string
        style: form
      - description: Restricts to incidents that have one of the given comma-separated
          tenant ids.
        explode: true
        in: query
        name: tenantIdIn
        required: false
        schema:
          type: string
        style: form
      - description: Restricts to incidents that have one of the given comma-separated
          job definition ids.
        explode: true
        in: query
        name: jobDefinitionIdIn
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              examples:
                example-1:
                  summary: GET `/incident/count?processInstanceId=aProcInstId`
                  value:
                  - count: 2
              schema:
                items:
                  $ref: '#/components/schemas/CountResultDto'
                type: array
          description: Request successful.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
          description: |-
            Returned if some of the query parameters are invalid. See the [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling) for the error
            response format.
      summary: Get List Count
      tags:
      - Incident
      x-accepts: application/json
  /incident/{id}:
    delete:
      description: Resolves an incident with given id.
      operationId: resolveIncident
      parameters:
      - description: The id of the incident to be resolved.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: Request successful.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
          description: Returned if an incident with given id does not exist.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
          description: |-
            Returned if an incident is not related to any execution or an incident is of type `failedJob` or
            `failedExternalTask`. To resolve such an incident, please refer to the
            [Incident Types](https://docs.camunda.org/manual/7.14/user-guide/process-engine/incidents/#incident-types) section.
      summary: Resolve Incident
      tags:
      - Incident
      x-accepts: application/json
    get:
      description: Retrieves an incident by ID.
      operationId: getIncident
      parameters:
      - description: The id of the incident to be retrieved.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              examples:
                example-1:
                  summary: GET `/incident/anIncidentId`
                  value:
                    id: anIncidentId
                    processDefinitionId: aProcDefId
                    processInstanceId: aProcInstId
                    executionId: anExecutionId
                    incidentTimestamp: 2014-03-01T08:00:00.000+0200
                    incidentType: failedJob
                    activityId: serviceTask
                    failedActivityId: serviceTask
                    causeIncidentId: aCauseIncidentId
                    rootCauseIncidentId: aRootCauseIncidentId
                    configuration: aConfiguration
                    tenantId: null
                    incidentMessage: anIncidentMessage
                    jobDefinitionId: aJobDefinitionId
              schema:
                $ref: '#/components/schemas/IncidentDto'
          description: Request successful.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
          description: Returned if an incident with given id does not exist.
      summary: Get Incident
      tags:
      - Incident
      x-accepts: application/json
  /message:
    post:
      description: "Correlates a message to the process engine to either trigger a\
        \ message start event or an intermediate message \ncatching event. Internally\
        \ this maps to the engine's message correlation builder methods\n`MessageCorrelationBuilder#correlateWithResult()`\
        \ and `MessageCorrelationBuilder#correlateAllWithResult()`.\nFor more information\
        \ about the correlation behavior, see the [Message Events](https://docs.camunda.org/manual/7.14/bpmn20/events/message-events/)\n\
        section of the [BPMN 2.0 Implementation Reference](https://docs.camunda.org/manual/7.14/reference/bpmn20/)."
      operationId: deliverMessage
      requestBody:
        content:
          application/json:
            examples:
              example-1:
                description: Correlate without result
                summary: POST /condition
                value:
                  messageName: aMessage
                  businessKey: aBusinessKey
                  correlationKeys:
                    aVariable:
                      value: aValue
                      type: String
                  processVariables:
                    aVariable:
                      value: aNewValue
                      type: String
                      valueInfo:
                        transient: true
                    anotherVariable:
                      value: true
                      type: Boolean
              example-2:
                description: Correlate with result
                summary: POST /condition
                value:
                  messageName: aMessage
                  businessKey: aBusinessKey
                  correlationKeys:
                    aVariable:
                      value: aValue
                      type: String
                  processVariables:
                    aVariable:
                      value: aNewValue
                      type: String
                      valueInfo:
                        transient: true
                    anotherVariable:
                      value: true
                      type: Boolean
                  resultEnabled: true
              example-3:
                description: Correlate with result and variables
                summary: POST /condition
                value:
                  messageName: aMessage
                  businessKey: aBusinessKey
                  correlationKeys:
                    aVariable:
                      value: aValue
                      type: String
                  processVariables:
                    aVariable:
                      value: aNewValue
                      type: String
                      valueInfo:
                        transient: true
                    anotherVariable:
                      value: true
                      type: Boolean
                  resultEnabled: true
                  variablesInResultEnabled: true
            schema:
              $ref: '#/components/schemas/CorrelationMessageDto'
      responses:
        "200":
          content:
            application/json:
              examples:
                example-1:
                  description: The Response content of a status 200. The property
                    `variablesInResultEnabled` in the request body was `false` (Default).
                  summary: Status 200 Response.
                  value:
                  - resultType: ProcessDefinition
                    execution: null
                    processInstance:
                      links: []
                      id: aProcInstId
                      definitionId: aProcDefId
                      businessKey: aKey
                      caseInstanceId: aCaseInstId
                      ended: false
                      suspended: false
                      tenantId: aTenantId
                example-2:
                  description: The Response content of a status 200. The property
                    `variablesInResultEnabled` in the request body was `true`.
                  summary: Status 200 Response.
                  value:
                  - resultType: Execution
                    execution:
                      id: anExecutionId
                      processInstanceId: aProcInstId
                      ended: false
                      tenantId: aTenantId
                    processInstance: null
                    variables:
                      aVariable:
                        value: aNewValue
                        type: String
                        valueInfo:
                          transient: true
                      anotherVariable:
                        value: true
                        type: Boolean
              schema:
                items:
                  $ref: '#/components/schemas/MessageCorrelationResultWithVariableDto'
                type: array
          description: |-
            Request successful. The property `resultEnabled` in the request body was `true`.
            The `variables` property is only returned, if the property variablesInResultEnable`
            was set to `true` in the request.
        "204":
          description: Request successful. The property `resultEnabled` in the request
            body was `false` (Default).
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
          description: |-
            Returned if:
            * no `messageName` was supplied
            * both `tenantId` and `withoutTenantId` are supplied
            * the message has not been correlated to exactly one entity (execution or process definition)
            * the variable value or type is invalid, for example if the value could not be parsed to an Integer value or the passed variable type is not supported.

            See the [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling) for the error response format.
      tags:
      - Message
      x-contentType: application/json
      x-accepts: application/json
  /metrics:
    get:
      description: Retrieves a list of metrics, aggregated for a given interval.
      operationId: interval
      parameters:
      - description: The name of the metric.
        explode: true
        in: query
        name: name
        required: false
        schema:
          enum:
          - activity-instance-start
          - activity-instance-end
          - job-acquisition-attempt
          - job-acquired-success
          - job-acquired-failure
          - job-execution-rejected
          - job-successful
          - job-failed
          - job-locked-exclusive
          - executed-decision-elements
          - history-cleanup-removed-process-instances
          - history-cleanup-removed-case-instances
          - history-cleanup-removed-decision-instances
          - history-cleanup-removed-batch-operations
          type: string
        style: form
      - description: |-
          The name of the reporter (host), on which the metrics was logged. This will have
          value provided by the [hostname configuration property](https://docs.camunda.org/manual/7.14/reference/deployment-descriptors/tags/process-engine/#hostname).
        explode: true
        in: query
        name: reporter
        required: false
        schema:
          type: string
        style: form
      - description: The start date (inclusive).
        explode: true
        in: query
        name: startDate
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - description: The end date (exclusive).
        explode: true
        in: query
        name: endDate
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - description: Pagination of results. Specifies the index of the first result
          to return.
        explode: true
        in: query
        name: firstResult
        required: false
        schema:
          type: integer
        style: form
      - description: |-
          Pagination of results. Specifies the maximum number of results to return.
          Will return less results if there are no more results left.
        explode: true
        in: query
        name: maxResults
        required: false
        schema:
          type: integer
        style: form
      - description: |-
          The interval for which the metrics should be aggregated. Time unit is seconds.
          Default: The interval is set to 15 minutes (900 seconds).
        explode: true
        in: query
        name: interval
        required: false
        schema:
          default: "900"
          type: string
        style: form
      - description: Aggregate metrics by reporter.
        explode: true
        in: query
        name: aggregateByReporter
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              examples:
                example-1:
                  summary: GET /metrics?name=activity-instance-end&startDate=1970-01-01T01:45:00.000%2b0200&endDate=1970-01-01T02:00:00.000%2b0200
                  value:
                  - timestamp: 1970-01-01T01:45:00.000+0200
                    name: activity-instance-end
                    reporter: REPORTER
                    value: 23
              schema:
                items:
                  $ref: '#/components/schemas/MetricsIntervalResultDto'
                type: array
          description: Request successful.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
          description: Returned if some of the query parameters are invalid.
      tags:
      - Metrics
      x-accepts: application/json
  /metrics/{metrics-name}/sum:
    get:
      description: Retrieves the `sum` (count) for a given metric.
      operationId: getMetrics
      parameters:
      - description: The name of the metric.
        explode: false
        in: path
        name: metrics-name
        required: true
        schema:
          enum:
          - activity-instance-start
          - activity-instance-end
          - job-acquisition-attempt
          - job-acquired-success
          - job-acquired-failure
          - job-execution-rejected
          - job-successful
          - job-failed
          - job-locked-exclusive
          - executed-decision-elements
          - history-cleanup-removed-process-instances
          - history-cleanup-removed-case-instances
          - history-cleanup-removed-decision-instances
          - history-cleanup-removed-batch-operations
          type: string
        style: simple
      - description: The start date (inclusive).
        explode: true
        in: query
        name: startDate
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - description: The end date (exclusive).
        explode: true
        in: query
        name: endDate
        required: false
        schema:
          format: date-time
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              examples:
                example-1:
                  summary: GET /metrics/activity-instance-end/sum?startDate=2015-01-01T00:00:00.000%2b0200
                  value:
                    result: 4342343241
              schema:
                $ref: '#/components/schemas/MetricsResultDto'
          description: Request successful.
      tags:
      - Metrics
      x-accepts: application/json
  /process-definition:
    get:
      description: "Queries for process definitions that fulfill given parameters.\
        \ Parameters may be the properties of \nprocess definitions, such as the name,\
        \ key or version. The size of the result set can be retrieved\nby using the\
        \ [Get Definition Count](https://docs.camunda.org/manual/7.14/reference/rest/process-definition/get-query-count/)\
        \ method."
      operationId: getProcessDefinitions
      parameters:
      - description: Filter by process definition id.
        explode: true
        in: query
        name: processDefinitionId
        required: false
        schema:
          type: string
        style: form
      - description: Filter by a comma-separated list of process definition ids.
        explode: true
        in: query
        name: processDefinitionIdIn
        required: false
        schema:
          type: string
        style: form
      - description: Filter by process definition name.
        explode: true
        in: query
        name: name
        required: false
        schema:
          type: string
        style: form
      - description: Filter by process definition names that the parameter is a substring
          of.
        explode: true
        in: query
        name: nameLike
        required: false
        schema:
          type: string
        style: form
      - description: Filter by the deployment the id belongs to.
        explode: true
        in: query
        name: deploymentId
        required: false
        schema:
          type: string
        style: form
      - description: |-
          Filter by the deploy time of the deployment the process definition belongs to.
          Only selects process definitions that have been deployed after (exclusive) a specific time.
          By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the
          format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g.,
          `2013-01-23T14:42:45.546+0200`.
        explode: true
        in: query
        name: deployedAfter
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - description: |-
          Filter by the deploy time of the deployment the process definition belongs to.
          Only selects process definitions that have been deployed at a specific time (exact match).
          By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the
          format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g.,
          `2013-01-23T14:42:45.546+0200`.
        explode: true
        in: query
        name: deployedAt
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - description: Filter by process definition key, i.e., the id in the BPMN 2.0
          XML. Exact match.
        explode: true
        in: query
        name: key
        required: false
        schema:
          type: string
        style: form
      - description: Filter by a comma-separated list of process definition keys.
        explode: true
        in: query
        name: keysIn
        required: false
        schema:
          type: string
        style: form
      - description: Filter by process definition keys that the parameter is a substring
          of.
        explode: true
        in: query
        name: keyLike
        required: false
        schema:
          type: string
        style: form
      - description: Filter by process definition category. Exact match.
        explode: true
        in: query
        name: category
        required: false
        schema:
          type: string
        style: form
      - description: Filter by process definition categories that the parameter is
          a substring of.
        explode: true
        in: query
        name: categoryLike
        required: false
        schema:
          type: string
        style: form
      - description: Filter by process definition version.
        explode: true
        in: query
        name: version
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - description: |-
          Only include those process definitions that are latest versions.
          Value may only be `true`, as `false` is the default behavior.
        explode: true
        in: query
        name: latestVersion
        required: false
        schema:
          type: boolean
        style: form
      - description: Filter by the name of the process definition resource. Exact
          match.
        explode: true
        in: query
        name: resourceName
        required: false
        schema:
          type: string
        style: form
      - description: Filter by names of those process definition resources that the
          parameter is a substring of.
        explode: true
        in: query
        name: resourceNameLike
        required: false
        schema:
          type: string
        style: form
      - description: Filter by a user name who is allowed to start the process.
        explode: true
        in: query
        name: startableBy
        required: false
        schema:
          type: string
        style: form
      - description: |-
          Only include active process definitions.
          Value may only be `true`, as `false` is the default behavior.
        explode: true
        in: query
        name: active
        required: false
        schema:
          type: boolean
        style: form
      - description: |-
          Only include suspended process definitions.
          Value may only be `true`, as `false` is the default behavior.
        explode: true
        in: query
        name: suspended
        required: false
        schema:
          type: boolean
        style: form
      - description: Filter by the incident id.
        explode: true
        in: query
        name: incidentId
        required: false
        schema:
          type: string
        style: form
      - description: |-
          Filter by the incident type.
          See the [User Guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/incidents/#incident-types)
          for a list of incident types.
        explode: true
        in: query
        name: incidentType
        required: false
        schema:
          type: string
        style: form
      - description: Filter by the incident message. Exact match.
        explode: true
        in: query
        name: incidentMessage
        required: false
        schema:
          type: string
        style: form
      - description: Filter by the incident message that the parameter is a substring
          of.
        explode: true
        in: query
        name: incidentMessageLike
        required: false
        schema:
          type: string
        style: form
      - description: |-
          Filter by a comma-separated list of tenant ids.
          A process definition must have one of the given tenant ids.
        explode: true
        in: query
        name: tenantIdIn
        required: false
        schema:
          type: string
        style: form
      - description: |-
          Only include process definitions which belong to no tenant.
          Value may only be true, as false is the default behavior.
        explode: true
        in: query
        name: withoutTenantId
        required: false
        schema:
          type: boolean
        style: form
      - description: |-
          Include process definitions which belong to no tenant. Can be used in combination with `tenantIdIn`.
          Value may only be `true`, as `false` is the default behavior.
        explode: true
        in: query
        name: includeProcessDefinitionsWithoutTenantId
        required: false
        schema:
          type: boolean
        style: form
      - description: Filter by the version tag.
        explode: true
        in: query
        name: versionTag
        required: false
        schema:
          type: string
        style: form
      - description: Filter by the version tag that the parameter is a substring of.
        explode: true
        in: query
        name: versionTagLike
        required: false
        schema:
          type: string
        style: form
      - description: Only include process definitions without a `versionTag`.
        explode: true
        in: query
        name: withoutVersionTag
        required: false
        schema:
          type: boolean
        style: form
      - description: Filter by process definitions which are startable in Tasklist..
        explode: true
        in: query
        name: startableInTasklist
        required: false
        schema:
          type: boolean
        style: form
      - description: Filter by process definitions which are not startable in Tasklist.
        explode: true
        in: query
        name: notStartableInTasklist
        required: false
        schema:
          type: boolean
        style: form
      - description: |-
          Filter by process definitions which the user is allowed to start in Tasklist.
          If the user doesn't have these permissions the result will be empty list.
          The permissions are:
          * `CREATE` permission for all Process instances
          * `CREATE_INSTANCE` and `READ` permission on Process definition level
        explode: true
        in: query
        name: startablePermissionCheck
        required: false
        schema:
          type: boolean
        style: form
      - description: |-
          Sort the results lexicographically by a given criterion.
          Must be used in conjunction with the sortOrder parameter.
        explode: true
        in: query
        name: sortBy
        required: false
        schema:
          enum:
          - category
          - key
          - id
          - name
          - version
          - deploymentId
          - deployTime
          - 'tenantId '
          - versionTag
          type: string
        style: form
      - description: |-
          Sort the results in a given order. Values may be asc for ascending order or desc for descending order.
          Must be used in conjunction with the sortBy parameter.
        explode: true
        in: query
        name: sortOrder
        required: false
        schema:
          enum:
          - asc
          - desc
          type: string
        style: form
      - description: Pagination of results. Specifies the index of the first result
          to return.
        explode: true
        in: query
        name: firstResult
        required: false
        schema:
          type: integer
        style: form
      - description: |-
          Pagination of results. Specifies the maximum number of results to return.
          Will return less results if there are no more results left.
        explode: true
        in: query
        name: maxResults
        required: false
        schema:
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              examples:
                example-1:
                  description: Response of GET `/process-definition?keyLike=invoice&sortBy=version&sortOrder=asc`
                  summary: Status 200 response
                  value:
                  - id: invoice:1:c3a63aaa-2046-11e7-8f94-34f39ab71d4e
                    key: invoice
                    category: http://www.omg.org/spec/BPMN/20100524/MODEL
                    description: null
                    name: Invoice Receipt
                    version: 1
                    resource: invoice.v1.bpmn
                    deploymentId: c398cd26-2046-11e7-8f94-34f39ab71d4e
                    diagram: null
                    suspended: false
                    tenantId: null
                    versionTag: null
                    historyTimeToLive: 5
                    startableInTasklist: true
                  - id: invoice:2:c3e1bd16-2046-11e7-8f94-34f39ab71d4e
                    key: invoice
                    category: http://www.omg.org/spec/BPMN/20100524/MODEL
                    description: null
                    name: Invoice Receipt
                    version: 2
                    resource: invoice.v2.bpmn
                    deploymentId: c3d82020-2046-11e7-8f94-34f39ab71d4e
                    diagram: null
                    suspended: false
                    tenantId: null
                    versionTag: null
                    historyTimeToLive: null
                    startableInTasklist: true
              schema:
                items:
                  $ref: '#/components/schemas/ProcessDefinitionDto'
                type: array
          description: Request successful.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
          description: |-
            Returned if some of the query parameters are invalid, for example if a `sortOrder` parameter is supplied,
            but no `sortBy`. See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
      summary: Get List
      tags:
      - Process Definition
      x-accepts: application/json
  /process-definition/count:
    get:
      description: |-
        Requests the number of process definitions that fulfill the query criteria.
        Takes the same filtering parameters as the [Get Definitions](https://docs.camunda.org/manual/7.14/reference/rest/process-definition/get-query/) method.
      operationId: getProcessDefinitionsCount
      parameters:
      - description: Filter by process definition id.
        explode: true
        in: query
        name: processDefinitionId
        required: false
        schema:
          type: string
        style: form
      - description: Filter by a comma-separated list of process definition ids.
        explode: true
        in: query
        name: processDefinitionIdIn
        required: false
        schema:
          type: string
        style: form
      - description: Filter by process definition name.
        explode: true
        in: query
        name: name
        required: false
        schema:
          type: string
        style: form
      - description: Filter by process definition names that the parameter is a substring
          of.
        explode: true
        in: query
        name: nameLike
        required: false
        schema:
          type: string
        style: form
      - description: Filter by the deployment the id belongs to.
        explode: true
        in: query
        name: deploymentId
        required: false
        schema:
          type: string
        style: form
      - description: |-
          Filter by the deploy time of the deployment the process definition belongs to.
          Only selects process definitions that have been deployed after (exclusive) a specific time.
          By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the
          format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g.,
          `2013-01-23T14:42:45.546+0200`.
        explode: true
        in: query
        name: deployedAfter
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - description: |-
          Filter by the deploy time of the deployment the process definition belongs to.
          Only selects process definitions that have been deployed at a specific time (exact match).
          By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the
          format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g.,
          `2013-01-23T14:42:45.546+0200`.
        explode: true
        in: query
        name: deployedAt
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - description: Filter by process definition key, i.e., the id in the BPMN 2.0
          XML. Exact match.
        explode: true
        in: query
        name: key
        required: false
        schema:
          type: string
        style: form
      - description: Filter by a comma-separated list of process definition keys.
        explode: true
        in: query
        name: keysIn
        required: false
        schema:
          type: string
        style: form
      - description: Filter by process definition keys that the parameter is a substring
          of.
        explode: true
        in: query
        name: keyLike
        required: false
        schema:
          type: string
        style: form
      - description: Filter by process definition category. Exact match.
        explode: true
        in: query
        name: category
        required: false
        schema:
          type: string
        style: form
      - description: Filter by process definition categories that the parameter is
          a substring of.
        explode: true
        in: query
        name: categoryLike
        required: false
        schema:
          type: string
        style: form
      - description: Filter by process definition version.
        explode: true
        in: query
        name: version
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - description: |-
          Only include those process definitions that are latest versions.
          Value may only be `true`, as `false` is the default behavior.
        explode: true
        in: query
        name: latestVersion
        required: false
        schema:
          type: boolean
        style: form
      - description: Filter by the name of the process definition resource. Exact
          match.
        explode: true
        in: query
        name: resourceName
        required: false
        schema:
          type: string
        style: form
      - description: Filter by names of those process definition resources that the
          parameter is a substring of.
        explode: true
        in: query
        name: resourceNameLike
        required: false
        schema:
          type: string
        style: form
      - description: Filter by a user name who is allowed to start the process.
        explode: true
        in: query
        name: startableBy
        required: false
        schema:
          type: string
        style: form
      - description: |-
          Only include active process definitions.
          Value may only be `true`, as `false` is the default behavior.
        explode: true
        in: query
        name: active
        required: false
        schema:
          type: boolean
        style: form
      - description: |-
          Only include suspended process definitions.
          Value may only be `true`, as `false` is the default behavior.
        explode: true
        in: query
        name: suspended
        required: false
        schema:
          type: boolean
        style: form
      - description: Filter by the incident id.
        explode: true
        in: query
        name: incidentId
        required: false
        schema:
          type: string
        style: form
      - description: |-
          Filter by the incident type.
          See the [User Guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/incidents/#incident-types)
          for a list of incident types.
        explode: true
        in: query
        name: incidentType
        required: false
        schema:
          type: string
        style: form
      - description: Filter by the incident message. Exact match.
        explode: true
        in: query
        name: incidentMessage
        required: false
        schema:
          type: string
        style: form
      - description: Filter by the incident message that the parameter is a substring
          of.
        explode: true
        in: query
        name: incidentMessageLike
        required: false
        schema:
          type: string
        style: form
      - description: |-
          Filter by a comma-separated list of tenant ids.
          A process definition must have one of the given tenant ids.
        explode: true
        in: query
        name: tenantIdIn
        required: false
        schema:
          type: string
        style: form
      - description: |-
          Only include process definitions which belong to no tenant.
          Value may only be true, as false is the default behavior.
        explode: true
        in: query
        name: withoutTenantId
        required: false
        schema:
          type: boolean
        style: form
      - description: |-
          Include process definitions which belong to no tenant. Can be used in combination with `tenantIdIn`.
          Value may only be `true`, as `false` is the default behavior.
        explode: true
        in: query
        name: includeProcessDefinitionsWithoutTenantId
        required: false
        schema:
          type: boolean
        style: form
      - description: Filter by the version tag.
        explode: true
        in: query
        name: versionTag
        required: false
        schema:
          type: string
        style: form
      - description: Filter by the version tag that the parameter is a substring of.
        explode: true
        in: query
        name: versionTagLike
        required: false
        schema:
          type: string
        style: form
      - description: Only include process definitions without a `versionTag`.
        explode: true
        in: query
        name: withoutVersionTag
        required: false
        schema:
          type: boolean
        style: form
      - description: Filter by process definitions which are startable in Tasklist..
        explode: true
        in: query
        name: startableInTasklist
        required: false
        schema:
          type: boolean
        style: form
      - description: Filter by process definitions which are not startable in Tasklist.
        explode: true
        in: query
        name: notStartableInTasklist
        required: false
        schema:
          type: boolean
        style: form
      - description: |-
          Filter by process definitions which the user is allowed to start in Tasklist.
          If the user doesn't have these permissions the result will be empty list.
          The permissions are:
          * `CREATE` permission for all Process instances
          * `CREATE_INSTANCE` and `READ` permission on Process definition level
        explode: true
        in: query
        name: startablePermissionCheck
        required: false
        schema:
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/json:
              examples:
                example-1:
                  description: Response of GET `/process-definition/count?keyLike=Key&version=47`
                  summary: Status 200 response
                  value:
                    count: 1
              schema:
                $ref: '#/components/schemas/CountResultDto'
          description: Request successful.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
          description: |-
            Returned if some of the query parameters are invalid.
            See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
      summary: Get List Count
      tags:
      - Process Definition
      x-accepts: application/json
  /process-definition/key/{key}:
    delete:
      description: Deletes process definitions by a given key which belong to no tenant
        id.
      operationId: deleteProcessDefinitionsByKey
      parameters:
      - description: The key of the process definitions to be deleted.
        explode: false
        in: path
        name: key
        required: true
        schema:
          type: string
        style: simple
      - description: |-
          `true`, if all process instances, historic process instances and jobs
          for this process definition should be deleted.
        explode: true
        in: query
        name: cascade
        required: false
        schema:
          type: boolean
        style: form
      - description: '`true`, if only the built-in ExecutionListeners should be notified
          with the end event.'
        explode: true
        in: query
        name: skipCustomListeners
        required: false
        schema:
          default: false
          type: boolean
        style: form
      - description: |-
          A boolean value to control whether input/output mappings should be executed during deletion.
          `true`, if input/output mappings should not be invoked.
        explode: true
        in: query
        name: skipIoMappings
        required: false
        schema:
          default: false
          type: boolean
        style: form
      responses:
        "204":
          description: Request successful.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthorizationExceptionDto'
          description: |-
            Forbidden
            The process definitions with the given `key` cannot be deleted due to missing permissions.
            See the [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
          description: |-
            Not found
            Process definition with given `key` does not exist. See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
      summary: Delete By Key
      tags:
      - Process Definition
      x-accepts: application/json
    get:
      description: Retrieves the latest version of the process definition which belongs
        to no tenant according to the `ProcessDefinition` interface in the engine.
      operationId: getProcessDefinitionByKey
      parameters:
      - description: The key of the process definition (the latest version thereof)
          to be retrieved.
        explode: false
        in: path
        name: key
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              examples:
                example-1:
                  description: Response of GET `/process-definition/key/invoice`
                  summary: Status 200 response
                  value:
                    id: invoice:1:c3a63aaa-2046-11e7-8f94-34f39ab71d4e
                    key: invoice
                    category: http://www.omg.org/spec/BPMN/20100524/MODEL
                    description: null
                    name: Invoice Receipt
                    version: 1
                    resource: invoice.v1.bpmn
                    deploymentId: c398cd26-2046-11e7-8f94-34f39ab71d4e
                    diagram: null
                    suspended: false
                    tenantId: null
                    versionTag: null
                    historyTimeToLive: 5
                    startableInTasklist: true
              schema:
                $ref: '#/components/schemas/ProcessDefinitionDto'
          description: Request successful.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
          description: |-
            Process definition with given `key` does not exist. See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
      summary: Get
      tags:
      - Process Definition
      x-accepts: application/json
  /process-definition/key/{key}/deployed-start-form:
    get:
      description: |-
        Retrieves the deployed form that can be referenced from a start event.
        For further information please refer to [User Guide](https://docs.camunda.org/manual/7.14/user-guide/task-forms/#embedded-task-forms).
      operationId: getDeployedStartFormByKey
      parameters:
      - description: The key of the process definition (the latest version thereof)
          to be retrieved.
        explode: false
        in: path
        name: key
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/xhtml+xml:
              examples:
                example-1:
                  description: Resonse for GET `/process-definition/key/processDefinitionKey/deployed-start-form`
                  summary: Status 200 Response
                  value: |-
                    <form role="form" name="invoiceForm"
                                                          class="form-horizontal">

                                                      <div class="form-group">
                                                        <label class="control-label col-md-4"
                                                               for="creditor">Creditor</label>
                                                        <div class="col-md-8">
                                                          <input cam-variable-name="creditor"
                                                                 cam-variable-type="String"
                                                                 id="creditor"
                                                                 class="form-control"
                                                                 type="text"
                                                                 required />
                                                          <div class="help">
                                                            (e.g. &quot;Great Pizza for Everyone Inc.&quot;)
                                                          </div>
                                                        </div>
                                                      </div>

                                                    </form>
              schema:
                description: For `application/xhtml+xml` Responses, a byte stream
                  is returned.
                format: binary
                type: string
          description: Request successful.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
          description: |-
            The form key has wrong format.  See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthorizationExceptionDto'
          description: |-
            The deployed start form cannot be retrieved due to missing permissions on process definition resource.
            See the [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
          description: |-
            No deployed start form for a given process definition exists. See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
      summary: Get Deployed Start Form
      tags:
      - Process Definition
      x-accepts: application/json
  /process-definition/key/{key}/diagram:
    get:
      description: |-
        Retrieves the diagram for the latest version of the process definition which belongs to no tenant.

        If the process definition's deployment contains an image resource with the same file name
        as the process definition, the deployed image will be returned by the Get Diagram endpoint.
        Example: `someProcess.bpmn` and `someProcess.png`.
        Supported file extentions for the image are: `svg`, `png`, `jpg`, and `gif`.
      operationId: getProcessDefinitionDiagramByKey
      parameters:
      - description: The key of the process definition.
        explode: false
        in: path
        name: key
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/octet-stream:
              schema:
                description: defaults to `application/octet-stream` if the file suffix
                  is unknown
                format: binary
                type: string
            '*/*':
              schema:
                description: 'Files with MIME type information image/png, image/gif,
                  ... '
                format: binary
                type: string
          description: Request successful. The image diagram of this process.
        "204":
          description: The process definition doesn't have an associated diagram.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
          description: |-
            Process definition with given id does not exist. See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
      summary: Get Diagram
      tags:
      - Process Definition
      x-accepts: application/json
  /process-definition/key/{key}/form-variables:
    get:
      description: "Retrieves the start form variables for the latest process definition\
        \ which belongs to no tenant\n(only if they are defined via the \n[Generated\
        \ Task Form](https://docs.camunda.org/manual/7.14/user-guide/task-forms/#generated-task-forms)\
        \ approach).\nThe start form variables take form data specified on the start\
        \ event into account.\nIf form fields are defined, the variable types and\
        \ default values\nof the form fields are taken into account."
      operationId: getStartFormVariablesByKey
      parameters:
      - description: The key of the process definition (the latest version thereof)
          to be retrieved.
        explode: false
        in: path
        name: key
        required: true
        schema:
          type: string
        style: simple
      - description: |-
          A comma-separated list of variable names. Allows restricting the list of requested
          variables to the variable names in the list. It is best practice to restrict the
          list of variables to the variables actually required by the form in order to
          minimize fetching of data. If the query parameter is ommitted all variables are
          fetched. If the query parameter contains non-existent variable names, the variable
          names are ignored.
        explode: true
        in: query
        name: variableNames
        required: false
        schema:
          type: string
        style: form
      - description: |-
          Determines whether serializable variable values (typically variables that store
          custom Java objects) should be deserialized on server side (default true).

          If set to true, a serializable variable will be deserialized on server side and
          transformed to JSON using [Jackson's](http://jackson.codehaus.org/) POJO/bean
          property introspection feature. Note that this requires the Java classes of the
          variable value to be on the REST API's classpath.

          If set to false, a serializable variable will be returned in its serialized format.
          For example, a variable that is serialized as XML will be returned as a JSON string
          containing XML.

          **Note**: While true is the default value for reasons of backward compatibility, we
          recommend setting this parameter to false when developing web applications that are
          independent of the Java process applications deployed to the engine.
        explode: true
        in: query
        name: deserializeValues
        required: false
        schema:
          default: true
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/json:
              examples:
                example-1:
                  description: GET `/task/anId/form-variables`
                  summary: Status 200 Response
                  value:
                    amount:
                      type: integer
                      value: 5
                      valueInfo: {}
                    firstName:
                      type: String
                      value: Jonny
                      valueInfo: {}
              schema:
                additionalProperties:
                  $ref: '#/components/schemas/VariableValueDto'
                type: object
          description: Request successful. A JSON object containing a property for
            each variable returned.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
          description: |-
            The key is null or does not exist. See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
      summary: Get Start Form Variables
      tags:
      - Process Definition
      x-accepts: application/json
  /process-definition/key/{key}/history-time-to-live:
    put:
      description: |-
        Updates history time to live for the latest version of the process definition which belongs to no tenant.
        The field is used within [History cleanup](https://docs.camunda.org/manual/7.14/user-guide/process-engine/history/#history-cleanup).
      operationId: updateHistoryTimeToLiveByProcessDefinitionKey
      parameters:
      - description: The key of the process definition to change history time to live.
        explode: false
        in: path
        name: key
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            examples:
              example-1:
                summary: PUT `/process-definition/key/aProcessDefinitionKey/history-time-to-live`
                value:
                  historyTimeToLive: 5
            schema:
              $ref: '#/components/schemas/HistoryTimeToLiveDto'
      responses:
        "204":
          description: Request successful.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
          description: |-
            Returned if some of the request parameters are invalid. See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
          description: |-
            Process definition with given id does not exist. See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
      summary: Update History Time to Live
      tags:
      - Process Definition
      x-contentType: application/json
      x-accepts: application/json
  /process-definition/key/{key}/rendered-form:
    get:
      description: |-
        Retrieves  the rendered form for the latest version of the process definition which belongs to no tenant.
        This method can be used to get the HTML rendering of a
        [Generated Task Form](https://docs.camunda.org/manual/7.14/user-guide/task-forms/#generated-task-forms).
      operationId: getRenderedStartFormByKey
      parameters:
      - description: The key of the process definition (the latest version thereof)
          to be retrieved.
        explode: false
        in: path
        name: key
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/xhtml+xml:
              examples:
                example-1:
                  description: |-
                    A `/process-definition/key/anKey/rendered-form` HTML
                                                           GET response body providing the rendered (generated) form content.
                  summary: Status 200 Response
                  value: |-
                    <form class="form-horizontal">
                                                      <div class="control-group">
                                                        <label class="control-label">Customer ID</label>
                                                        <div class="controls">
                                                          <input form-field type="string" name="customerId"></input>
                                                        </div>
                                                      </div>
                                                      <div class="control-group">
                                                        <label class="control-label">Amount</label>
                                                        <div class="controls">
                                                          <input form-field type="number" name="amount"></input>
                                                        </div>
                                                      </div>
                                                    </form>
              schema:
                description: For `application/xhtml+xml` Responses, a byte stream
                  is returned.
                format: binary
                type: string
          description: Request successful.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
          description: |-
            Process definition has no form field metadata defined. See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
          description: |-
            Process definition with given key does not exist.  See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
      summary: Get Rendered Start Form
      tags:
      - Process Definition
      x-accepts: application/json
  /process-definition/key/{key}/start:
    post:
      description: |-
        Instantiates a given process definition, starts the latest version of the process definition
        which belongs to no tenant.
        Process variables and business key may be supplied in the request body.
      operationId: startProcessInstanceByKey
      parameters:
      - description: The key of the process definition (the latest version thereof)
          to be retrieved.
        explode: false
        in: path
        name: key
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            examples:
              example-1:
                summary: Starting a process instance at its default initial activity
                value:
                  variables:
                    aVariable:
                      value: aStringValue
                      type: String
                    anotherVariable:
                      value: true
                      type: Boolean
                  businessKey: myBusinessKey
              example-2:
                summary: Starting a process instance with variables in return
                value:
                  variables:
                    aVariable:
                      value: aStringValue
                      type: String
                    anotherVariable:
                      value: true
                      type: Boolean
                  businessKey: myBusinessKey
                  withVariablesInReturn: true
              example-3:
                summary: Starting a process instance at two specific activities
                value:
                  variables:
                    aProcessVariable:
                      value: aStringValue
                      type: String
                  businessKey: myBusinessKey
                  skipCustomListeners: true
                  startInstructions:
                  - type: startBeforeActivity
                    activityId: activityId
                    variables:
                      var:
                        value: aVariableValue
                        local: false
                        type: String
                  - type: startAfterActivity
                    activityId: anotherActivityId
                    variables:
                      varLocal:
                        value: anotherVariableValue
                        local: true
                        type: String
            schema:
              $ref: '#/components/schemas/StartProcessInstanceDto'
      responses:
        "200":
          content:
            application/json:
              examples:
                example-1:
                  description: Response for starting a process instance at its default
                    initial activity
                  summary: Status 200 Response 1
                  value:
                    links:
                    - method: GET
                      href: http://localhost:8080/rest-test/process-instance/anId
                      rel: self
                    id: anId
                    definitionId: aProcessDefinitionId
                    businessKey: myBusinessKey
                    caseInstanceId: null
                    tenantId: null
                    ended: false
                    suspended: false
                example-2:
                  description: Response for starting a process instance with variables
                    in return
                  summary: Status 200 Response 2
                  value:
                    links:
                    - method: GET
                      href: http://localhost:8080/rest-test/process-instance/aProcInstId
                      rel: self
                    id: aProcInstId
                    definitionId: aProcessDefinitionId
                    businessKey: myBusinessKey
                    caseInstanceId: null
                    ended: false
                    suspended: false
                    tenantId: null
                    variables:
                      anotherVariable:
                        type: Boolean
                        value: true
                        valueInfo:
                          transient: true
                      aVariable:
                        type: String
                        value: aStringValue
                        valueInfo: {}
                example-3:
                  description: Response for starting a process instance at two specific
                    activities
                  summary: Status 200 Response 3
                  value:
                    links:
                    - method: GET
                      href: http://localhost:8080/rest-test/process-instance/anId
                      rel: self
                    id: anId
                    definitionId: aProcessDefinitionId
                    businessKey: myBusinessKey
                    caseInstanceId: null
                    tenantId: null
                    ended: false
                    suspended: false
              schema:
                $ref: '#/components/schemas/ProcessInstanceWithVariablesDto'
          description: Request successful.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
          description: |-
            The instance could not be created due to an invalid variable value,
            for example if the value could not be parsed to an `Integer` value or
            the passed variable type is not supported.
            See the [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
          description: |-
            The instance could not be created successfully.
            See the [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
      summary: Start Instance
      tags:
      - Process Definition
      x-contentType: application/json
      x-accepts: application/json
  /process-definition/key/{key}/startForm:
    get:
      description: |-
        Retrieves the key of the start form for the latest version of the process definition
        which belongs to no tenant.
        The form key corresponds to the `FormData#formKey` property in the engine.
      operationId: getStartFormByKey
      parameters:
      - description: The key of the process definition (the latest version thereof)
          for which the form key is to be retrieved.
        explode: false
        in: path
        name: key
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              examples:
                example-1:
                  description: GET `process-definition/key/aKey/startForm`
                  summary: Status 200 Response
                  value:
                    key: aFormKey
                    contextPath: http://localhost:8080/my-process-application/
              schema:
                $ref: '#/components/schemas/FormDto'
          description: Request successful.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
          description: |-
            Process definition has no start form defined. See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
          description: |-
            Process definition with given key does not exist. See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
      summary: Get Start Form Key
      tags:
      - Process Definition
      x-accepts: application/json
  /process-definition/key/{key}/statistics:
    get:
      description: |-
        Retrieves runtime statistics of the latest version of the given process definition
        which belongs to no tenant, grouped by activities.
        These statistics include the number of running activity instances, optionally the number of failed jobs
        and also optionally the number of incidents either grouped by incident types or
        for a specific incident type.
        **Note**: This does not include historic data.
      operationId: getActivityStatisticsByProcessDefinitionKey
      parameters:
      - description: The key of the process definition (the latest version thereof)
          to be retrieved.
        explode: false
        in: path
        name: key
        required: true
        schema:
          type: string
        style: simple
      - description: Whether to include the number of failed jobs in the result or
          not. Valid values are `true` or `false`.
        explode: true
        in: query
        name: failedJobs
        required: false
        schema:
          type: boolean
        style: form
      - description: |-
          Valid values for this property are `true` or `false`.
          If this property has been set to `true` the result will include the corresponding number of incidents
          for each occurred incident type.
          If it is set to `false`, the incidents will not be included in the result.
          Cannot be used in combination with `incidentsForType`.
        explode: true
        in: query
        name: incidents
        required: false
        schema:
          type: boolean
        style: form
      - description: |-
          If this property has been set with any incident type (i.e., a string value) the result
          will only include the number of incidents for the assigned incident type.
          Cannot be used in combination with `incidents`.
          See the [User Guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/incidents/#incident-types)
          for a list of incident types.
        explode: true
        in: query
        name: incidentsForType
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              examples:
                example-1:
                  description: Request with Query Parameter `failedJobs=true`
                  summary: GET /process-definition/key/aProcessDefinitionKey/statistics?failedJobs=true
                  value:
                  - id: anActivity
                    instances: 123
                    failedJobs: 42
                    incidents: []
                  - id: anotherActivity
                    instances: 124
                    failedJobs: 43
                    incidents: []
                example-2:
                  description: Request with Query Parameter `incidents=true`
                  summary: GET /process-definition/key/aProcessDefinitionKey/statistics?incidents=true
                  value:
                  - id: anActivity
                    instances: 123
                    failedJobs: 0
                    incidents:
                    - incidentType: failedJob
                      incidentCount: 42
                    - incidentType: anIncident
                      incidentCount: 20
                  - id: anotherActivity
                    instances: 124
                    failedJobs: 0
                    incidents:
                    - incidentType: failedJob
                      incidentCount: 43
                    - incidentType: anIncident
                      incidentCount: 22
                    - incidentType: anotherIncident
                      incidentCount: 15
                example-3:
                  description: Request with Query Parameter `incidentsForType=anIncident`
                  summary: GET /process-definition/key/aProcessDefinitionKey/statistics?incidentsForType=anIncident
                  value:
                  - id: anActivity
                    instances: 123
                    failedJobs: 0
                    incidents:
                    - incidentType: anIncident
                      incidentCount: 20
              schema:
                items:
                  $ref: '#/components/schemas/ActivityStatisticsResultDto'
                type: array
          description: Request successful.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
          description: |-
            Returned if some of the query parameters are invalid.
            See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
          description: |-
            Process definition with given key does not exist.
            See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
      summary: Get Activity Instance Statistics
      tags:
      - Process Definition
      x-accepts: application/json
  /process-definition/key/{key}/submit-form:
    post:
      description: |-
        Starts the latest version of the process definition which belongs to no tenant
        using a set of process variables and the business key.
        If the start event has Form Field Metadata defined, the process engine will perform backend validation
        for any form fields which have validators defined.
        See [Documentation on Generated Task Forms](https://docs.camunda.org/manual/7.14/user-guide/task-forms/#generated-task-forms).
      operationId: submitFormByKey
      parameters:
      - description: The key of the process definition to submit the form for.
        explode: false
        in: path
        name: key
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            examples:
              example-1:
                summary: POST `/process-definition/key/aProcessDefinitionKey/submit-form`
                value:
                  variables:
                    aVariable:
                      value: aStringValue
                      type: String
                    anotherVariable:
                      value: true
                      type: Boolean
                  businessKey: myBusinessKey
            schema:
              $ref: '#/components/schemas/StartProcessInstanceFormDto'
      responses:
        "200":
          content:
            application/json:
              examples:
                example-1:
                  description: POST `/process-definition/key/aProcessDefinitionKey/submit-form`
                  summary: Status 200 Response 1
                  value:
                    links:
                    - method: GET
                      href: http://localhost:8080/rest-test/process-instance/anId
                      rel: self
                    id: anId
                    definitionId: aProcessDefinitionId
                    businessKey: myBusinessKey
                    caseInstanceId: null
                    tenantId: null
                    ended: false
                    suspended: false
              schema:
                $ref: '#/components/schemas/ProcessInstanceDto'
          description: Request successful.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
          description: |-
            The instance could not be created due to an invalid variable value,
            for example if the value could not be parsed to an `Integer` value or
            the passed variable type is not supported.
            See the [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
          description: |-
            Process definition with given key does not exist.
            See the [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
          description: |-
            The instance could not be created successfully.
            See the [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
      summary: Submit Start Form
      tags:
      - Process Definition
      x-contentType: application/json
      x-accepts: application/json
  /process-definition/key/{key}/suspended:
    put:
      description: |-
        Activates or suspends a given process definition by latest version of process definition key
        which belongs to no tenant.
      operationId: updateProcessDefinitionSuspensionStateByKey
      parameters:
      - description: The key of the process definition (the latest version thereof)
          to be activated/suspended.
        explode: false
        in: path
        name: key
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            examples:
              example-1:
                summary: PUT `/process-definition/key/aProcessDefinitionKey/suspended`
                value:
                  suspended: true
                  includeProcessInstances: true
                  executionDate: 2013-11-21T10:49:45T14:42:45
            schema:
              $ref: '#/components/schemas/ProcessDefinitionSuspensionStateDto'
        description: '**Note**: Unallowed properties are `processDefinitionId` and
          `processDefinitionKey`.'
      responses:
        "204":
          description: Request successful.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
          description: |-
            Returned if some of the query parameters are invalid,
            for example if the provided `executionDate` parameter doesn't have the expected format or
            if the `processDefinitionKey` parameter is `null`. See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
          description: |-
            Process definition with given key does not exist. See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
      summary: Activate/Suspend by Id
      tags:
      - Process Definition
      x-contentType: application/json
      x-accepts: application/json
  /process-definition/key/{key}/tenant-id/{tenant-id}:
    delete:
      description: Deletes process definitions by a given key and which belong to
        a tenant id.
      operationId: deleteProcessDefinitionsByKeyAndTenantId
      parameters:
      - description: The key of the process definitions to be deleted.
        explode: false
        in: path
        name: key
        required: true
        schema:
          type: string
        style: simple
      - description: The id of the tenant the process definitions belong to.
        explode: false
        in: path
        name: tenant-id
        required: true
        schema:
          type: string
        style: simple
      - description: |-
          `true`, if all process instances, historic process instances and jobs
          for this process definition should be deleted.
        explode: true
        in: query
        name: cascade
        required: false
        schema:
          type: boolean
        style: form
      - description: '`true`, if only the built-in ExecutionListeners should be notified
          with the end event.'
        explode: true
        in: query
        name: skipCustomListeners
        required: false
        schema:
          default: false
          type: boolean
        style: form
      - description: |-
          A boolean value to control whether input/output mappings should be executed during deletion.
          `true`, if input/output mappings should not be invoked.
        explode: true
        in: query
        name: skipIoMappings
        required: false
        schema:
          default: false
          type: boolean
        style: form
      responses:
        "204":
          description: Request successful.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthorizationExceptionDto'
          description: |-
            Forbidden
            The process definitions with the given `key` cannot be deleted due to missing permissions.
            See the [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
          description: |-
            Not found
            Process definition with given key does not exist. See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
      summary: Delete By Key
      tags:
      - Process Definition
      x-accepts: application/json
    get:
      description: |-
        Retrieves the latest version of the process definition for tenant according to
        the `ProcessDefinition` interface in the engine.
      operationId: getLatestProcessDefinitionByTenantId
      parameters:
      - description: The key of the process definition (the latest version thereof)
          to be retrieved.
        explode: false
        in: path
        name: key
        required: true
        schema:
          type: string
        style: simple
      - description: The id of the tenant the process definition belongs to.
        explode: false
        in: path
        name: tenant-id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              examples:
                example-1:
                  description: Response of GET `/process-definition/key/invoice/tenant-id/tenantOne`
                  summary: Status 200 response
                  value:
                    id: invoice:1:c3a63aaa-2046-11e7-8f94-34f39ab71d4e
                    key: invoice
                    category: http://www.omg.org/spec/BPMN/20100524/MODEL
                    description: null
                    name: Invoice Receipt
                    version: 1
                    resource: invoice.v1.bpmn
                    deploymentId: c398cd26-2046-11e7-8f94-34f39ab71d4e
                    diagram: null
                    suspended: false
                    tenantId: tenantOne
                    versionTag: null
                    historyTimeToLive: 5
                    startableInTasklist: true
              schema:
                $ref: '#/components/schemas/ProcessDefinitionDto'
          description: Request successful.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
          description: |-
            Process definition with given `key` does not exist. See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
      summary: Get
      tags:
      - Process Definition
      x-accepts: application/json
  /process-definition/key/{key}/tenant-id/{tenant-id}/deployed-start-form:
    get:
      description: |-
        Retrieves the deployed form that can be referenced from a start event.
        For further information please refer to [User Guide](https://docs.camunda.org/manual/7.14/user-guide/task-forms/#embedded-task-forms).
      operationId: getDeployedStartFormByKeyAndTenantId
      parameters:
      - description: The key of the process definition (the latest version thereof)
          to be retrieved.
        explode: false
        in: path
        name: key
        required: true
        schema:
          type: string
        style: simple
      - description: The id of the tenant the process definitions belong to.
        explode: false
        in: path
        name: tenant-id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/xhtml+xml:
              examples:
                example-1:
                  description: |-
                    Resonse for GET
                                                           `/process-definition/key/processDefinitionKey/tenant-id/tenantId/deployed-start-form`
                  summary: Status 200 Response
                  value: |-
                    <form role="form" name="invoiceForm"
                                                          class="form-horizontal">

                                                      <div class="form-group">
                                                        <label class="control-label col-md-4"
                                                               for="creditor">Creditor</label>
                                                        <div class="col-md-8">
                                                          <input cam-variable-name="creditor"
                                                                 cam-variable-type="String"
                                                                 id="creditor"
                                                                 class="form-control"
                                                                 type="text"
                                                                 required />
                                                          <div class="help">
                                                            (e.g. &quot;Great Pizza for Everyone Inc.&quot;)
                                                          </div>
                                                        </div>
                                                      </div>

                                                    </form>
              schema:
                description: For `application/xhtml+xml` Responses, a byte stream
                  is returned.
                format: binary
                type: string
          description: Request successful.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
          description: |-
            The form key has wrong format.  See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthorizationExceptionDto'
          description: |-
            The deployed start form cannot be retrieved due to missing permissions on process definition resource.
            See the [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
          description: |-
            No deployed start form for a given process definition exists. See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
      summary: Get Deployed Start Form
      tags:
      - Process Definition
      x-accepts: application/json
  /process-definition/key/{key}/tenant-id/{tenant-id}/diagram:
    get:
      description: |-
        Retrieves the diagram for the latest version of the process definition for tenant.

        If the process definition's deployment contains an image resource with the same file name
        as the process definition, the deployed image will be returned by the Get Diagram endpoint.
        Example: `someProcess.bpmn` and `someProcess.png`.
        Supported file extentions for the image are: `svg`, `png`, `jpg`, and `gif`.
      operationId: getProcessDefinitionDiagramByKeyAndTenantId
      parameters:
      - description: The key of the process definition.
        explode: false
        in: path
        name: key
        required: true
        schema:
          type: string
        style: simple
      - description: The id of the tenant the process definition belongs to.
        explode: false
        in: path
        name: tenant-id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/octet-stream:
              schema:
                description: defaults to `application/octet-stream` if the file suffix
                  is unknown
                format: binary
                type: string
            '*/*':
              schema:
                description: 'Files with MIME type information image/png, image/gif,
                  ... '
                format: binary
                type: string
          description: Request successful. The image diagram of this process.
        "204":
          description: The process definition doesn't have an associated diagram.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
          description: |-
            Process definition with given id does not exist. See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
      summary: Get Diagram
      tags:
      - Process Definition
      x-accepts: application/json
  /process-definition/key/{key}/tenant-id/{tenant-id}/form-variables:
    get:
      description: "Retrieves the start form variables for the latest process definition\
        \ for a tenant\n(only if they are defined via the \n[Generated Task Form](https://docs.camunda.org/manual/7.14/user-guide/task-forms/#generated-task-forms)\
        \ approach).\nThe start form variables take form data specified on the start\
        \ event into account.\nIf form fields are defined, the variable types and\
        \ default values\nof the form fields are taken into account."
      operationId: getStartFormVariablesByKeyAndTenantId
      parameters:
      - description: The key of the process definition (the latest version thereof)
          to be retrieved.
        explode: false
        in: path
        name: key
        required: true
        schema:
          type: string
        style: simple
      - description: The id of the tenant the process definition belongs to.
        explode: false
        in: path
        name: tenant-id
        required: true
        schema:
          type: string
        style: simple
      - description: |-
          A comma-separated list of variable names. Allows restricting the list of requested
          variables to the variable names in the list. It is best practice to restrict the
          list of variables to the variables actually required by the form in order to
          minimize fetching of data. If the query parameter is ommitted all variables are
          fetched. If the query parameter contains non-existent variable names, the variable
          names are ignored.
        explode: true
        in: query
        name: variableNames
        required: false
        schema:
          type: string
        style: form
      - description: |-
          Determines whether serializable variable values (typically variables that store
          custom Java objects) should be deserialized on server side (default true).

          If set to true, a serializable variable will be deserialized on server side and
          transformed to JSON using [Jackson's](http://jackson.codehaus.org/) POJO/bean
          property introspection feature. Note that this requires the Java classes of the
          variable value to be on the REST API's classpath.

          If set to false, a serializable variable will be returned in its serialized format.
          For example, a variable that is serialized as XML will be returned as a JSON string
          containing XML.

          **Note**: While true is the default value for reasons of backward compatibility, we
          recommend setting this parameter to false when developing web applications that are
          independent of the Java process applications deployed to the engine.
        explode: true
        in: query
        name: deserializeValues
        required: false
        schema:
          default: true
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/json:
              examples:
                example-1:
                  description: GET `/task/anId/form-variables`
                  summary: Status 200 Response
                  value:
                    amount:
                      type: integer
                      value: 5
                      valueInfo: {}
                    firstName:
                      type: String
                      value: Jonny
                      valueInfo: {}
              schema:
                additionalProperties:
                  $ref: '#/components/schemas/VariableValueDto'
                type: object
          description: Request successful. A JSON object containing a property for
            each variable returned.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
          description: |-
            The key is null or does not exist. See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
      summary: Get Start Form Variables
      tags:
      - Process Definition
      x-accepts: application/json
  /process-definition/key/{key}/tenant-id/{tenant-id}/history-time-to-live:
    put:
      description: |-
        Updates history time to live for the latest version of the process definition for a tenant.
        The field is used within [History cleanup](https://docs.camunda.org/manual/7.14/user-guide/process-engine/history/#history-cleanup).
      operationId: updateHistoryTimeToLiveByProcessDefinitionKeyAndTenantId
      parameters:
      - description: The key of the process definition to change history time to live.
        explode: false
        in: path
        name: key
        required: true
        schema:
          type: string
        style: simple
      - description: The id of the tenant the process definition belongs to.
        explode: false
        in: path
        name: tenant-id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            examples:
              example-1:
                summary: PUT `/process-definition/key/aProcessDefinitionKey/tenant-id/aTenantId/history-time-to-live`
                value:
                  historyTimeToLive: 5
            schema:
              $ref: '#/components/schemas/HistoryTimeToLiveDto'
      responses:
        "204":
          description: Request successful.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
          description: |-
            Returned if some of the request parameters are invalid. See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
          description: |-
            Process definition with given id does not exist. See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
      summary: Update History Time to Live
      tags:
      - Process Definition
      x-contentType: application/json
      x-accepts: application/json
  /process-definition/key/{key}/tenant-id/{tenant-id}/rendered-form:
    get:
      description: |-
        Retrieves  the rendered form for the latest version of the process definition for a tenant.
        This method can be used to get the HTML rendering of a
        [Generated Task Form](https://docs.camunda.org/manual/7.14/user-guide/task-forms/#generated-task-forms).
      operationId: getRenderedStartFormByKeyAndTenantId
      parameters:
      - description: The key of the process definition (the latest version thereof)
          to be retrieved.
        explode: false
        in: path
        name: key
        required: true
        schema:
          type: string
        style: simple
      - description: The id of the tenant the process definition belongs to.
        explode: false
        in: path
        name: tenant-id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/xhtml+xml:
              examples:
                example-1:
                  description: |-
                    A `/process-definition/key/anKey/tenand-id/aTenantId/rendered-form` HTML
                                                           GET response body providing the rendered (generated) form content.
                  summary: Status 200 Response
                  value: |-
                    <form class="form-horizontal">
                                                      <div class="control-group">
                                                        <label class="control-label">Customer ID</label>
                                                        <div class="controls">
                                                          <input form-field type="string" name="customerId"></input>
                                                        </div>
                                                      </div>
                                                      <div class="control-group">
                                                        <label class="control-label">Amount</label>
                                                        <div class="controls">
                                                          <input form-field type="number" name="amount"></input>
                                                        </div>
                                                      </div>
                                                    </form>
              schema:
                description: For `application/xhtml+xml` Responses, a byte stream
                  is returned.
                format: binary
                type: string
          description: Request successful.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
          description: |-
            Process definition has no form field metadata defined. See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
          description: |-
            Process definition with given key does not exist.  See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
      summary: Get Rendered Start Form
      tags:
      - Process Definition
      x-accepts: application/json
  /process-definition/key/{key}/tenant-id/{tenant-id}/start:
    post:
      description: |-
        Instantiates a given process definition, starts the latest version of the process definition for tenant.
        Process variables and business key may be supplied in the request body.
      operationId: startProcessInstanceByKeyAndTenantId
      parameters:
      - description: The key of the process definition (the latest version thereof)
          to be retrieved.
        explode: false
        in: path
        name: key
        required: true
        schema:
          type: string
        style: simple
      - description: The id of the tenant the process definition belongs to.
        explode: false
        in: path
        name: tenant-id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            examples:
              example-1:
                summary: Starting a process instance at its default initial activity
                value:
                  variables:
                    aVariable:
                      value: aStringValue
                      type: String
                    anotherVariable:
                      value: true
                      type: Boolean
                  businessKey: myBusinessKey
              example-2:
                summary: Starting a process instance with variables in return
                value:
                  variables:
                    aVariable:
                      value: aStringValue
                      type: String
                    anotherVariable:
                      value: true
                      type: Boolean
                  businessKey: myBusinessKey
                  withVariablesInReturn: true
              example-3:
                summary: Starting a process instance at two specific activities
                value:
                  variables:
                    aProcessVariable:
                      value: aStringValue
                      type: String
                  businessKey: myBusinessKey
                  skipCustomListeners: true
                  startInstructions:
                  - type: startBeforeActivity
                    activityId: activityId
                    variables:
                      var:
                        value: aVariableValue
                        local: false
                        type: String
                  - type: startAfterActivity
                    activityId: anotherActivityId
                    variables:
                      varLocal:
                        value: anotherVariableValue
                        local: true
                        type: String
            schema:
              $ref: '#/components/schemas/StartProcessInstanceDto'
      responses:
        "200":
          content:
            application/json:
              examples:
                example-1:
                  description: Response for starting a process instance at its default
                    initial activity
                  summary: Status 200 Response 1
                  value:
                    links:
                    - method: GET
                      href: http://localhost:8080/rest-test/process-instance/anId
                      rel: self
                    id: anId
                    definitionId: aProcessDefinitionId
                    businessKey: myBusinessKey
                    caseInstanceId: null
                    tenantId: null
                    ended: false
                    suspended: false
                example-2:
                  description: Response for starting a process instance with variables
                    in return
                  summary: Status 200 Response 2
                  value:
                    links:
                    - method: GET
                      href: http://localhost:8080/rest-test/process-instance/aProcInstId
                      rel: self
                    id: aProcInstId
                    definitionId: aProcessDefinitionId
                    businessKey: myBusinessKey
                    caseInstanceId: null
                    ended: false
                    suspended: false
                    tenantId: null
                    variables:
                      anotherVariable:
                        type: Boolean
                        value: true
                        valueInfo:
                          transient: true
                      aVariable:
                        type: String
                        value: aStringValue
                        valueInfo: {}
                example-3:
                  description: Response for starting a process instance at two specific
                    activities
                  summary: Status 200 Response 3
                  value:
                    links:
                    - method: GET
                      href: http://localhost:8080/rest-test/process-instance/anId
                      rel: self
                    id: anId
                    definitionId: aProcessDefinitionId
                    businessKey: myBusinessKey
                    caseInstanceId: null
                    tenantId: null
                    ended: false
                    suspended: false
              schema:
                $ref: '#/components/schemas/ProcessInstanceWithVariablesDto'
          description: Request successful.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
          description: |-
            The instance could not be created due to an invalid variable value,
            for example if the value could not be parsed to an `Integer` value or
            the passed variable type is not supported.
            See the [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
          description: |-
            The instance could not be created successfully.
            See the [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
      summary: Start Instance
      tags:
      - Process Definition
      x-contentType: application/json
      x-accepts: application/json
  /process-definition/key/{key}/tenant-id/{tenant-id}/startForm:
    get:
      description: |-
        Retrieves the key of the start form for the latest version of the process definition for a tenant.
        The form key corresponds to the `FormData#formKey` property in the engine.
      operationId: getStartFormByKeyAndTenantId
      parameters:
      - description: The key of the process definition (the latest version thereof)
          for which the form key is to be retrieved.
        explode: false
        in: path
        name: key
        required: true
        schema:
          type: string
        style: simple
      - description: The id of the tenant the process definition belongs to.
        explode: false
        in: path
        name: tenant-id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              examples:
                example-1:
                  description: GET `process-definition/key/aKey/tenant-id/aTenantId/startForm`
                  summary: Status 200 Response
                  value:
                    key: aFormKey
                    contextPath: http://localhost:8080/my-process-application/
              schema:
                $ref: '#/components/schemas/FormDto'
          description: Request successful.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
          description: |-
            Process definition has no start form defined. See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
          description: |-
            Process definition with given key does not exist. See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
      summary: Get Start Form Key
      tags:
      - Process Definition
      x-accepts: application/json
  /process-definition/key/{key}/tenant-id/{tenant-id}/statistics:
    get:
      description: |-
        Retrieves runtime statistics of the latest version of the given process definition for a tenant,
        grouped by activities.
        These statistics include the number of running activity instances, optionally the number of failed jobs
        and also optionally the number of incidents either grouped by incident types or
        for a specific incident type.
        **Note**: This does not include historic data.
      operationId: getActivityStatisticsByProcessDefinitionKeyAndTenantId
      parameters:
      - description: The key of the process definition (the latest version thereof)
          to be retrieved.
        explode: false
        in: path
        name: key
        required: true
        schema:
          type: string
        style: simple
      - description: The id of the tenant the process definition belongs to.
        explode: false
        in: path
        name: tenant-id
        required: true
        schema:
          type: string
        style: simple
      - description: Whether to include the number of failed jobs in the result or
          not. Valid values are `true` or `false`.
        explode: true
        in: query
        name: failedJobs
        required: false
        schema:
          type: boolean
        style: form
      - description: |-
          Valid values for this property are `true` or `false`.
          If this property has been set to `true` the result will include the corresponding number of incidents
          for each occurred incident type.
          If it is set to `false`, the incidents will not be included in the result.
          Cannot be used in combination with `incidentsForType`.
        explode: true
        in: query
        name: incidents
        required: false
        schema:
          type: boolean
        style: form
      - description: |-
          If this property has been set with any incident type (i.e., a string value) the result
          will only include the number of incidents for the assigned incident type.
          Cannot be used in combination with `incidents`.
          See the [User Guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/incidents/#incident-types)
          for a list of incident types.
        explode: true
        in: query
        name: incidentsForType
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              examples:
                example-1:
                  description: Request with Query Parameter `failedJobs=true`
                  summary: GET /process-definition/key/aProcessDefinitionKey/tenant-id/aTenantId/statistics?failedJobs=true
                  value:
                  - id: anActivity
                    instances: 123
                    failedJobs: 42
                    incidents: []
                  - id: anotherActivity
                    instances: 124
                    failedJobs: 43
                    incidents: []
                example-2:
                  description: Request with Query Parameter `incidents=true`
                  summary: GET /process-definition/key/aProcessDefinitionKey/tenant-id/aTenantId/statistics?incidents=true
                  value:
                  - id: anActivity
                    instances: 123
                    failedJobs: 0
                    incidents:
                    - incidentType: failedJob
                      incidentCount: 42
                    - incidentType: anIncident
                      incidentCount: 20
                  - id: anotherActivity
                    instances: 124
                    failedJobs: 0
                    incidents:
                    - incidentType: failedJob
                      incidentCount: 43
                    - incidentType: anIncident
                      incidentCount: 22
                    - incidentType: anotherIncident
                      incidentCount: 15
                example-3:
                  description: Request with Query Parameter `incidentsForType=anIncident`
                  summary: GET /process-definition/key/aProcessDefinitionKey/tenant-id/aTenantId/statistics?incidentsForType=anIncident
                  value:
                  - id: anActivity
                    instances: 123
                    failedJobs: 0
                    incidents:
                    - incidentType: anIncident
                      incidentCount: 20
              schema:
                items:
                  $ref: '#/components/schemas/ActivityStatisticsResultDto'
                type: array
          description: Request successful.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
          description: |-
            Returned if some of the query parameters are invalid.
            See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
          description: |-
            Process definition with given key does not exist.
            See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
      summary: Get Activity Instance Statistics
      tags:
      - Process Definition
      x-accepts: application/json
  /process-definition/key/{key}/tenant-id/{tenant-id}/submit-form:
    post:
      description: |-
        Starts the latest version of the process definition for a tenant
        using a set of process variables and the business key.
        If the start event has Form Field Metadata defined, the process engine will perform backend validation
        for any form fields which have validators defined.
        See [Documentation on Generated Task Forms](https://docs.camunda.org/manual/7.14/user-guide/task-forms/#generated-task-forms).
      operationId: submitFormByKeyAndTenantId
      parameters:
      - description: The key of the process definition to submit the form for.
        explode: false
        in: path
        name: key
        required: true
        schema:
          type: string
        style: simple
      - description: The id of the tenant the process definition belongs to.
        explode: false
        in: path
        name: tenant-id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            examples:
              example-1:
                summary: POST `/process-definition/key/aProcessDefinitionKey/tenant-id/aTenantId/submit-form`
                value:
                  variables:
                    aVariable:
                      value: aStringValue
                      type: String
                    anotherVariable:
                      value: true
                      type: Boolean
                  businessKey: myBusinessKey
            schema:
              $ref: '#/components/schemas/StartProcessInstanceFormDto'
      responses:
        "200":
          content:
            application/json:
              examples:
                example-1:
                  description: POST `/process-definition/key/aProcessDefinitionKey/tenant-id/aTenantId/submit-form`
                  summary: Status 200 Response 1
                  value:
                    links:
                    - method: GET
                      href: http://localhost:8080/rest-test/process-instance/anId
                      rel: self
                    id: anId
                    definitionId: aProcessDefinitionId
                    businessKey: myBusinessKey
                    caseInstanceId: null
                    tenantId: null
                    ended: false
                    suspended: false
              schema:
                $ref: '#/components/schemas/ProcessInstanceDto'
          description: Request successful.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
          description: |-
            The instance could not be created due to an invalid variable value,
            for example if the value could not be parsed to an `Integer` value or
            the passed variable type is not supported.
            See the [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
          description: |-
            Process definition with given key does not exist.
            See the [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
          description: |-
            The instance could not be created successfully.
            See the [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
      summary: Submit Start Form
      tags:
      - Process Definition
      x-contentType: application/json
      x-accepts: application/json
  /process-definition/key/{key}/tenant-id/{tenant-id}/suspended:
    put:
      description: |-
        Activates or suspends a given process definition by the latest version of
        the process definition for tenant.
      operationId: updateProcessDefinitionSuspensionStateByKeyAndTenantId
      parameters:
      - description: The key of the process definition (the latest version thereof)
          to be activated/suspended.
        explode: false
        in: path
        name: key
        required: true
        schema:
          type: string
        style: simple
      - description: The id of the tenant the process definition belongs to.
        explode: false
        in: path
        name: tenant-id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            examples:
              example-1:
                summary: PUT `/process-definition/key/aProcessDefinitionKey/tenant-id/aTenantId/suspended`
                value:
                  suspended: true
                  includeProcessInstances: true
                  executionDate: 2013-11-21T10:49:45T14:42:45
            schema:
              $ref: '#/components/schemas/ProcessDefinitionSuspensionStateDto'
        description: '**Note**: Unallowed properties are `processDefinitionId` and
          `processDefinitionKey`.'
      responses:
        "204":
          description: Request successful.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
          description: |-
            Returned if some of the query parameters are invalid,
            for example if the provided `executionDate` parameter doesn't have the expected format or
            if the `processDefinitionKey` parameter is `null`. See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
          description: |-
            Process definition with given key does not exist. See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
      summary: Activate/Suspend by Id
      tags:
      - Process Definition
      x-contentType: application/json
      x-accepts: application/json
  /process-definition/key/{key}/tenant-id/{tenant-id}/xml:
    get:
      description: |-
        Retrieves latest version the BPMN 2.0 XML of a process definition.
        Returns the XML for the latest version of the process definition for tenant.
      operationId: getProcessDefinitionBpmn20XmlByKeyAndTenantId
      parameters:
      - description: The key of the process definition (the latest version thereof)
          whose XML should be retrieved.
        explode: false
        in: path
        name: key
        required: true
        schema:
          type: string
        style: simple
      - description: The id of the tenant the process definition belongs to.
        explode: false
        in: path
        name: tenant-id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              examples:
                example-1:
                  summary: GET `/process-definition/key/aProcessDefinitionKey/tenant-id/aTenantId/xml`
                  value:
                    id: anProcessDefinitionId
                    bpmn20Xml: |-
                      <?xml version="1.0" encoding="UTF-8"?>
                      <definitions
                                               xmlns="http://www.omg.org/spec/BPMN/20100524/MODEL"
                                               xmlns:camunda="http://camunda.org/schema/1.0/bpmn"
                                               targetNamespace="Examples">
                                               <process id="oneTaskProcess" isExecutable="true">
                                                 <startEvent id="theStart" />
                                                 <sequenceFlow id="flow1" sourceRef="theStart" targetRef="theEnd" />
                                                 <endEvent id="theEnd" />
                                               </process>
                                             </definitions>
              schema:
                $ref: '#/components/schemas/ProcessDefinitionDiagramDto'
          description: Request successful.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthorizationExceptionDto'
          description: |-
            The Process Definition xml cannot be retrieved due to missing permissions on the Process Definition resource.
            See the [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
          description: |-
            Process definition with given id does not exist. See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
      summary: Get XML
      tags:
      - Process Definition
      x-accepts: application/json
  /process-definition/key/{key}/xml:
    get:
      description: Retrieves latest version the BPMN 2.0 XML of a process definition.
      operationId: getProcessDefinitionBpmn20XmlByKey
      parameters:
      - description: The key of the process definition (the latest version thereof)
          whose XML should be retrieved.
        explode: false
        in: path
        name: key
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              examples:
                example-1:
                  summary: GET `/process-definition/key/aProcessDefinitionKey/xml`
                  value:
                    id: anProcessDefinitionId
                    bpmn20Xml: |-
                      <?xml version="1.0" encoding="UTF-8"?>
                      <definitions
                                               xmlns="http://www.omg.org/spec/BPMN/20100524/MODEL"
                                               xmlns:camunda="http://camunda.org/schema/1.0/bpmn"
                                               targetNamespace="Examples">
                                               <process id="oneTaskProcess" isExecutable="true">
                                                 <startEvent id="theStart" />
                                                 <sequenceFlow id="flow1" sourceRef="theStart" targetRef="theEnd" />
                                                 <endEvent id="theEnd" />
                                               </process>
                                             </definitions>
              schema:
                $ref: '#/components/schemas/ProcessDefinitionDiagramDto'
          description: Request successful.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthorizationExceptionDto'
          description: |-
            The Process Definition xml cannot be retrieved due to missing permissions on the Process Definition resource.
            See the [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
          description: |-
            Process definition with given id does not exist. See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
      summary: Get XML
      tags:
      - Process Definition
      x-accepts: application/json
  /process-definition/statistics:
    get:
      description: |-
        Retrieves runtime statistics of the process engine, grouped by process definitions.
        These statistics include the number of running process instances, optionally the number of failed jobs
        and also optionally the number of incidents either grouped by incident types or
        for a specific incident type.
        **Note**: This does not include historic data.
      operationId: getProcessDefinitionStatistics
      parameters:
      - description: Whether to include the number of failed jobs in the result or
          not. Valid values are `true` or `false`.
        explode: true
        in: query
        name: failedJobs
        required: false
        schema:
          type: boolean
        style: form
      - description: |-
          Valid values for this property are `true` or `false`.
          If this property has been set to `true` the result will include the corresponding number of incidents
          for each occurred incident type.
          If it is set to `false`, the incidents will not be included in the result.
          Cannot be used in combination with `incidentsForType`.
        explode: true
        in: query
        name: incidents
        required: false
        schema:
          type: boolean
        style: form
      - description: |-
          If this property has been set with any incident type (i.e., a string value) the result
          will only include the number of incidents for the assigned incident type.
          Cannot be used in combination with `incidents`.
          See the [User Guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/incidents/#incident-types)
          for a list of incident types.
        explode: true
        in: query
        name: incidentsForType
        required: false
        schema:
          type: string
        style: form
      - description: |-
          Valid values for this property are `true` or `false`.
          If this property has been set to `true` the result will include the corresponding number of
          root incidents for each occurred incident type.
          If it is set to `false`, the incidents will not be included in the result.
          Cannot be used in combination with `incidentsForType` or `incidents`.
        explode: true
        in: query
        name: rootIncidents
        required: false
        schema:
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/json:
              examples:
                example-1:
                  description: Request with Query Parameter `failedJobs=true`
                  summary: GET /process-definition/statistics?failedJobs=true
                  value:
                  - id: aProcessDefinitionId
                    instances: 123
                    failedJobs: 42
                    definition:
                      id: aProcessDefinitionId
                      key: aKey
                      category: null
                      description: null
                      name: aName
                      version: 0
                      resource: null
                      deploymentId: null
                      diagram: null
                      suspended: false
                      tenantId: null
                      versionTag: 1.0.0
                      historyTimeToLive: null
                      startableInTasklist: false
                    incidents: []
                  - id: aProcessDefinitionId:2
                    instances: 124
                    failedJobs: 43
                    definition:
                      id: aProcessDefinitionId:2
                      key: aKey
                      category: null
                      description: null
                      name: aName
                      version: 0
                      resource: null
                      deploymentId: null
                      diagram: null
                      suspended: false
                      tenantId: null
                      versionTag: null
                      historyTimeToLive: null
                      startableInTasklist: false
                    incidents: []
                example-2:
                  description: Request with Query Parameter `incidents=true`
                  summary: GET /process-definition/statistics?incidents=true
                  value:
                  - id: aProcessDefinitionId
                    instances: 123
                    failedJobs: 0
                    definition:
                      id: aProcessDefinitionId
                      key: aKey
                      category: null
                      description: null
                      name: aName
                      version: 0
                      resource: null
                      deploymentId: null
                      diagram: null
                      suspended: false
                      tenantId: null
                      versionTag: 1.0.0
                      historyTimeToLive: null
                      startableInTasklist: false
                    incidents:
                    - incidentType: failedJob
                      incidentCount: 42
                    - incidentType: anIncident
                      incidentCount: 20
                  - id: aProcessDefinitionId:2
                    instances: 124
                    failedJobs: 0
                    definition:
                      id: aProcessDefinitionId:2
                      key: aKey
                      category: null
                      description: null
                      name: aName
                      version: 0
                      resource: null
                      deploymentId: null
                      diagram: null
                      suspended: false
                      tenantId: null
                      versionTag: null
                      historyTimeToLive: null
                      startableInTasklist: false
                    incidents:
                    - incidentType: failedJob
                      incidentCount: 43
                    - incidentType: anIncident
                      incidentCount: 22
                    - incidentType: anotherIncident
                      incidentCount: 15
                example-3:
                  description: Request with Query Parameter `incidentsForType=anIncident`
                  summary: GET /process-definition/statistics?incidentsForType=anIncident
                  value:
                  - id: aProcessDefinitionId
                    instances: 123
                    failedJobs: 0
                    definition:
                      id: aProcessDefinitionId
                      key: aKey
                      category: null
                      description: null
                      name: aName
                      version: 0
                      resource: null
                      deploymentId: null
                      diagram: null
                      suspended: false
                      tenantId: null
                      versionTag: 1.0.0
                      historyTimeToLive: null
                      startableInTasklist: false
                    incidents:
                    - incidentType: anIncident
                      incidentCount: 20
                example-4:
                  description: Request with Query Parameter `rootIncidents=true`
                  summary: GET /process-definition/statistics?rootIncidents=true
                  value:
                  - id: aProcessDefinitionId
                    instances: 123
                    failedJobs: 0
                    definition:
                      id: aProcessDefinitionId
                      key: aKey
                      category: null
                      description: null
                      name: aName
                      version: 0
                      resource: null
                      deploymentId: null
                      diagram: null
                      suspended: false
                      tenantId: null
                      versionTag: 1.0.0
                      historyTimeToLive: null
                      startableInTasklist: false
                    incidents:
                    - incidentType: failedJob
                      incidentCount: 62
                    - incidentType: anIncident
                      incidentCount: 20
              schema:
                items:
                  $ref: '#/components/schemas/ProcessDefinitionStatisticsResultDto'
                type: array
          description: Request successful.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
          description: |-
            Returned if some of the query parameters are invalid.
            See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
      summary: Get Process Instance Statistics
      tags:
      - Process Definition
      x-accepts: application/json
  /process-definition/suspended:
    put:
      description: Activates or suspends process definitions with the given process
        definition key.
      operationId: updateProcessDefinitionSuspensionState
      requestBody:
        content:
          application/json:
            examples:
              example-1:
                summary: PUT `/process-definition/suspended`
                value:
                  processDefinitionKey: aProcessDefinitionKey
                  suspended: true
                  includeProcessInstances: true
                  executionDate: 2013-11-21T10:49:45T14:42:45
            schema:
              $ref: '#/components/schemas/ProcessDefinitionSuspensionStateDto'
        description: '**Note**: Unallowed property is `processDefinitionId`.'
      responses:
        "204":
          description: Request successful.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
          description: |-
            Returned if some of the query parameters are invalid,
            for example if the provided `executionDate` parameter doesn't have the expected format or
            if the `processDefinitionKey` parameter is `null`. See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
          description: |-
            Process definition with given key does not exist. See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
      summary: Activate/Suspend By Key
      tags:
      - Process Definition
      x-contentType: application/json
      x-accepts: application/json
  /process-definition/{id}:
    delete:
      description: Deletes a running process instance by id.
      operationId: deleteProcessDefinition
      parameters:
      - description: The id of the process definition to be deleted.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - description: |-
          `true`, if all process instances, historic process instances and jobs
          for this process definition should be deleted.
        explode: true
        in: query
        name: cascade
        required: false
        schema:
          type: boolean
        style: form
      - description: '`true`, if only the built-in ExecutionListeners should be notified
          with the end event.'
        explode: true
        in: query
        name: skipCustomListeners
        required: false
        schema:
          default: false
          type: boolean
        style: form
      - description: |-
          A boolean value to control whether input/output mappings should be executed during deletion.
          `true`, if input/output mappings should not be invoked.
        explode: true
        in: query
        name: skipIoMappings
        required: false
        schema:
          default: false
          type: boolean
        style: form
      responses:
        "204":
          description: Request successful.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
          description: |-
            Not found
            Process definition with given id does not exist. See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
      summary: Delete
      tags:
      - Process Definition
      x-accepts: application/json
    get:
      description: Retrieves a process definition according to the `ProcessDefinition`
        interface in the engine.
      operationId: getProcessDefinition
      parameters:
      - description: The id of the process definition to be retrieved.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              examples:
                example-1:
                  description: Response of GET `/process-definition/invoice:1:c3a63aaa-2046-11e7-8f94-34f39ab71d4e`
                  summary: Status 200 response
                  value:
                    id: invoice:1:c3a63aaa-2046-11e7-8f94-34f39ab71d4e
                    key: invoice
                    category: http://www.omg.org/spec/BPMN/20100524/MODEL
                    description: null
                    name: Invoice Receipt
                    version: 1
                    resource: invoice.v1.bpmn
                    deploymentId: c398cd26-2046-11e7-8f94-34f39ab71d4e
                    diagram: null
                    suspended: false
                    tenantId: null
                    versionTag: null
                    historyTimeToLive: 5
                    startableInTasklist: true
              schema:
                $ref: '#/components/schemas/ProcessDefinitionDto'
          description: Request successful.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
          description: |-
            Process definition with given `id` does not exist. See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
      summary: Get
      tags:
      - Process Definition
      x-accepts: application/json
  /process-definition/{id}/deployed-start-form:
    get:
      description: |-
        Retrieves the deployed form that can be referenced from a start event.
        For further information please refer to [User Guide](https://docs.camunda.org/manual/7.14/user-guide/task-forms/#embedded-task-forms).
      operationId: getDeployedStartForm
      parameters:
      - description: The id of the process definition to get the deployed start form
          for.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/xhtml+xml:
              examples:
                example-1:
                  description: Resonse for GET `/process-definition/processDefinitionId/deployed-start-form`
                  summary: Status 200 Response
                  value: |-
                    <form role="form" name="invoiceForm"
                                                          class="form-horizontal">

                                                      <div class="form-group">
                                                        <label class="control-label col-md-4"
                                                               for="creditor">Creditor</label>
                                                        <div class="col-md-8">
                                                          <input cam-variable-name="creditor"
                                                                 cam-variable-type="String"
                                                                 id="creditor"
                                                                 class="form-control"
                                                                 type="text"
                                                                 required />
                                                          <div class="help">
                                                            (e.g. &quot;Great Pizza for Everyone Inc.&quot;)
                                                          </div>
                                                        </div>
                                                      </div>

                                                    </form>
              schema:
                description: For `application/xhtml+xml` Responses, a byte stream
                  is returned.
                format: binary
                type: string
          description: Request successful.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
          description: |-
            The form key has wrong format.  See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthorizationExceptionDto'
          description: |-
            The deployed start form cannot be retrieved due to missing permissions on process definition resource.
            See the [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
          description: |-
            No deployed start form for a given process definition exists. See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
      summary: Get Deployed Start Form
      tags:
      - Process Definition
      x-accepts: application/json
  /process-definition/{id}/diagram:
    get:
      description: |-
        Retrieves the diagram of a process definition.

        If the process definition's deployment contains an image resource with the same file name
        as the process definition, the deployed image will be returned by the Get Diagram endpoint.
        Example: `someProcess.bpmn` and `someProcess.png`.
        Supported file extentions for the image are: `svg`, `png`, `jpg`, and `gif`.
      operationId: getProcessDefinitionDiagram
      parameters:
      - description: The id of the process definition.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/octet-stream:
              schema:
                description: defaults to `application/octet-stream` if the file suffix
                  is unknown
                format: binary
                type: string
            '*/*':
              schema:
                description: 'Files with MIME type information image/png, image/gif,
                  ... '
                format: binary
                type: string
          description: Request successful. The image diagram of this process.
        "204":
          description: The process definition doesn't have an associated diagram.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
          description: |-
            Process definition with given id does not exist. See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
      summary: Get Diagram
      tags:
      - Process Definition
      x-accepts: application/json
  /process-definition/{id}/form-variables:
    get:
      description: "Retrieves the start form variables for a process definition\n\
        (only if they are defined via the \n[Generated Task Form](https://docs.camunda.org/manual/7.14/user-guide/task-forms/#generated-task-forms)\
        \ approach).\nThe start form variables take form data specified on the start\
        \ event into account.\nIf form fields are defined, the variable types and\
        \ default values\nof the form fields are taken into account."
      operationId: getStartFormVariables
      parameters:
      - description: The id of the process definition to retrieve the variables for.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - description: |-
          A comma-separated list of variable names. Allows restricting the list of requested
          variables to the variable names in the list. It is best practice to restrict the
          list of variables to the variables actually required by the form in order to
          minimize fetching of data. If the query parameter is ommitted all variables are
          fetched. If the query parameter contains non-existent variable names, the variable
          names are ignored.
        explode: true
        in: query
        name: variableNames
        required: false
        schema:
          type: string
        style: form
      - description: |-
          Determines whether serializable variable values (typically variables that store
          custom Java objects) should be deserialized on server side (default true).

          If set to true, a serializable variable will be deserialized on server side and
          transformed to JSON using [Jackson's](http://jackson.codehaus.org/) POJO/bean
          property introspection feature. Note that this requires the Java classes of the
          variable value to be on the REST API's classpath.

          If set to false, a serializable variable will be returned in its serialized format.
          For example, a variable that is serialized as XML will be returned as a JSON string
          containing XML.

          **Note**: While true is the default value for reasons of backward compatibility, we
          recommend setting this parameter to false when developing web applications that are
          independent of the Java process applications deployed to the engine.
        explode: true
        in: query
        name: deserializeValues
        required: false
        schema:
          default: true
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/json:
              examples:
                example-1:
                  description: GET `/task/anId/form-variables`
                  summary: Status 200 Response
                  value:
                    amount:
                      type: integer
                      value: 5
                      valueInfo: {}
                    firstName:
                      type: String
                      value: Jonny
                      valueInfo: {}
              schema:
                additionalProperties:
                  $ref: '#/components/schemas/VariableValueDto'
                type: object
          description: Request successful. A JSON object containing a property for
            each variable returned.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
          description: |-
            The id is null or does not exist. See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
      summary: Get Start Form Variables
      tags:
      - Process Definition
      x-accepts: application/json
  /process-definition/{id}/history-time-to-live:
    put:
      description: |-
        Updates history time to live for process definition.
        The field is used within [History cleanup](https://docs.camunda.org/manual/7.14/user-guide/process-engine/history/#history-cleanup).
      operationId: updateHistoryTimeToLiveByProcessDefinitionId
      parameters:
      - description: The id of the process definition to change history time to live.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            examples:
              example-1:
                summary: PUT `/process-definition/aProcessDefinitionId/history-time-to-live`
                value:
                  historyTimeToLive: 5
            schema:
              $ref: '#/components/schemas/HistoryTimeToLiveDto'
      responses:
        "204":
          description: Request successful.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
          description: |-
            Returned if some of the request parameters are invalid. See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
          description: |-
            Process definition with given id does not exist. See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
      summary: Update History Time to Live
      tags:
      - Process Definition
      x-contentType: application/json
      x-accepts: application/json
  /process-definition/{id}/rendered-form:
    get:
      description: |-
        Retrieves the rendered form for a process definition.
        This method can be used to get the HTML rendering of a
        [Generated Task Form](https://docs.camunda.org/manual/7.14/user-guide/task-forms/#generated-task-forms).
      operationId: getRenderedStartForm
      parameters:
      - description: The id of the process definition to get the rendered start form
          for.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/xhtml+xml:
              examples:
                example-1:
                  description: |-
                    A `/process-definition/anId/rendered-form` HTML
                                                           GET response body providing the rendered (generated) form content.
                  summary: Status 200 Response
                  value: |-
                    <form class="form-horizontal">
                                                      <div class="control-group">
                                                        <label class="control-label">Customer ID</label>
                                                        <div class="controls">
                                                          <input form-field type="string" name="customerId"></input>
                                                        </div>
                                                      </div>
                                                      <div class="control-group">
                                                        <label class="control-label">Amount</label>
                                                        <div class="controls">
                                                          <input form-field type="number" name="amount"></input>
                                                        </div>
                                                      </div>
                                                    </form>
              schema:
                description: For `application/xhtml+xml` Responses, a byte stream
                  is returned.
                format: binary
                type: string
          description: Request successful.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
          description: |-
            Process definition has no form field metadata defined. See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
          description: |-
            Process definition with given id does not exist.  See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
      summary: Get Rendered Start Form
      tags:
      - Process Definition
      x-accepts: application/json
  /process-definition/{id}/restart:
    post:
      description: |-
        Restarts process instances that were canceled or terminated synchronously.
        Can also restart completed process instances.
        It will create a new instance using the original instance information.
        To execute the restart asynchronously, use the
        [Restart Process Instance Async](https://docs.camunda.org/manual/7.14/reference/rest/process-definition/post-restart-process-instance-async/) method.

        For more information about the difference between synchronous and asynchronous execution,
        please refer to the related section of the
        [User Guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/process-instance-restart/#execution).
      operationId: restartProcessInstance
      parameters:
      - description: The id of the process definition of the process instances to
          restart.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            examples:
              example-1:
                summary: Restarting one or more Process Instances with known processInstanceIds
                value:
                  instructions:
                  - type: startAfterActivity
                    activityId: aUserTask
                  processInstanceIds:
                  - aProcessInstance
                  - anotherProcessInstance
                  initialVariables: true
                  skipCustomListeners: true
                  withoutBusinessKey: true
              example-2:
                summary: Restarting one or more Process Instances using a historicProcessInstanceQuery
                value:
                  instructions:
                  - type: startAfterActivity
                    activityId: aUserTask
                  historicProcessInstanceQuery:
                    processDefinitionId: aProcessDefinitionId
                    processInstanceBusinessKey: businessKey
                  initialVariables: true
                  skipCustomListeners: true
                  withoutBusinessKey: true
            schema:
              $ref: '#/components/schemas/RestartProcessInstanceDto'
      responses:
        "204":
          description: Request successful.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
          description: "In case following parameters are missing: `instructions`,\
            \ `activityId` or `transitionId`,\n`processInstanceIds` or `historicProcessInstanceQuery`,\
            \ an exception of type `InvalidRequestException` is returned. \nSee the\
            \ [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)\n\
            for the error response format."
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
          description: |-
            Process definition with given id does not exist. See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
      summary: Restart Process Instance
      tags:
      - Process Definition
      x-contentType: application/json
      x-accepts: application/json
  /process-definition/{id}/restart-async:
    post:
      description: |-
        Restarts process instances that were canceled or terminated asynchronously.
        Can also restart completed process instances.
        It will create a new instance using the original instance information.
        To execute the restart asynchronously, use the
        [Restart Process Instance](https://docs.camunda.org/manual/7.14/reference/rest/process-definition/post-restart-process-instance-sync/) method.

        For more information about the difference between synchronous and asynchronous execution,
        please refer to the related section of the
        [User Guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/process-instance-restart/#execution).
      operationId: restartProcessInstanceAsyncOperation
      parameters:
      - description: The id of the process definition of the process instances to
          restart.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            examples:
              example-1:
                summary: Restarting one or more Process Instances with known processInstanceIds
                value:
                  instructions:
                  - type: startAfterActivity
                    activityId: aUserTask
                  processInstanceIds:
                  - aProcessInstance
                  - anotherProcessInstance
                  initialVariables: true
                  skipCustomListeners: true
                  withoutBusinessKey: true
              example-2:
                summary: Restarting one or more Process Instances using a historicProcessInstanceQuery
                value:
                  instructions:
                  - type: startAfterActivity
                    activityId: aUserTask
                  historicProcessInstanceQuery:
                    processDefinitionId: aProcessDefinitionId
                    processInstanceBusinessKey: businessKey
                  initialVariables: true
                  skipCustomListeners: true
                  withoutBusinessKey: true
            schema:
              $ref: '#/components/schemas/RestartProcessInstanceDto'
      responses:
        "200":
          content:
            application/json:
              examples:
                example-1:
                  summary: Status 200 Response
                  value:
                    id: aBatchId
                    type: aBatchType
                    totalJobs: 10
                    jobsCreated: 10
                    batchJobsPerSeed: 100
                    invocationsPerBatchJob: 1
                    seedJobDefinitionId: aSeedJobDefinitionId
                    monitorJobDefinitionId: aMonitorJobDefinitionId
                    batchJobDefinitionId: aBatchJobDefinitionId
                    tenantId: aTenantId
                    suspended: false
                    createUserId: demo
              schema:
                $ref: '#/components/schemas/BatchDto'
          description: Request successful.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
          description: "In case following parameters are missing: `instructions`,\
            \ `activityId` or `transitionId`,\n`processInstanceIds` or `historicProcessInstanceQuery`,\n\
            an exception of type `InvalidRequestException` is returned. \nSee the\
            \ [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)\n\
            for the error response format."
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
          description: |-
            Process definition with given id does not exist. See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
      summary: Restart Process Instance Async
      tags:
      - Process Definition
      x-contentType: application/json
      x-accepts: application/json
  /process-definition/{id}/start:
    post:
      description: |-
        Instantiates a given process definition.
        Process variables and business key may be supplied in the request body.
      operationId: startProcessInstance
      parameters:
      - description: The id of the process definition to be retrieved.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            examples:
              example-1:
                summary: Starting a process instance at its default initial activity
                value:
                  variables:
                    aVariable:
                      value: aStringValue
                      type: String
                    anotherVariable:
                      value: true
                      type: Boolean
                  businessKey: myBusinessKey
              example-2:
                summary: Starting a process instance with variables in return
                value:
                  variables:
                    aVariable:
                      value: aStringValue
                      type: String
                    anotherVariable:
                      value: true
                      type: Boolean
                  businessKey: myBusinessKey
                  withVariablesInReturn: true
              example-3:
                summary: Starting a process instance at two specific activities
                value:
                  variables:
                    aProcessVariable:
                      value: aStringValue
                      type: String
                  businessKey: myBusinessKey
                  skipCustomListeners: true
                  startInstructions:
                  - type: startBeforeActivity
                    activityId: activityId
                    variables:
                      var:
                        value: aVariableValue
                        local: false
                        type: String
                  - type: startAfterActivity
                    activityId: anotherActivityId
                    variables:
                      varLocal:
                        value: anotherVariableValue
                        local: true
                        type: String
            schema:
              $ref: '#/components/schemas/StartProcessInstanceDto'
      responses:
        "200":
          content:
            application/json:
              examples:
                example-1:
                  description: Response for starting a process instance at its default
                    initial activity
                  summary: Status 200 Response 1
                  value:
                    links:
                    - method: GET
                      href: http://localhost:8080/rest-test/process-instance/anId
                      rel: self
                    id: anId
                    definitionId: aProcessDefinitionId
                    businessKey: myBusinessKey
                    caseInstanceId: null
                    tenantId: null
                    ended: false
                    suspended: false
                example-2:
                  description: Response for starting a process instance with variables
                    in return
                  summary: Status 200 Response 2
                  value:
                    links:
                    - method: GET
                      href: http://localhost:8080/rest-test/process-instance/aProcInstId
                      rel: self
                    id: aProcInstId
                    definitionId: aProcessDefinitionId
                    businessKey: myBusinessKey
                    caseInstanceId: null
                    ended: false
                    suspended: false
                    tenantId: null
                    variables:
                      anotherVariable:
                        type: Boolean
                        value: true
                        valueInfo:
                          transient: true
                      aVariable:
                        type: String
                        value: aStringValue
                        valueInfo: {}
                example-3:
                  description: Response for starting a process instance at two specific
                    activities
                  summary: Status 200 Response 3
                  value:
                    links:
                    - method: GET
                      href: http://localhost:8080/rest-test/process-instance/anId
                      rel: self
                    id: anId
                    definitionId: aProcessDefinitionId
                    businessKey: myBusinessKey
                    caseInstanceId: null
                    tenantId: null
                    ended: false
                    suspended: false
              schema:
                $ref: '#/components/schemas/ProcessInstanceWithVariablesDto'
          description: Request successful.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
          description: |-
            The instance could not be created due to an invalid variable value,
            for example if the value could not be parsed to an `Integer` value or
            the passed variable type is not supported.
            See the [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
          description: |-
            The instance could not be created successfully.
            See the [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
      summary: Start Instance
      tags:
      - Process Definition
      x-contentType: application/json
      x-accepts: application/json
  /process-definition/{id}/startForm:
    get:
      description: |-
        Retrieves the key of the start form for a process definition.
        The form key corresponds to the `FormData#formKey` property in the engine.
      operationId: getStartForm
      parameters:
      - description: The id of the process definition to get the start form key for.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              examples:
                example-1:
                  description: GET `process-definition/anId/startForm`
                  summary: Status 200 Response
                  value:
                    key: aFormKey
                    contextPath: http://localhost:8080/my-process-application/
              schema:
                $ref: '#/components/schemas/FormDto'
          description: Request successful.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
          description: |-
            Process definition has no start form defined. See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
          description: |-
            Process definition with given id does not exist.  See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
      summary: Get Start Form Key
      tags:
      - Process Definition
      x-accepts: application/json
  /process-definition/{id}/statistics:
    get:
      description: |-
        Retrieves runtime statistics of a given process definition, grouped by activities.
        These statistics include the number of running activity instances, optionally the number of failed jobs
        and also optionally the number of incidents either grouped by incident types or for a specific incident type.
        **Note**: This does not include historic data.
      operationId: getActivityStatistics
      parameters:
      - description: The id of the process definition.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - description: Whether to include the number of failed jobs in the result or
          not. Valid values are `true` or `false`.
        explode: true
        in: query
        name: failedJobs
        required: false
        schema:
          type: boolean
        style: form
      - description: |-
          Valid values for this property are `true` or `false`.
          If this property has been set to `true` the result will include the corresponding number of incidents
          for each occurred incident type.
          If it is set to `false`, the incidents will not be included in the result.
          Cannot be used in combination with `incidentsForType`.
        explode: true
        in: query
        name: incidents
        required: false
        schema:
          type: boolean
        style: form
      - description: |-
          If this property has been set with any incident type (i.e., a string value) the result
          will only include the number of incidents for the assigned incident type.
          Cannot be used in combination with `incidents`.
          See the [User Guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/incidents/#incident-types)
          for a list of incident types.
        explode: true
        in: query
        name: incidentsForType
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              examples:
                example-1:
                  description: Request with Query Parameter `failedJobs=true`
                  summary: GET /process-definition/aProcessDefinitionId/statistics?failedJobs=true
                  value:
                  - id: anActivity
                    instances: 123
                    failedJobs: 42
                    incidents: []
                  - id: anotherActivity
                    instances: 124
                    failedJobs: 43
                    incidents: []
                example-2:
                  description: Request with Query Parameter `incidents=true`
                  summary: GET /process-definition/aProcessDefinitionId/statistics?incidents=true
                  value:
                  - id: anActivity
                    instances: 123
                    failedJobs: 0
                    incidents:
                    - incidentType: failedJob
                      incidentCount: 42
                    - incidentType: anIncident
                      incidentCount: 20
                  - id: anotherActivity
                    instances: 124
                    failedJobs: 0
                    incidents:
                    - incidentType: failedJob
                      incidentCount: 43
                    - incidentType: anIncident
                      incidentCount: 22
                    - incidentType: anotherIncident
                      incidentCount: 15
                example-3:
                  description: Request with Query Parameter `incidentsForType=anIncident`
                  summary: GET /process-definition/aProcessDefinitionId/statistics?incidentsForType=anIncident
                  value:
                  - id: anActivity
                    instances: 123
                    failedJobs: 0
                    incidents:
                    - incidentType: anIncident
                      incidentCount: 20
              schema:
                items:
                  $ref: '#/components/schemas/ActivityStatisticsResultDto'
                type: array
          description: Request successful.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
          description: |-
            Returned if some of the query parameters are invalid.
            See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
          description: |-
            Process definition with given key does not exist.
            See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
      summary: Get Activity Instance Statistics
      tags:
      - Process Definition
      x-accepts: application/json
  /process-definition/{id}/submit-form:
    post:
      description: |-
        Starts a process instance using a set of process variables and the business key.
        If the start event has Form Field Metadata defined, the process engine will perform backend validation
        for any form fields which have validators defined.
        See [Documentation on Generated Task Forms](https://docs.camunda.org/manual/7.14/user-guide/task-forms/#generated-task-forms).
      operationId: submitForm
      parameters:
      - description: The id of the process definition to submit the form for.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            examples:
              example-1:
                summary: POST `/process-definition/aProcessDefinitionId/submit-form`
                value:
                  variables:
                    aVariable:
                      value: aStringValue
                      type: String
                    anotherVariable:
                      value: true
                      type: Boolean
                  businessKey: myBusinessKey
            schema:
              $ref: '#/components/schemas/StartProcessInstanceFormDto'
      responses:
        "200":
          content:
            application/json:
              examples:
                example-1:
                  description: POST `/process-definition/aProcessDefinitionId/submit-form`
                  summary: Status 200 Response 1
                  value:
                    links:
                    - method: GET
                      href: http://localhost:8080/rest-test/process-instance/anId
                      rel: self
                    id: anId
                    definitionId: aProcessDefinitionId
                    businessKey: myBusinessKey
                    caseInstanceId: null
                    tenantId: null
                    ended: false
                    suspended: false
              schema:
                $ref: '#/components/schemas/ProcessInstanceDto'
          description: Request successful.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
          description: |-
            The instance could not be created due to an invalid variable value,
            for example if the value could not be parsed to an `Integer` value or
            the passed variable type is not supported.
            See the [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
          description: |-
            Process definition with given id does not exist.
            See the [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
          description: |-
            The instance could not be created successfully.
            See the [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
      summary: Submit Start Form
      tags:
      - Process Definition
      x-contentType: application/json
      x-accepts: application/json
  /process-definition/{id}/suspended:
    put:
      description: Activates or suspends a given process definition by id.
      operationId: updateProcessDefinitionSuspensionStateById
      parameters:
      - description: The id of the process definition to activate or suspend.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            examples:
              example-1:
                summary: PUT `/process-definition/aProcessDefinitionId/suspended`
                value:
                  suspended: true
                  includeProcessInstances: true
                  executionDate: 2013-11-21T10:49:45T14:42:45
            schema:
              $ref: '#/components/schemas/ProcessDefinitionSuspensionStateDto'
        description: '**Note**: Unallowed properties are `processDefinitionId` and
          `processDefinitionKey`.'
      responses:
        "204":
          description: Request successful.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
          description: |-
            Returned if some of the query parameters are invalid,
            for example if the provided `executionDate` parameter doesn't have the expected format or
            if the `processDefinitionKey` parameter is `null`. See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
          description: |-
            Process definition with given key does not exist. See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
      summary: Activate/Suspend By Id
      tags:
      - Process Definition
      x-contentType: application/json
      x-accepts: application/json
  /process-definition/{id}/xml:
    get:
      description: Retrieves the BPMN 2.0 XML of a process definition.
      operationId: getProcessDefinitionBpmn20Xml
      parameters:
      - description: The id of the process definition.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              examples:
                example-1:
                  summary: GET `/process-definition/id/aProcessDefinitionId/xml`
                  value:
                    id: anProcessDefinitionId
                    bpmn20Xml: |-
                      <?xml version="1.0" encoding="UTF-8"?>
                      <definitions
                                               xmlns="http://www.omg.org/spec/BPMN/20100524/MODEL"
                                               xmlns:camunda="http://camunda.org/schema/1.0/bpmn"
                                               targetNamespace="Examples">
                                               <process id="oneTaskProcess" isExecutable="true">
                                                 <startEvent id="theStart" />
                                                 <sequenceFlow id="flow1" sourceRef="theStart" targetRef="theEnd" />
                                                 <endEvent id="theEnd" />
                                               </process>
                                             </definitions>
              schema:
                $ref: '#/components/schemas/ProcessDefinitionDiagramDto'
          description: Request successful.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
          description: |-
            Returned if some of the query parameters are invalid.
            See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthorizationExceptionDto'
          description: |-
            The Process Definition xml cannot be retrieved due to missing permissions on the Process Definition resource.
            See the [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
          description: |-
            Process definition with given id does not exist. See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
      summary: Get XML
      tags:
      - Process Definition
      x-accepts: application/json
  /process-instance:
    get:
      description: |-
        Queries for process instances that fulfill given parameters.
        Parameters may be static as well as dynamic runtime properties of process instances.
        The size of the result set can be retrieved by using the Get Instance Count method.
      operationId: getProcessInstances
      parameters:
      - description: |-
          Sort the results lexicographically by a given criterion.
          Must be used in conjunction with the sortOrder parameter.
        explode: true
        in: query
        name: sortBy
        required: false
        schema:
          enum:
          - instanceId
          - definitionKey
          - definitionId
          - tenantId
          - businessKey
          type: string
        style: form
      - description: |-
          Sort the results in a given order. Values may be asc for ascending order or desc for descending order.
          Must be used in conjunction with the sortBy parameter.
        explode: true
        in: query
        name: sortOrder
        required: false
        schema:
          enum:
          - asc
          - desc
          type: string
        style: form
      - description: Pagination of results. Specifies the index of the first result
          to return.
        explode: true
        in: query
        name: firstResult
        required: false
        schema:
          type: integer
        style: form
      - description: |-
          Pagination of results. Specifies the maximum number of results to return.
          Will return less results if there are no more results left.
        explode: true
        in: query
        name: maxResults
        required: false
        schema:
          type: integer
        style: form
      - description: Filter by a comma-separated list of process instance ids.
        explode: true
        in: query
        name: processInstanceIds
        required: false
        schema:
          type: string
        style: form
      - description: Filter by process instance business key.
        explode: true
        in: query
        name: businessKey
        required: false
        schema:
          type: string
        style: form
      - description: Filter by process instance business key that the parameter is
          a substring of.
        explode: true
        in: query
        name: businessKeyLike
        required: false
        schema:
          type: string
        style: form
      - description: Filter by case instance id.
        explode: true
        in: query
        name: caseInstanceId
        required: false
        schema:
          type: string
        style: form
      - description: Filter by the deployment the id belongs to.
        explode: true
        in: query
        name: processDefinitionId
        required: false
        schema:
          type: string
        style: form
      - description: Filter by the key of the process definition the instances run
          on.
        explode: true
        in: query
        name: processDefinitionKey
        required: false
        schema:
          type: string
        style: form
      - description: |-
          Filter by a comma-separated list of process definition keys.
          A process instance must have one of the given process definition keys.
        explode: true
        in: query
        name: processDefinitionKeyIn
        required: false
        schema:
          type: string
        style: form
      - description: |-
          Exclude instances by a comma-separated list of process definition keys.
          A process instance must not have one of the given process definition keys.
        explode: true
        in: query
        name: processDefinitionKeyNotIn
        required: false
        schema:
          type: string
        style: form
      - description: Filter by the deployment the id belongs to.
        explode: true
        in: query
        name: deploymentId
        required: false
        schema:
          type: string
        style: form
      - description: |-
          Restrict query to all process instances that are sub process instances of the given process instance.
          Takes a process instance id.
        explode: true
        in: query
        name: superProcessInstance
        required: false
        schema:
          type: string
        style: form
      - description: |-
          Restrict query to all process instances that have the given process instance as a sub process instance.
          Takes a process instance id.
        explode: true
        in: query
        name: subProcessInstance
        required: false
        schema:
          type: string
        style: form
      - description: |-
          Restrict query to all process instances that are sub process instances of the given case instance.
          Takes a case instance id.
        explode: true
        in: query
        name: superCaseInstance
        required: false
        schema:
          type: string
        style: form
      - description: |-
          Restrict query to all process instances that have the given case instance as a sub case instance.
          Takes a case instance id.
        explode: true
        in: query
        name: subCaseInstance
        required: false
        schema:
          type: string
        style: form
      - description: |-
          Only include active process instances. Value may only be true,
          as false is the default behavior.
        explode: true
        in: query
        name: active
        required: false
        schema:
          default: false
          type: boolean
        style: form
      - description: |-
          Only include suspended process instances. Value may only be true,
          as false is the default behavior.
        explode: true
        in: query
        name: suspended
        required: false
        schema:
          default: false
          type: boolean
        style: form
      - description: Filter by presence of incidents. Selects only process instances
          that have an incident.
        explode: true
        in: query
        name: withIncident
        required: false
        schema:
          default: false
          type: boolean
        style: form
      - description: Filter by the incident id.
        explode: true
        in: query
        name: incidentId
        required: false
        schema:
          type: string
        style: form
      - description: |-
          Filter by the incident type.
          See the [User Guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/incidents/#incident-types)
          for a list of incident types.
        explode: true
        in: query
        name: incidentType
        required: false
        schema:
          type: string
        style: form
      - description: Filter by the incident message. Exact match.
        explode: true
        in: query
        name: incidentMessage
        required: false
        schema:
          type: string
        style: form
      - description: Filter by the incident message that the parameter is a substring
          of.
        explode: true
        in: query
        name: incidentMessageLike
        required: false
        schema:
          type: string
        style: form
      - description: Filter by a comma-separated list of tenant ids. A process instance
          must have one of the given tenant ids.
        explode: true
        in: query
        name: tenantIdIn
        required: false
        schema:
          type: string
        style: form
      - description: Only include process instances which belong to no tenant.
        explode: true
        in: query
        name: withoutTenantId
        required: false
        schema:
          default: false
          type: boolean
        style: form
      - description: Only include process instances which process definition has no
          tenant id.
        explode: true
        in: query
        name: processDefinitionWithoutTenantId
        required: false
        schema:
          default: false
          type: boolean
        style: form
      - description: |-
          Filter by a comma-separated list of activity ids.
          A process instance must currently wait in a leaf activity with one of the given activity ids.
        explode: true
        in: query
        name: activityIdIn
        required: false
        schema:
          type: string
        style: form
      - description: Restrict the query to all process instances that are top level
          process instances.
        explode: true
        in: query
        name: rootProcessInstances
        required: false
        schema:
          default: false
          type: boolean
        style: form
      - description: Restrict the query to all process instances that are leaf instances.
          (i.e. don't have any sub instances).
        explode: true
        in: query
        name: leafProcessInstances
        required: false
        schema:
          default: false
          type: boolean
        style: form
      - description: |-
          Only include process instances that have variables with certain values.
          Variable filtering expressions are comma-separated and are structured as follows:

          A valid parameter value has the form `key_operator_value`. `key` is the variable name,
          `operator` is the comparison operator to be used and `value` the variable value.

          **Note**: Values are always treated as String objects on server side.

          Valid `operator` values are:
          `eq` - equal to;
          `neq` - not equal to;
          `gt` - greater than;
          `gteq` - greater than or equal to;
          `lt` - lower than;
          `lteq` - lower than or equal to;
          `like`.
          `key` and `value` may not contain underscore or comma characters.
        explode: true
        in: query
        name: variables
        required: false
        schema:
          type: string
        style: form
      - description: |-
          Match all variable names in this query case-insensitively.
          If set to true variableName and variablename are treated as equal.
        explode: true
        in: query
        name: variableNamesIgnoreCase
        required: false
        schema:
          default: false
          type: boolean
        style: form
      - description: |-
          Match all variable values in this query case-insensitively.
          If set to true variableValue and variablevalue are treated as equal.
        explode: true
        in: query
        name: variableValuesIgnoreCase
        required: false
        schema:
          default: false
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/json:
              examples:
                example-1:
                  description: Response for GET `/process-instance?variables=myVariable_eq_camunda,mySecondVariable_neq_aBadValue`
                  summary: Status 200 response
                  value:
                  - links: []
                    id: anId
                    definitionId: aProcDefId
                    businessKey: aKey
                    caseInstanceId: aCaseInstanceId
                    ended: false
                    suspended: false
                    tenantId: null
              schema:
                items:
                  $ref: '#/components/schemas/ProcessInstanceDto'
                type: array
          description: Request successful.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
          description: |-
            Bad Request
            Returned if some of the query parameters are invalid,
            for example if a sortOrder parameter is supplied, but no sortBy, or if an invalid operator for variable comparison is used.
      tags:
      - Process Instance
      x-accepts: application/json
    post:
      description: |-
        Queries for process instances that fulfill given parameters through a JSON object.
        This method is slightly more powerful than the Get Instances method because
        it allows filtering by multiple process variables of types `string`, `number` or `boolean`.
      operationId: queryProcessInstances
      parameters:
      - description: Pagination of results. Specifies the index of the first result
          to return.
        explode: true
        in: query
        name: firstResult
        required: false
        schema:
          type: integer
        style: form
      - description: |-
          Pagination of results. Specifies the maximum number of results to return.
          Will return less results if there are no more results left.
        explode: true
        in: query
        name: maxResults
        required: false
        schema:
          type: integer
        style: form
      requestBody:
        content:
          application/json:
            examples:
              example-1:
                summary: POST `/process-instance` Request Body 1
                value:
                  variables:
                  - name: myVariable
                    operator: eq
                    value: camunda
                  - name: mySecondVariable
                    operator: neq
                    value: 124
                  processDefinitionId: aProcessDefinitionId
                  sorting:
                  - sortBy: definitionKey
                    sortOrder: asc
                  - sortBy: instanceId
                    sortOrder: desc
            schema:
              $ref: '#/components/schemas/ProcessInstanceQueryDto'
      responses:
        "200":
          content:
            application/json:
              examples:
                example-1:
                  summary: Status 200 Response 1
                  value:
                  - links: []
                    id: anId
                    definitionId: aProcessDefinitionId
                    businessKey: aKey
                    caseInstanceId: aCaseInstanceId
                    ended: false
                    suspended: false
                    tenantId: null
              schema:
                items:
                  $ref: '#/components/schemas/ProcessInstanceDto'
                type: array
          description: Request successful.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
          description: |-
            Bad Request
            Returned if some of the query parameters are invalid,
            for example if a sortOrder parameter is supplied, but no sortBy, or if an invalid operator for variable comparison is used.
      tags:
      - Process Instance
      x-contentType: application/json
      x-accepts: application/json
  /process-instance/count:
    get:
      description: Queries for the number of process instances that fulfill given
        parameters.
      operationId: getProcessInstancesCount
      parameters:
      - description: Filter by a comma-separated list of process instance ids.
        explode: true
        in: query
        name: processInstanceIds
        required: false
        schema:
          type: string
        style: form
      - description: Filter by process instance business key.
        explode: true
        in: query
        name: businessKey
        required: false
        schema:
          type: string
        style: form
      - description: Filter by process instance business key that the parameter is
          a substring of.
        explode: true
        in: query
        name: businessKeyLike
        required: false
        schema:
          type: string
        style: form
      - description: Filter by case instance id.
        explode: true
        in: query
        name: caseInstanceId
        required: false
        schema:
          type: string
        style: form
      - description: Filter by the deployment the id belongs to.
        explode: true
        in: query
        name: processDefinitionId
        required: false
        schema:
          type: string
        style: form
      - description: Filter by the key of the process definition the instances run
          on.
        explode: true
        in: query
        name: processDefinitionKey
        required: false
        schema:
          type: string
        style: form
      - description: |-
          Filter by a comma-separated list of process definition keys.
          A process instance must have one of the given process definition keys.
        explode: true
        in: query
        name: processDefinitionKeyIn
        required: false
        schema:
          type: string
        style: form
      - description: |-
          Exclude instances by a comma-separated list of process definition keys.
          A process instance must not have one of the given process definition keys.
        explode: true
        in: query
        name: processDefinitionKeyNotIn
        required: false
        schema:
          type: string
        style: form
      - description: Filter by the deployment the id belongs to.
        explode: true
        in: query
        name: deploymentId
        required: false
        schema:
          type: string
        style: form
      - description: |-
          Restrict query to all process instances that are sub process instances of the given process instance.
          Takes a process instance id.
        explode: true
        in: query
        name: superProcessInstance
        required: false
        schema:
          type: string
        style: form
      - description: |-
          Restrict query to all process instances that have the given process instance as a sub process instance.
          Takes a process instance id.
        explode: true
        in: query
        name: subProcessInstance
        required: false
        schema:
          type: string
        style: form
      - description: |-
          Restrict query to all process instances that are sub process instances of the given case instance.
          Takes a case instance id.
        explode: true
        in: query
        name: superCaseInstance
        required: false
        schema:
          type: string
        style: form
      - description: |-
          Restrict query to all process instances that have the given case instance as a sub case instance.
          Takes a case instance id.
        explode: true
        in: query
        name: subCaseInstance
        required: false
        schema:
          type: string
        style: form
      - description: |-
          Only include active process instances. Value may only be true,
          as false is the default behavior.
        explode: true
        in: query
        name: active
        required: false
        schema:
          default: false
          type: boolean
        style: form
      - description: |-
          Only include suspended process instances. Value may only be true,
          as false is the default behavior.
        explode: true
        in: query
        name: suspended
        required: false
        schema:
          default: false
          type: boolean
        style: form
      - description: Filter by presence of incidents. Selects only process instances
          that have an incident.
        explode: true
        in: query
        name: withIncident
        required: false
        schema:
          default: false
          type: boolean
        style: form
      - description: Filter by the incident id.
        explode: true
        in: query
        name: incidentId
        required: false
        schema:
          type: string
        style: form
      - description: |-
          Filter by the incident type.
          See the [User Guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/incidents/#incident-types)
          for a list of incident types.
        explode: true
        in: query
        name: incidentType
        required: false
        schema:
          type: string
        style: form
      - description: Filter by the incident message. Exact match.
        explode: true
        in: query
        name: incidentMessage
        required: false
        schema:
          type: string
        style: form
      - description: Filter by the incident message that the parameter is a substring
          of.
        explode: true
        in: query
        name: incidentMessageLike
        required: false
        schema:
          type: string
        style: form
      - description: Filter by a comma-separated list of tenant ids. A process instance
          must have one of the given tenant ids.
        explode: true
        in: query
        name: tenantIdIn
        required: false
        schema:
          type: string
        style: form
      - description: Only include process instances which belong to no tenant.
        explode: true
        in: query
        name: withoutTenantId
        required: false
        schema:
          default: false
          type: boolean
        style: form
      - description: Only include process instances which process definition has no
          tenant id.
        explode: true
        in: query
        name: processDefinitionWithoutTenantId
        required: false
        schema:
          default: false
          type: boolean
        style: form
      - description: |-
          Filter by a comma-separated list of activity ids.
          A process instance must currently wait in a leaf activity with one of the given activity ids.
        explode: true
        in: query
        name: activityIdIn
        required: false
        schema:
          type: string
        style: form
      - description: Restrict the query to all process instances that are top level
          process instances.
        explode: true
        in: query
        name: rootProcessInstances
        required: false
        schema:
          default: false
          type: boolean
        style: form
      - description: Restrict the query to all process instances that are leaf instances.
          (i.e. don't have any sub instances).
        explode: true
        in: query
        name: leafProcessInstances
        required: false
        schema:
          default: false
          type: boolean
        style: form
      - description: |-
          Only include process instances that have variables with certain values.
          Variable filtering expressions are comma-separated and are structured as follows:

          A valid parameter value has the form `key_operator_value`. `key` is the variable name,
          `operator` is the comparison operator to be used and `value` the variable value.

          **Note**: Values are always treated as String objects on server side.

          Valid `operator` values are:
          `eq` - equal to;
          `neq` - not equal to;
          `gt` - greater than;
          `gteq` - greater than or equal to;
          `lt` - lower than;
          `lteq` - lower than or equal to;
          `like`.
          `key` and `value` may not contain underscore or comma characters.
        explode: true
        in: query
        name: variables
        required: false
        schema:
          type: string
        style: form
      - description: |-
          Match all variable names in this query case-insensitively.
          If set to true variableName and variablename are treated as equal.
        explode: true
        in: query
        name: variableNamesIgnoreCase
        required: false
        schema:
          default: false
          type: boolean
        style: form
      - description: |-
          Match all variable values in this query case-insensitively.
          If set to true variableValue and variablevalue are treated as equal.
        explode: true
        in: query
        name: variableValuesIgnoreCase
        required: false
        schema:
          default: false
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/json:
              examples:
                example-1:
                  description: Response for GET `/process-instance/count?variables=myVariable_eq_camunda`
                  summary: Status 200 response
                  value:
                    count: 1
              schema:
                $ref: '#/components/schemas/CountResultDto'
          description: Request successful.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
          description: |-
            Bad Request
            Returned if some of the query parameters are invalid, for example an invalid operator for variable comparison is used.
      tags:
      - Process Instance
      x-accepts: application/json
    post:
      description: |-
        Queries for the number of process instances that fulfill the given parameters.
        This method takes the same message body as the Get Instances (POST) method and
        therefore it is slightly more powerful than the Get Instance Count method.
      operationId: queryProcessInstancesCount
      requestBody:
        content:
          application/json:
            examples:
              example-1:
                summary: POST `/process-instance/count` Request Body 1
                value:
                  variables:
                  - name: myVariable
                    operator: eq
                    value: camunda
                  - name: mySecondVariable
                    operator: neq
                    value: 124
                  processDefinitionId: aProcessDefinitionId
            schema:
              $ref: '#/components/schemas/ProcessInstanceQueryDto'
      responses:
        "200":
          content:
            application/json:
              examples:
                example-1:
                  summary: Status 200 Response 1
                  value:
                    count: 1
              schema:
                $ref: '#/components/schemas/CountResultDto'
          description: Request successful.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
          description: |-
            Bad Request
            Returned if some of the query parameters are invalid, for example if an invalid operator for variable comparison is used.
      tags:
      - Process Instance
      x-contentType: application/json
      x-accepts: application/json
  /process-instance/delete:
    post:
      description: Deletes multiple process instances asynchronously (batch).
      operationId: deleteProcessInstancesAsyncOperation
      requestBody:
        content:
          application/json:
            examples:
              example-1:
                summary: POST `/process-instance/delete` Request Body 1
                value:
                  deleteReason: aReason
                  processInstanceIds:
                  - aProcess
                  - secondProcess
                  skipCustomListeners: true
                  skipSubprocesses: true
            schema:
              $ref: '#/components/schemas/DeleteProcessInstancesDto'
        description: '**Unallowed property**: `historicProcessInstanceQuery`'
      responses:
        "200":
          content:
            application/json:
              examples:
                example-1:
                  summary: Status 200 Response 1
                  value:
                    id: aBatchId
                    type: aBatchType
                    totalJobs: 10
                    jobsCreated: 10
                    batchJobsPerSeed: 100
                    invocationsPerBatchJob: 1
                    seedJobDefinitionId: aSeedJobDefinitionId
                    monitorJobDefinitionId: aMonitorJobDefinitionId
                    batchJobDefinitionId: aBatchJobDefinitionId
                    tenantId: aTenantId
                    suspended: false
                    createUserId: demo
              schema:
                $ref: '#/components/schemas/BatchDto'
          description: Request successful.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
          description: |-
            Bad Request
            Returned if some of the query parameters are invalid, i.e., neither processInstanceIds, nor processInstanceQuery is present
      tags:
      - Process Instance
      x-contentType: application/json
      x-accepts: application/json
  /process-instance/delete-historic-query-based:
    post:
      description: Deletes a set of process instances asynchronously (batch) based
        on a historic process instance query.
      operationId: deleteAsyncHistoricQueryBased
      requestBody:
        content:
          application/json:
            examples:
              example-1:
                summary: POST `/process-instance/delete-historic-query-based` Request
                  Body 1
                value:
                  deleteReason: aReason
                  historicProcessInstanceQuery:
                    startedBefore: 2017-04-28T11:24:37.765+0200
                  skipCustomListeners: true
                  skipSubprocesses: true
            schema:
              $ref: '#/components/schemas/DeleteProcessInstancesDto'
        description: '**Unallowed property**: `processInstanceQuery`'
      responses:
        "200":
          content:
            application/json:
              examples:
                example-1:
                  summary: Status 200 Response 1
                  value:
                    id: aBatchId
                    type: aBatchType
                    totalJobs: 10
                    jobsCreated: 10
                    batchJobsPerSeed: 100
                    invocationsPerBatchJob: 1
                    seedJobDefinitionId: aSeedJobDefinitionId
                    monitorJobDefinitionId: aMonitorJobDefinitionId
                    batchJobDefinitionId: aBatchJobDefinitionId
                    tenantId: aTenantId
                    suspended: false
                    createUserId: demo
              schema:
                $ref: '#/components/schemas/BatchDto'
          description: Request successful.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
          description: |-
            Bad Request
            Returned if some of the query parameters are invalid, i.e., neither processInstanceIds, nor historicProcessInstanceQuery is present
      tags:
      - Process Instance
      x-contentType: application/json
      x-accepts: application/json
  /process-instance/job-retries:
    post:
      description: Create a batch to set retries of jobs associated with given processes
        asynchronously.
      operationId: setRetriesByProcess
      requestBody:
        content:
          application/json:
            examples:
              example-1:
                summary: POST `/process-instance/job-retries` Request Body 1
                value:
                  retries: 5
                  processInstances:
                  - aProcess
                  - secondProcess
                  processInstanceQuery:
                    processDefinitionId: aProcessDefinitionId
            schema:
              $ref: '#/components/schemas/SetJobRetriesByProcessDto'
        description: |-
          Please note that if both processInstances and processInstanceQuery are provided,
          then the resulting execution will be performed on the union of these sets.
          **Unallowed property**: `historicProcessInstanceQuery`
      responses:
        "200":
          content:
            application/json:
              examples:
                example-1:
                  value:
                    id: aBatchId
                    type: aBatchType
                    totalJobs: 10
                    batchJobsPerSeed: 100
                    jobsCreated: 10
                    invocationsPerBatchJob: 1
                    seedJobDefinitionId: aSeedJobDefinitionId
                    monitorJobDefinitionId: aMonitorJobDefinitionId
                    batchJobDefinitionId: aBatchJobDefinitionId
                    suspended: false
                    tenantId: aTenantId
                    createUserId: demo
              schema:
                $ref: '#/components/schemas/BatchDto'
          description: Request successful.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
          description: |-
            Bad Request
            Returned if some of the query parameters are invalid, for example if neither processInstanceIds, nor processInstanceQuery is present.
            Or if the retry count is not specified.
      tags:
      - Process Instance
      x-contentType: application/json
      x-accepts: application/json
  /process-instance/job-retries-historic-query-based:
    post:
      description: Create a batch to set retries of jobs asynchronously based on a
        historic process instance query.
      operationId: setRetriesByProcessHistoricQueryBased
      requestBody:
        content:
          application/json:
            examples:
              example-1:
                summary: POST `/process-instance/job-retries-historic-query-based`
                  Request Body 1
                value:
                  retries: 5
                  historicProcessInstanceQuery:
                    startedBefore: 2017-04-28T11:24:37.769+0200
                  processInstances:
                  - aProcess
                  - secondProcess
            schema:
              $ref: '#/components/schemas/SetJobRetriesByProcessDto'
        description: |-
          Please note that if both processInstances and historicProcessInstanceQuery are provided,
          then the resulting execution will be performed on the union of these sets.
          **Unallowed property**: `processInstanceQuery`
      responses:
        "200":
          content:
            application/json:
              examples:
                example-1:
                  summary: Status 200 Response
                  value:
                    id: aBatchId
                    type: aBatchType
                    totalJobs: 10
                    jobsCreated: 10
                    batchJobsPerSeed: 100
                    invocationsPerBatchJob: 1
                    seedJobDefinitionId: aSeedJobDefinitionId
                    monitorJobDefinitionId: aMonitorJobDefinitionId
                    batchJobDefinitionId: aBatchJobDefinitionId
                    tenantId: aTenantId
                    suspended: false
                    createUserId: demo
              schema:
                $ref: '#/components/schemas/BatchDto'
          description: Request successful.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
          description: |-
            Bad Request
            Returned if some of the query parameters are invalid, for example if neither processInstanceIds, nor historicProcessInstanceQuery is present.
            Or if the retry count is not specified.
      tags:
      - Process Instance
      x-contentType: application/json
      x-accepts: application/json
  /process-instance/suspended:
    put:
      description: |-
        Activates or suspends process instances by providing certain criteria:

        # Activate/Suspend Process Instance By Process Definition Id
        * `suspend`
        * `processDefinitionId`

        # Activate/Suspend Process Instance By Process Definition Key

        * `suspend`
        * `processDefinitionKey`
        * `processDefinitionTenantId`
        * `processDefinitionWithoutTenantId`

        # Activate/Suspend Process Instance In Group
        * `suspend`
        * `processInstanceIds`
        * `processInstanceQuery`
        * `historicProcessInstanceQuery`
      operationId: updateSuspensionState
      requestBody:
        content:
          application/json:
            examples:
              example-1:
                description: Suspend Process Instance By Process Definition Id
                summary: PUT `/process-instance/suspended`
                value:
                  processDefinitionId: aProcDefId
                  suspended: true
              example-2:
                description: Suspend Process Instance By Process Definition Key
                summary: PUT `/process-instance/suspended`
                value:
                  processDefinitionKey: aProcDefKey
                  suspended: true
              example-3:
                description: Suspend Process Instance In Group
                summary: PUT `/process-instance/suspended`
                value:
                  processInstanceIds:
                  - processInstanceId1
                  - processInstanceIdN
                  suspended: true
            schema:
              $ref: '#/components/schemas/ProcessInstanceSuspensionStateDto'
      responses:
        "204":
          description: Request successful.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
          description: |-
            Bad Request
            Returned if some of the request parameters are invalid,
            for example if the provided processDefinitionId or processDefinitionKey parameter is null.
      tags:
      - Process Instance
      x-contentType: application/json
      x-accepts: application/json
  /process-instance/suspended-async:
    post:
      description: |-
        Activates or suspends process instances asynchronously with a list of process instance ids,
        a process instance query, and/or a historical process instance query.
      operationId: updateSuspensionStateAsyncOperation
      requestBody:
        content:
          application/json:
            examples:
              example-1:
                description: Suspend Process Instance In Batch
                summary: POST `/process-instance/suspended-async`
                value:
                  processInstanceIds:
                  - processInstanceId1
                  - processInstanceIdN
                  suspended: true
            schema:
              $ref: '#/components/schemas/ProcessInstanceSuspensionStateAsyncDto'
      responses:
        "200":
          content:
            application/json:
              examples:
                example-1:
                  summary: Status 200 Response
                  value:
                    id: aBatchId
                    type: aBatchType
                    totalJobs: 10
                    jobsCreated: 10
                    batchJobsPerSeed: 100
                    invocationsPerBatchJob: 1
                    seedJobDefinitionId: aSeedJobDefinitionId
                    monitorJobDefinitionId: aMonitorJobDefinitionId
                    batchJobDefinitionId: aBatchJobDefinitionId
                    tenantId: aTenantId
                    suspended: false
                    createUserId: demo
              schema:
                $ref: '#/components/schemas/BatchDto'
          description: Request successful.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
          description: |-
            Bad Request
            Returned if some of the request parameters are invalid,
            for example if the provided processDefinitionId or processDefinitionKey parameter is null.
      tags:
      - Process Instance
      x-contentType: application/json
      x-accepts: application/json
  /process-instance/variables-async:
    post:
      description: Update or create runtime process variables in the root scope of
        process instances.
      operationId: setVariablesAsyncOperation
      requestBody:
        content:
          application/json:
            examples:
              example-1:
                description: Set variables to process instances in a batch
                summary: POST /process-instance/variables-async
                value:
                  processInstanceIds:
                  - b4d2ad98-7240-11e9-98b7-be5e0f7575b7
                  processInstanceQuery:
                    processDefinitionKey: my-process-definition-key
                  variables:
                    myVariableName:
                      value: myStringValue
            schema:
              $ref: '#/components/schemas/SetVariablesAsyncDto'
      responses:
        "200":
          content:
            application/json:
              examples:
                example-1:
                  summary: Status 200 Response
                  value:
                    id: 120b568d-724a-11e9-98b7-be5e0f7575b7
                    type: set-variables
                    totalJobs: 12
                    batchJobsPerSeed: 100
                    invocationsPerBatchJob: 1
                    seedJobDefinitionId: 120b5690-724a-11e9-98b7-be5e0f7575b7
                    monitorJobDefinitionId: 120b568f-724a-11e9-98b7-be5e0f7575b7
                    batchJobDefinitionId: 120b568e-724a-11e9-98b7-be5e0f7575b7
                    tenantId: accounting
                    suspended: false
                    createUserId: null
              schema:
                $ref: '#/components/schemas/BatchDto'
          description: Request successful.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
          description: |-
            Bad Request
            * The variable value or type is invalid, for example if the value could not be parsed to an Integer value or
            the passed variable type is not supported
            * If none of `processInstanceIds`, `processInstanceQuery` and `historicProcessInstanceQuery` is given
            * If no or an empty array of `variables` is given
            * If no process instance ids where found
            * If a transient variable is set
            * If the engine config flag `javaSerializationFormatEnabled` is `false` and a Java serialized variable is given
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthorizationExceptionDto'
          description: |-
            Returned if the user is not allowed to create the batch.

            See the [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling) for the
            error response format.
      tags:
      - Process Instance
      x-contentType: application/json
      x-accepts: application/json
  /process-instance/{id}:
    delete:
      description: Deletes a running process instance by id.
      operationId: deleteProcessInstance
      parameters:
      - description: The id of the process instance to be deleted.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - description: If set to true, the custom listeners will be skipped.
        explode: true
        in: query
        name: skipCustomListeners
        required: false
        schema:
          default: false
          type: boolean
        style: form
      - description: If set to true, the input/output mappings will be skipped.
        explode: true
        in: query
        name: skipIoMappings
        required: false
        schema:
          default: false
          type: boolean
        style: form
      - description: If set to true, subprocesses related to deleted processes will
          be skipped.
        explode: true
        in: query
        name: skipSubprocesses
        required: false
        schema:
          default: false
          type: boolean
        style: form
      - description: If set to false, the request will still be successful if the
          process id is not found.
        explode: true
        in: query
        name: failIfNotExists
        required: false
        schema:
          default: true
          type: boolean
        style: form
      responses:
        "204":
          description: Request successful.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
          description: "Not found\nProcess instance with given id does not exist. "
      tags:
      - Process Instance
      x-accepts: application/json
    get:
      description: Retrieves a process instance by id, according to the `ProcessInstance`
        interface in the engine.
      operationId: getProcessInstance
      parameters:
      - description: The id of the process instance to be retrieved.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              examples:
                example-1:
                  summary: GET `/process-instance/aProcessInstanceId`
                  value:
                    id: aProcessInstanceId
                    definitionId: aProcDefId
                    businessKey: aKey
                    caseInstanceId: aCaseInstanceId
                    ended: false
                    suspended: false
                    tenantId: null
              schema:
                $ref: '#/components/schemas/ProcessInstanceDto'
          description: Request successful.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
          description: "Process instance with given id does not exist. See the \n\
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)\
            \ for the error response format. "
      summary: Get Process Instance
      tags:
      - Process Instance
      x-accepts: application/json
  /process-instance/{id}/activity-instances:
    get:
      description: Retrieves an Activity Instance (Tree) for a given process instance
        by id.
      operationId: getActivityInstanceTree
      parameters:
      - description: The id of the process instance for which the activity instance
          should be retrieved.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              examples:
                example-1:
                  summary: GET `/process-instance/aProcessInstanceId/activity-instances`
                  value:
                    id: eca75c6b-f70c-11e9-8777-e4a7a094a9d6
                    parentActivityInstanceId: null
                    activityId: invoice:2:e9d77375-f70c-11e9-8777-e4a7a094a9d6
                    activityType: processDefinition
                    processInstanceId: eca75c6b-f70c-11e9-8777-e4a7a094a9d6
                    processDefinitionId: invoice:2:e9d77375-f70c-11e9-8777-e4a7a094a9d6
                    childActivityInstances:
                    - id: approveInvoice:eca89509-f70c-11e9-8777-e4a7a094a9d6
                      parentActivityInstanceId: eca75c6b-f70c-11e9-8777-e4a7a094a9d6
                      activityId: approveInvoice
                      activityType: userTask
                      processInstanceId: eca75c6b-f70c-11e9-8777-e4a7a094a9d6
                      processDefinitionId: invoice:2:e9d77375-f70c-11e9-8777-e4a7a094a9d6
                      childActivityInstances: []
                      childTransitionInstances: []
                      executionIds:
                      - eca75c6b-f70c-11e9-8777-e4a7a094a9d6
                      activityName: Approve Invoice
                      incidentIds:
                      - 648d7e21-f71c-11e9-a725-e4a7a094a9d6
                      incidents:
                      - id: 648d7e21-f71c-11e9-a725-e4a7a094a9d6
                        activityId: AttachedTimerBoundaryEvent
                    childTransitionInstances: []
                    executionIds:
                    - eca75c6b-f70c-11e9-8777-e4a7a094a9d6
                    activityName: Invoice Receipt
                    incidentIds: null
                    incidents: null
              schema:
                $ref: '#/components/schemas/ActivityInstanceDto'
          description: Request successful.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
          description: Process instance with given id does not exist.
      tags:
      - Process Instance
      x-accepts: application/json
  /process-instance/{id}/modification:
    post:
      description: |-
        Submits a list of modification instructions to change a process instance's execution state.
        A modification instruction is one of the following:

        * Starting execution before an activity
        * Starting execution after an activity on its single outgoing sequence flow
        * Starting execution on a specific sequence flow
        * Canceling an activity instance, transition instance, or all instances (activity or transition) for an activity

        Instructions are executed immediately and in the order they are provided in this request's body.
        Variables can be provided with every starting instruction.

        The exact semantics of modification can be read about in the [User guide](https://docs.camunda.org/manual/develop/user-guide/process-engine/process-instance-modification/).
      operationId: modifyProcessInstance
      parameters:
      - description: The id of the process instance to modify.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            examples:
              example-1:
                summary: POST `/process-instance/aProcessInstanceId/modification`
                value:
                  skipCustomListeners: true
                  skipIoMappings: true
                  instructions:
                  - type: startBeforeActivity
                    activityId: activityId
                    variables:
                      var:
                        value: aVariableValue
                        local: false
                        type: String
                      varLocal:
                        value: anotherVariableValue
                        local: true
                        type: String
                  - type: cancel
                    activityInstanceId: anActivityInstanceId
                  annotation: Modified to resolve an error.
            schema:
              $ref: '#/components/schemas/ProcessInstanceModificationDto'
      responses:
        "204":
          description: Request successful.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
          description: At least one modification instruction misses required parameters.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
          description: The modification cannot be performed, for example because it
            starts a failing activity.
      tags:
      - Process Instance
      x-contentType: application/json
      x-accepts: application/json
  /process-instance/{id}/modification-async:
    post:
      description: |-
        Submits a list of modification instructions to change a process instance's execution state async.
        A modification instruction is one of the following:

        * Starting execution before an activity
        * Starting execution after an activity on its single outgoing sequence flow
        * Starting execution on a specific sequence flow
        * Cancelling an activity instance, transition instance, or all instances (activity or transition) for an activity

        Instructions are executed asynchronous and in the order they are provided in this request's body.
        Variables can be provided with every starting instruction.

        The exact semantics of modification can be read about in the
        [User guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/process-instance-modification/).
      operationId: modifyProcessInstanceAsyncOperation
      parameters:
      - description: The id of the process instance to modify.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            examples:
              example-1:
                summary: POST `/process-instance/aProcessInstanceId/modification-async`
                value:
                  skipCustomListeners: true
                  skipIoMappings: true
                  instructions:
                  - type: startBeforeActivity
                    activityId: activityId
                  - type: cancel
                    activityInstanceId: anActivityInstanceId
                  annotation: Modified to resolve an error.
            schema:
              $ref: '#/components/schemas/ProcessInstanceModificationDto'
      responses:
        "200":
          content:
            application/json:
              examples:
                example-1:
                  summary: Status 200 Response
                  value:
                    id: aBatchId
                    type: aBatchType
                    totalJobs: 10
                    jobsCreated: 10
                    batchJobsPerSeed: 100
                    invocationsPerBatchJob: 1
                    seedJobDefinitionId: aSeedJobDefinitionId
                    monitorJobDefinitionId: aMonitorJobDefinitionId
                    batchJobDefinitionId: aBatchJobDefinitionId
                    tenantId: aTenantId
                    suspended: false
                    createUserId: demo
              schema:
                $ref: '#/components/schemas/BatchDto'
          description: Request successful.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
          description: |-
            Bad Request
            At least one modification instruction misses required parameters.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthorizationExceptionDto'
          description: |-
            Forbidden
            If the user is not allowed to execute batches. See the Introduction for the error response format.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
          description: The modification cannot be performed, for example because it
            starts a failing activity.
      tags:
      - Process Instance
      x-contentType: application/json
      x-accepts: application/json
  /process-instance/{id}/suspended:
    put:
      description: Activates or suspends a given process instance by id.
      operationId: updateSuspensionStateById
      parameters:
      - description: The id of the process instance to activate or suspend.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            examples:
              example-1:
                summary: PUT `/process-instance/aProcessInstanceId/suspended`
                value:
                  suspended: true
            schema:
              $ref: '#/components/schemas/SuspensionStateDto'
      responses:
        "204":
          description: Request successful.
      tags:
      - Process Instance
      x-contentType: application/json
      x-accepts: application/json
  /process-instance/{id}/variables:
    get:
      description: Retrieves all variables of a given process instance by id.
      operationId: getProcessInstanceVariables
      parameters:
      - description: The id of the process instance to retrieve the variables from.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - description: |-
          Determines whether serializable variable values (typically variables that store custom Java objects)
          should be deserialized on server side (default true).

          If set to true, a serializable variable will be deserialized on server side and transformed to JSON
          using [Jackson's](https://github.com/FasterXML/jackson) POJO/bean property introspection feature.
          Note that this requires the Java classes of the variable value to be on the REST API's classpath.

          If set to false, a serializable variable will be returned in its serialized format.
          For example, a variable that is serialized as XML will be returned as a JSON string containing XML.

          Note: While true is the default value for reasons of backward compatibility, we recommend setting this parameter to false
          when developing web applications that are independent of the Java process applications deployed to the engine.
        explode: true
        in: query
        name: deserializeValue
        required: false
        schema:
          default: true
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/json:
              examples:
                example-1:
                  summary: GET `/process-instance/aProcessInstanceId/variables`
                  value:
                    aVariableKey:
                      value:
                        prop1: a
                        prop2: b
                      type: Object
                      valueInfo:
                        objectTypeName: com.example.MyObject
                        serializationDataFormat: application/xml
                example-2:
                  summary: GET `/process-instance/aProcessInstanceId/variables?deserializeValue=false`
                  value:
                    aVariableKey:
                      value: ab
                      type: Object
                      valueInfo:
                        objectTypeName: com.example.MyObject
                        serializationDataFormat: application/xml
              schema:
                additionalProperties:
                  $ref: '#/components/schemas/VariableValueDto'
                type: object
          description: Request successful.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
          description: Process instance with given id does not exist.
      tags:
      - Process Instance
      x-accepts: application/json
    post:
      description: |-
        Updates or deletes the variables of a process instance by id. Updates precede deletions.
        So, if a variable is updated AND deleted, the deletion overrides the update.
      operationId: modifyProcessInstanceVariables
      parameters:
      - description: The id of the process instance to set variables for.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            examples:
              example-1:
                description: 'Status 204 Response: No content.'
                summary: POST `/process-instance/aProcessInstanceId/variables`
                value:
                  modifications:
                    aVariable:
                      value: aValue
                      type: String
                    anotherVariable:
                      value: 42
                      type: Integer
                  deletions:
                  - aThirdVariable
                  - FourthVariable
            schema:
              $ref: '#/components/schemas/PatchVariablesDto'
      responses:
        "204":
          description: Request successful.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
          description: |-
            Bad Request
            The variable value or type is invalid, for example if the value could not be parsed to an Integer value or
            the passed variable type is not supported.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
          description: Update or delete could not be executed, for example because
            the process instance does not exist.
      tags:
      - Process Instance
      x-contentType: application/json
      x-accepts: application/json
  /process-instance/{id}/variables/{varName}:
    delete:
      description: Deletes a variable of a process instance by id.
      operationId: deleteProcessInstanceVariable
      parameters:
      - description: The id of the process instance to delete the variable from.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - description: The name of the variable to delete.
        explode: false
        in: path
        name: varName
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: Request successful.
      tags:
      - Process Instance
      x-accepts: application/json
    get:
      description: Retrieves a variable of a given process instance by id.
      operationId: getProcessInstanceVariable
      parameters:
      - description: The id of the process instance to retrieve the variable for.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - description: The name of the variable to retrieve.
        explode: false
        in: path
        name: varName
        required: true
        schema:
          type: string
        style: simple
      - description: |-
          Determines whether serializable variable values (typically variables that store custom Java objects)
          should be deserialized on server side (default true).

          If set to true, a serializable variable will be deserialized on server side and transformed to JSON
          using [Jackson's](https://github.com/FasterXML/jackson) POJO/bean property introspection feature.
          Note that this requires the Java classes of the variable value to be on the REST API's classpath.

          If set to false, a serializable variable will be returned in its serialized format.
          For example, a variable that is serialized as XML will be returned as a JSON string containing XML.

          Note: While true is the default value for reasons of backward compatibility, we recommend setting this parameter to false
          when developing web applications that are independent of the Java process applications deployed to the engine.
        explode: true
        in: query
        name: deserializeValue
        required: false
        schema:
          default: true
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/json:
              examples:
                example-1:
                  summary: GET `/process-instance/aProcessInstanceId/variables/myObject123`
                  value:
                    value:
                      prop1: a
                      prop2: b
                    type: Object
                    valueInfo:
                      objectTypeName: com.example.MyObject
                      serializationDataFormat: application/xml
                example-2:
                  summary: GET `/process-instance/aProcessInstanceId/variables/myObject123?deserializeValue=false`
                  value:
                    value: ab
                    type: Object
                    valueInfo:
                      objectTypeName: com.example.MyObject
                      serializationDataFormat: application/xml
              schema:
                $ref: '#/components/schemas/VariableValueDto'
          description: Request successful.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
          description: |-
            Bad Request
            Variable with given id does not exist.
      tags:
      - Process Instance
      x-accepts: application/json
    put:
      description: Sets a variable of a given process instance by id.
      operationId: setProcessInstanceVariable
      parameters:
      - description: The id of the process instance to set the variable for.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - description: The name of the variable to set.
        explode: false
        in: path
        name: varName
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            examples:
              example-1:
                description: Status 204. No content.
                summary: PUT /process-instance/aProcessInstanceId/variables/aVarName
                value:
                  value: someValue
                  type: String
              example-2:
                description: Status 204. No content.
                summary: PUT /process-instance/aProcessInstanceId/variables/aVarName
                value:
                  value: ab
                  type: Object
                  valueInfo:
                    objectTypeName: com.example.MyObject
                    serializationDataFormat: application/xml
            schema:
              $ref: '#/components/schemas/VariableValueDto'
      responses:
        "204":
          description: Request successful.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
          description: |-
            Bad Request
            The variable value or type is invalid, for example if the value could not be parsed to an Integer value or
            the passed variable type is not supported.
      tags:
      - Process Instance
      x-contentType: application/json
      x-accepts: application/json
  /process-instance/{id}/variables/{varName}/data:
    get:
      description: |-
        Retrieves the content of a Process Variable by the Process Instance id and the Process Variable name.
        Applicable for byte array or file Process Variables.
      operationId: getProcessInstanceVariableBinary
      parameters:
      - description: The id of the process instance to retrieve the variable for.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - description: The name of the variable to retrieve.
        explode: false
        in: path
        name: varName
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/octet-stream:
              examples:
                example-1:
                  summary: 'binary variable: Status 200'
                  value: 'Content-Type: application/octet-stream'
              schema:
                description: For binary variables or files without any MIME type information,
                  a byte stream is returned.
                format: binary
                type: string
            text/plain:
              examples:
                example-1:
                  summary: 'file variable: Status 200'
                  value: 'Content-Type: text/plain; charset=UTF-8. Content-Disposition:
                    attachment; filename="someFile.txt"'
              schema:
                description: |-
                  File variables with MIME type information are returned as the saved type.
                              Additionally, for file variables the Content-Disposition header will be set.
                format: binary
                type: string
          description: |-
            Request successful.
                    For binary variables or files without any MIME type information, a byte stream is returned.
                    File variables with MIME type information are returned as the saved type.
                    Additionally, for file variables the Content-Disposition header will be set.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
          description: |-
            Bad Request
            A Process Variable with the given id exists but does not serialize as binary data.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
          description: "Not Found\nA Process Variable with the given id does not exist. "
      tags:
      - Process Instance
      x-accepts: application/json
    post:
      description: Sets the serialized value for a binary variable or the binary value
        for a file variable.
      operationId: setProcessInstanceVariableBinary
      parameters:
      - description: The id of the process instance to retrieve the variable for.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - description: The name of the variable to retrieve.
        explode: false
        in: path
        name: varName
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          multipart/form-data:
            examples:
              example-1:
                description: Post binary content of a byte array variable.
                summary: POST `/process-instance/aProcessInstanceId/variables/aVarName/data`
                  (1)
                value: "\n                        ```\n                        ------------------------------354ddb6baeff\n\
                  \                        Content-Disposition: form-data; name=\"\
                  data\"; filename=\"image.png\"\n                        Content-Type:\
                  \ application/octet-stream\n                        Content-Transfer-Encoding:\
                  \ binary\n\n                        <<Byte Stream ommitted>>\n \
                  \                       ------------------------------354ddb6baeff\n\
                  \                        Content-Disposition: form-data; name=\"\
                  valueType\"\n                        Content-Type: text/plain; charset=US-ASCII\n\
                  \                        Content-Transfer-Encoding: 8bit\n\n   \
                  \                     Bytes\n                        ------------------------------1e838f8f632a--\n\
                  \                        ```\n                      "
              example-2:
                description: Post the JSON serialization of a Java Class (**deprecated**).
                summary: POST `/process-instance/aProcessInstanceId/variables/aVarName/data`
                  (2)
                value: "\n                        ```\n                        ------------------------------1e838f8f632a\n\
                  \                        Content-Disposition: form-data; name=\"\
                  type\"\n                        Content-Type: text/plain; charset=US-ASCII\n\
                  \                        Content-Transfer-Encoding: 8bit\n\n   \
                  \                     java.util.ArrayList<java.lang.Object>\n  \
                  \                      ------------------------------1e838f8f632a\n\
                  \                        Content-Disposition: form-data; name=\"\
                  data\"\n                        Content-Type: application/json;\
                  \ charset=US-ASCII\n                        Content-Transfer-Encoding:\
                  \ 8bit\n\n                        [\"foo\",\"bar\"]\n          \
                  \              ------------------------------1e838f8f632a--\n  \
                  \                      ```\n                      "
              example-3:
                description: Post a text file.
                summary: POST `/process-instance/aProcessInstanceId/variables/aVarName/data`
                  (3)
                value: "\n                        ```\n                        ---OSQH1f8lzs83iXFHphqfIuitaQfNKFY74Y\n\
                  \                        Content-Disposition: form-data; name=\"\
                  data\"; filename=\"myFile.txt\"\n                        Content-Type:\
                  \ text/plain; charset=US-ASCII\n                        Content-Transfer-Encoding:\
                  \ binary\n\n                        <<Byte Stream ommitted>>\n \
                  \                       ---OSQH1f8lzs83iXFHphqfIuitaQfNKFY74Y\n\
                  \                        Content-Disposition: form-data; name=\"\
                  valueType\"\n                        Content-Type: text/plain; charset=US-ASCII\n\
                  \                        Content-Transfer-Encoding: 8bit\n\n   \
                  \                     File\n                        ------------------------------1e838f8f632a--\n\
                  \                        ```\n                      "
            schema:
              $ref: '#/components/schemas/MultiFormVariableBinaryDto'
        description: 'For binary variables a multipart form submit with the following
          parts:'
      responses:
        "204":
          description: Request successful.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
          description: |-
            Bad Request
            The variable value or type is invalid, for example if no filename is set.
      tags:
      - Process Instance
      x-contentType: multipart/form-data
      x-accepts: application/json
  /schema/log:
    get:
      description: Queries for schema log entries that fulfill given parameters.
      operationId: getSchemaLog
      parameters:
      - description: Only return schema log entries with a specific version.
        explode: true
        in: query
        name: version
        required: false
        schema:
          type: string
        style: form
      - description: Pagination of results. Specifies the index of the first result
          to return.
        explode: true
        in: query
        name: firstResult
        required: false
        schema:
          type: integer
        style: form
      - description: |-
          Pagination of results. Specifies the maximum number of results to return.
          Will return less results if there are no more results left.
        explode: true
        in: query
        name: maxResults
        required: false
        schema:
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              examples:
                example-1:
                  description: The Response content of a status 200
                  summary: Status 200 Response
                  value:
                  - id: "0"
                    version: 7.11.0
                    timestamp: 2019-05-13T09:07:11.751+0200
                  - id: "1"
                    version: 7.11.1
                    timestamp: 2019-06-1T17:22:05.123+0200
              schema:
                items:
                  $ref: '#/components/schemas/SchemaLogEntryDto'
                type: array
          description: |-
            Request successful.
            **Note**: In order to get any results a user of group `camunda-admin` must
            be authenticated.
      tags:
      - Schema Log
      x-accepts: application/json
    post:
      description: Queries for schema log entries that fulfill given parameters.
      operationId: querySchemaLog
      parameters:
      - description: Pagination of results. Specifies the index of the first result
          to return.
        explode: true
        in: query
        name: firstResult
        required: false
        schema:
          type: integer
        style: form
      - description: |-
          Pagination of results. Specifies the maximum number of results to return.
          Will return less results if there are no more results left.
        explode: true
        in: query
        name: maxResults
        required: false
        schema:
          type: integer
        style: form
      requestBody:
        content:
          application/json:
            examples:
              example-1:
                description: The content of the Request Body
                summary: POST /schema/log
                value:
                  version: 7.11.0
                  sortBy: timestamp
                  sortOrder: asc
            schema:
              $ref: '#/components/schemas/SchemaLogQueryDto'
      responses:
        "200":
          content:
            application/json:
              examples:
                example-1:
                  description: The Response content of a status 200
                  summary: Status 200 Response
                  value:
                  - id: "0"
                    version: 7.11.0
                    timestamp: 2019-05-13T09:07:11.751+0200
              schema:
                items:
                  $ref: '#/components/schemas/SchemaLogEntryDto'
                type: array
          description: |-
            Request successful.
            **Note**: In order to get any results a user of group camunda-admin must be
            authenticated.
      tags:
      - Schema Log
      x-contentType: application/json
      x-accepts: application/json
  /signal:
    post:
      description: |-
        A signal is an event of global scope (broadcast semantics) and is delivered to all
        active handlers. Internally this maps to the engine's signal event received builder
        method `RuntimeService#createSignalEvent()`. For more information about the signal
        behavior, see the [Signal Events](https://docs.camunda.org/manual/7.14/reference/bpmn20/events/signal-events/)
        section of the [BPMN 2.0 Implementation Reference](https://docs.camunda.org/manual/7.14/reference/bpmn20/).
      operationId: throwSignal
      parameters: []
      requestBody:
        content:
          application/json:
            examples:
              examle-1:
                description: The content of the Request Body
                summary: POST /signal
                value:
                  name: policy_conditions_changed
                  variables:
                    newTimePeriodInMonth:
                      value: 24
            schema:
              $ref: '#/components/schemas/SignalDto'
      responses:
        "204":
          description: Request successful.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
          description: |-
            Returned if:

            * no name was given
            * the variable value or type is invalid, for example if the value could not be
            parsed to an integer value or the passed variable type is not supported
            * a tenant id and an execution id is specified.

            See the [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling) for the
            error response format.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthorizationExceptionDto'
          description: |-
            Returned if the user is not allowed to throw a signal event.

            See the [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling) for the
            error response format.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
          description: |-
            Returned if a single execution is specified and no such execution exists or has not
            subscribed to the signal.

            See the [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling) for the
            error response format.
      tags:
      - Signal
      x-contentType: application/json
      x-accepts: application/json
  /task:
    get:
      description: |-
        Queries for tasks that fulfill a given filter. The size of the result set can be
        retrieved by using the Get Task Count method.

        **Security Consideration:** There are several query parameters (such as
        assigneeExpression) for specifying an EL expression. These are disabled by default to
        prevent remote code execution. See the section on
        [security considerations](https://docs.camunda.org/manual/7.14/user-guide/process-engine/securing-custom-code/)
        for custom code in the user guide for details.
      operationId: getTasks
      parameters:
      - description: Restrict to tasks that belong to process instances with the given
          id.
        explode: true
        in: query
        name: processInstanceId
        required: false
        schema:
          type: string
        style: form
      - description: Restrict to tasks that belong to process instances with the given
          ids.
        explode: true
        in: query
        name: processInstanceIdIn
        required: false
        schema:
          type: string
        style: form
      - description: Restrict to tasks that belong to process instances with the given
          business key.
        explode: true
        in: query
        name: processInstanceBusinessKey
        required: false
        schema:
          type: string
        style: form
      - description: "Restrict to tasks that belong to process instances with the\
          \ given business key which \nis described by an expression. See the \n[user\
          \ guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/expression-language/#internal-context-functions)\n\
          for more information on available functions."
        explode: true
        in: query
        name: processInstanceBusinessKeyExpression
        required: false
        schema:
          type: string
        style: form
      - description: "Restrict to tasks that belong to process instances with one\
          \ of the give business keys. \nThe keys need to be in a comma-separated\
          \ list."
        explode: true
        in: query
        name: processInstanceBusinessKeyIn
        required: false
        schema:
          type: string
        style: form
      - description: "Restrict to tasks that have a process instance business key\
          \ that has the parameter \nvalue as a substring."
        explode: true
        in: query
        name: processInstanceBusinessKeyLike
        required: false
        schema:
          type: string
        style: form
      - description: "Restrict to tasks that have a process instance business key\
          \ that has the parameter \nvalue as a substring and is described by an expression.\
          \ See the\n[user guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/expression-language/#internal-context-functions)\
          \ \nfor more information on available functions."
        explode: true
        in: query
        name: processInstanceBusinessKeyLikeExpression
        required: false
        schema:
          type: string
        style: form
      - description: Restrict to tasks that belong to a process definition with the
          given id.
        explode: true
        in: query
        name: processDefinitionId
        required: false
        schema:
          type: string
        style: form
      - description: Restrict to tasks that belong to a process definition with the
          given key.
        explode: true
        in: query
        name: processDefinitionKey
        required: false
        schema:
          type: string
        style: form
      - description: "Restrict to tasks that belong to a process definition with one\
          \ of the given keys. The \nkeys need to be in a comma-separated list."
        explode: true
        in: query
        name: processDefinitionKeyIn
        required: false
        schema:
          type: string
        style: form
      - description: Restrict to tasks that belong to a process definition with the
          given name.
        explode: true
        in: query
        name: processDefinitionName
        required: false
        schema:
          type: string
        style: form
      - description: "Restrict to tasks that have a process definition name that has\
          \ the parameter value as \na substring."
        explode: true
        in: query
        name: processDefinitionNameLike
        required: false
        schema:
          type: string
        style: form
      - description: Restrict to tasks that belong to an execution with the given
          id.
        explode: true
        in: query
        name: executionId
        required: false
        schema:
          type: string
        style: form
      - description: Restrict to tasks that belong to case instances with the given
          id.
        explode: true
        in: query
        name: caseInstanceId
        required: false
        schema:
          type: string
        style: form
      - description: Restrict to tasks that belong to case instances with the given
          business key.
        explode: true
        in: query
        name: caseInstanceBusinessKey
        required: false
        schema:
          type: string
        style: form
      - description: "Restrict to tasks that have a case instance business key that\
          \ has the parameter value \nas a substring."
        explode: true
        in: query
        name: caseInstanceBusinessKeyLike
        required: false
        schema:
          type: string
        style: form
      - description: Restrict to tasks that belong to a case definition with the given
          id.
        explode: true
        in: query
        name: caseDefinitionId
        required: false
        schema:
          type: string
        style: form
      - description: Restrict to tasks that belong to a case definition with the given
          key.
        explode: true
        in: query
        name: caseDefinitionKey
        required: false
        schema:
          type: string
        style: form
      - description: Restrict to tasks that belong to a case definition with the given
          name.
        explode: true
        in: query
        name: caseDefinitionName
        required: false
        schema:
          type: string
        style: form
      - description: "Restrict to tasks that have a case definition name that has\
          \ the parameter value as a \nsubstring."
        explode: true
        in: query
        name: caseDefinitionNameLike
        required: false
        schema:
          type: string
        style: form
      - description: Restrict to tasks that belong to a case execution with the given
          id.
        explode: true
        in: query
        name: caseExecutionId
        required: false
        schema:
          type: string
        style: form
      - description: "Only include tasks which belong to one of the passed and comma-separated\
          \ activity \ninstance ids."
        explode: true
        in: query
        name: activityInstanceIdIn
        required: false
        schema:
          type: string
        style: form
      - description: "Only include tasks which belong to one of the passed and comma-separated\
          \ \ntenant ids."
        explode: true
        in: query
        name: tenantIdIn
        required: false
        schema:
          type: string
        style: form
      - description: "Only include tasks which belong to no tenant. Value may only\
          \ be `true`, \nas `false` is the default behavior."
        explode: true
        in: query
        name: withoutTenantId
        required: false
        schema:
          default: false
          type: boolean
        style: form
      - description: Restrict to tasks that the given user is assigned to.
        explode: true
        in: query
        name: assignee
        required: false
        schema:
          type: string
        style: form
      - description: "Restrict to tasks that the user described by the given expression\
          \ is assigned to. \nSee the \n[user guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/expression-language/#internal-context-functions)\
          \ \nfor more information on available functions."
        explode: true
        in: query
        name: assigneeExpression
        required: false
        schema:
          type: string
        style: form
      - description: "Restrict to tasks that have an assignee that has the parameter\
          \ \nvalue as a substring."
        explode: true
        in: query
        name: assigneeLike
        required: false
        schema:
          type: string
        style: form
      - description: "Restrict to tasks that have an assignee that has the parameter\
          \ value described by the \ngiven expression as a substring. See the \n[user\
          \ guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/expression-language/#internal-context-functions)\
          \ \nfor more information on available functions."
        explode: true
        in: query
        name: assigneeLikeExpression
        required: false
        schema:
          type: string
        style: form
      - description: "Only include tasks which are assigned to one of the passed and\
          \ \ncomma-separated user ids."
        explode: true
        in: query
        name: assigneeIn
        required: false
        schema:
          type: string
        style: form
      - description: Restrict to tasks that the given user owns.
        explode: true
        in: query
        name: owner
        required: false
        schema:
          type: string
        style: form
      - description: "Restrict to tasks that the user described by the given expression\
          \ owns. See the \n[user guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/expression-language/#internal-context-functions)\
          \ \nfor more information on available functions."
        explode: true
        in: query
        name: ownerExpression
        required: false
        schema:
          type: string
        style: form
      - description: Only include tasks that are offered to the given group.
        explode: true
        in: query
        name: candidateGroup
        required: false
        schema:
          type: string
        style: form
      - description: "Only include tasks that are offered to the group described by\
          \ the given expression. \nSee the \n[user guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/expression-language/#internal-context-functions)\
          \ \nfor more information on available functions."
        explode: true
        in: query
        name: candidateGroupExpression
        required: false
        schema:
          type: string
        style: form
      - description: Only include tasks that are offered to the given user or to one
          of his groups.
        explode: true
        in: query
        name: candidateUser
        required: false
        schema:
          type: string
        style: form
      - description: "Only include tasks that are offered to the user described by\
          \ the given expression. \nSee the \n[user guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/expression-language/#internal-context-functions)\
          \ \nfor more information on available functions."
        explode: true
        in: query
        name: candidateUserExpression
        required: false
        schema:
          type: string
        style: form
      - description: "Also include tasks that are assigned to users in candidate queries.\
          \ Default is to only \ninclude tasks that are not assigned to any user if\
          \ you query by candidate user or\ngroup(s)."
        explode: true
        in: query
        name: includeAssignedTasks
        required: false
        schema:
          default: false
          type: boolean
        style: form
      - description: "Only include tasks that the given user is involved in. A user\
          \ is involved in a task if \nan identity link exists between task and user\
          \ (e.g., the user is the assignee)."
        explode: true
        in: query
        name: involvedUser
        required: false
        schema:
          type: string
        style: form
      - description: |-
          Only include tasks that the user described by the given expression is involved in.
          A user is involved in a task if an identity link exists between task and user
          (e.g., the user is the assignee). See the
          [user guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/expression-language/#internal-context-functions)
          for more information on available functions.
        explode: true
        in: query
        name: involvedUserExpression
        required: false
        schema:
          type: string
        style: form
      - description: If set to `true`, restricts the query to all tasks that are assigned.
        explode: true
        in: query
        name: assigned
        required: false
        schema:
          default: false
          type: boolean
        style: form
      - description: If set to `true`, restricts the query to all tasks that are unassigned.
        explode: true
        in: query
        name: unassigned
        required: false
        schema:
          default: false
          type: boolean
        style: form
      - description: Restrict to tasks that have the given key.
        explode: true
        in: query
        name: taskDefinitionKey
        required: false
        schema:
          type: string
        style: form
      - description: |-
          Restrict to tasks that have one of the given keys. The keys need to be in a
          comma-separated list.
        explode: true
        in: query
        name: taskDefinitionKeyIn
        required: false
        schema:
          type: string
        style: form
      - description: Restrict to tasks that have a key that has the parameter value
          as a substring.
        explode: true
        in: query
        name: taskDefinitionKeyLike
        required: false
        schema:
          type: string
        style: form
      - description: Restrict to tasks that have the given name.
        explode: true
        in: query
        name: name
        required: false
        schema:
          type: string
        style: form
      - description: Restrict to tasks that do not have the given name.
        explode: true
        in: query
        name: nameNotEqual
        required: false
        schema:
          type: string
        style: form
      - description: Restrict to tasks that have a name with the given parameter value
          as substring.
        explode: true
        in: query
        name: nameLike
        required: false
        schema:
          type: string
        style: form
      - description: |-
          Restrict to tasks that do not have a name with the given parameter
          value as substring.
        explode: true
        in: query
        name: nameNotLike
        required: false
        schema:
          type: string
        style: form
      - description: Restrict to tasks that have the given description.
        explode: true
        in: query
        name: description
        required: false
        schema:
          type: string
        style: form
      - description: |-
          Restrict to tasks that have a description that has the parameter
          value as a substring.
        explode: true
        in: query
        name: descriptionLike
        required: false
        schema:
          type: string
        style: form
      - description: Restrict to tasks that have the given priority.
        explode: true
        in: query
        name: priority
        required: false
        schema:
          type: integer
        style: form
      - description: Restrict to tasks that have a lower or equal priority.
        explode: true
        in: query
        name: maxPriority
        required: false
        schema:
          type: integer
        style: form
      - description: Restrict to tasks that have a higher or equal priority.
        explode: true
        in: query
        name: minPriority
        required: false
        schema:
          type: integer
        style: form
      - description: |-
          Restrict to tasks that are due on the given date. By
          [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the
          format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g.,
          `2013-01-23T14:42:45.546+0200`.
        explode: true
        in: query
        name: dueDate
        required: false
        schema:
          type: string
        style: form
      - description: |-
          Restrict to tasks that are due on the date described by the given expression. See the
          [User Guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/expression-language/#internal-context-functions)
          for more information on available functions. The expression must evaluate to a
          `java.util.Date` or `org.joda.time.DateTime` object.
        explode: true
        in: query
        name: dueDateExpression
        required: false
        schema:
          type: string
        style: form
      - description: |-
          Restrict to tasks that are due after the given date. By
          [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have
          the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g.,
          `2013-01-23T14:42:45.435+0200`.
        explode: true
        in: query
        name: dueAfter
        required: false
        schema:
          type: string
        style: form
      - description: |-
          Restrict to tasks that are due after the date described by the given expression.
          See the
          [user guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/expression-language/#internal-context-functions)
          for more information on available functions. The expression must evaluate to a
          `java.util.Date` or `org.joda.time.DateTime` object.
        explode: true
        in: query
        name: dueAfterExpression
        required: false
        schema:
          type: string
        style: form
      - description: |-
          Restrict to tasks that are due before the given date. By
          [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have
          the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g.,
          `2013-01-23T14:42:45.243+0200`.
        explode: true
        in: query
        name: dueBefore
        required: false
        schema:
          type: string
        style: form
      - description: |-
          Restrict to tasks that are due before the date described by the given expression.
          See the
          [user guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/expression-language/#internal-context-functions)
          for more information on available functions. The expression must evaluate to a
          `java.util.Date` or `org.joda.time.DateTime` object.
        explode: true
        in: query
        name: dueBeforeExpression
        required: false
        schema:
          type: string
        style: form
      - description: |-
          Restrict to tasks that have a followUp date on the given date. By
          [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date
          must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g.,
          `2013-01-23T14:42:45.342+0200`.
        explode: true
        in: query
        name: followUpDate
        required: false
        schema:
          type: string
        style: form
      - description: |-
          Restrict to tasks that have a followUp date on the date described by the given
          expression. See the
          [user guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/expression-language/#internal-context-functions)
          for more information on available functions. The expression must evaluate to a
          `java.util.Date` or `org.joda.time.DateTime` object.
        explode: true
        in: query
        name: followUpDateExpression
        required: false
        schema:
          type: string
        style: form
      - description: |-
          Restrict to tasks that have a followUp date after the given date. By
          [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the
          date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g.,
          `2013-01-23T14:42:45.542+0200`.
        explode: true
        in: query
        name: followUpAfter
        required: false
        schema:
          type: string
        style: form
      - description: |-
          Restrict to tasks that have a followUp date after the date described by the given
          expression. See the
          [user guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/expression-language/#internal-context-functions)
          for more information on available functions. The expression must evaluate to a
          `java.util.Date` or `org.joda.time.DateTime` object.
        explode: true
        in: query
        name: followUpAfterExpression
        required: false
        schema:
          type: string
        style: form
      - description: |-
          Restrict to tasks that have a followUp date before the given date. By
          [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the
          date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g.,
          `2013-01-23T14:42:45.234+0200`.
        explode: true
        in: query
        name: followUpBefore
        required: false
        schema:
          type: string
        style: form
      - description: |-
          Restrict to tasks that have a followUp date before the date described by the given
          expression. See the
          [user guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/expression-language/#internal-context-functions)
          for more information on available functions. The expression must evaluate to a
          `java.util.Date` or `org.joda.time.DateTime` object.
        explode: true
        in: query
        name: followUpBeforeExpression
        required: false
        schema:
          type: string
        style: form
      - description: |-
          Restrict to tasks that have no followUp date or a followUp date before the given date.
          By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the
          format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.432+0200`. The
          typical use case is to query all `active` tasks for a user for a given date.
        explode: true
        in: query
        name: followUpBeforeOrNotExistent
        required: false
        schema:
          type: string
        style: form
      - description: |-
          Restrict to tasks that have no followUp date or a followUp date before the date
          described by the given expression. See the
          [user guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/expression-language/#internal-context-functions)
          for more information on available functions. The expression must evaluate to a
          `java.util.Date` or `org.joda.time.DateTime` object.
        explode: true
        in: query
        name: followUpBeforeOrNotExistentExpression
        required: false
        schema:
          type: string
        style: form
      - description: |-
          Restrict to tasks that were created on the given date. By
          [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have
          the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.324+0200`.
        explode: true
        in: query
        name: createdOn
        required: false
        schema:
          type: string
        style: form
      - description: |-
          Restrict to tasks that were created on the date described by the given expression.
          See the
          [user guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/expression-language/#internal-context-functions)
          for more information on available functions. The expression must evaluate to a
          `java.util.Date` or `org.joda.time.DateTime` object.
        explode: true
        in: query
        name: createdOnExpression
        required: false
        schema:
          type: string
        style: form
      - description: |-
          Restrict to tasks that were created after the given date. By
          [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the
          format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.342+0200`.
        explode: true
        in: query
        name: createdAfter
        required: false
        schema:
          type: string
        style: form
      - description: |-
          Restrict to tasks that were created after the date described by the given expression.
          See the
          [user guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/expression-language/#internal-context-functions)
          for more information on available functions. The expression must evaluate to a
          `java.util.Date` or `org.joda.time.DateTime` object.
        explode: true
        in: query
        name: createdAfterExpression
        required: false
        schema:
          type: string
        style: form
      - description: |-
          Restrict to tasks that were created before the given date. By
          [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the
          format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.332+0200`.
        explode: true
        in: query
        name: createdBefore
        required: false
        schema:
          type: string
        style: form
      - description: |-
          Restrict to tasks that were created before the date described by the given expression.
          See the
          [user guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/expression-language/#internal-context-functions)
          for more information on available functions. The expression must evaluate to a
          `java.util.Date` or `org.joda.time.DateTime` object.
        explode: true
        in: query
        name: createdBeforeExpression
        required: false
        schema:
          type: string
        style: form
      - description: |-
          Restrict to tasks that are in the given delegation state. Valid values are
          `PENDING` and `RESOLVED`.
        explode: true
        in: query
        name: delegationState
        required: false
        schema:
          enum:
          - PENDING
          - RESOLVED
          type: string
        style: form
      - description: |-
          Restrict to tasks that are offered to any of the given candidate groups. Takes a
          comma-separated list of group names, so for example `developers,support,sales`.
        explode: true
        in: query
        name: candidateGroups
        required: false
        schema:
          type: string
        style: form
      - description: |-
          Restrict to tasks that are offered to any of the candidate groups described by the
          given expression. See the
          [user guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/expression-language/#internal-context-functions)
          for more information on available functions. The expression must evaluate to
          `java.util.List` of Strings.
        explode: true
        in: query
        name: candidateGroupsExpression
        required: false
        schema:
          type: string
        style: form
      - description: |-
          Only include tasks which have a candidate group. Value may only be `true`,
          as `false` is the default behavior.
        explode: true
        in: query
        name: withCandidateGroups
        required: false
        schema:
          default: false
          type: boolean
        style: form
      - description: |-
          Only include tasks which have no candidate group. Value may only be `true`,
          as `false` is the default behavior.
        explode: true
        in: query
        name: withoutCandidateGroups
        required: false
        schema:
          default: false
          type: boolean
        style: form
      - description: |-
          Only include tasks which have a candidate user. Value may only be `true`,
          as `false` is the default behavior.
        explode: true
        in: query
        name: withCandidateUsers
        required: false
        schema:
          default: false
          type: boolean
        style: form
      - description: |-
          Only include tasks which have no candidate users. Value may only be `true`,
          as `false` is the default behavior.
        explode: true
        in: query
        name: withoutCandidateUsers
        required: false
        schema:
          default: false
          type: boolean
        style: form
      - description: |-
          Only include active tasks. Value may only be `true`, as `false`
          is the default behavior.
        explode: true
        in: query
        name: active
        required: false
        schema:
          default: false
          type: boolean
        style: form
      - description: |-
          Only include suspended tasks. Value may only be `true`, as
          `false` is the default behavior.
        explode: true
        in: query
        name: suspended
        required: false
        schema:
          default: false
          type: boolean
        style: form
      - description: |-
          Only include tasks that have variables with certain values. Variable filtering
          expressions are comma-separated and are structured as follows:

          A valid parameter value has the form `key_operator_value`. `key` is the variable name,
          `operator` is the comparison operator to be used and `value` the variable value.

          **Note**: Values are always treated as String objects on server side.

          Valid `operator` values are:
          `eq` - equal to;
          `neq` - not equal to;
          `gt` - greater than;
          `gteq` - greater than or equal to;
          `lt` - lower than;
          `lteq` - lower than or equal to;
          `like`.
          `key` and `value` may not contain underscore or comma characters.
        explode: true
        in: query
        name: taskVariables
        required: false
        schema:
          type: string
        style: form
      - description: "Only include tasks that belong to process instances that have\
          \ variables with certain \nvalues. Variable filtering expressions are comma-separated\
          \ and are structured as\nfollows:\n\nA valid parameter value has the form\
          \ `key_operator_value`. `key` is the variable name,\n`operator` is the comparison\
          \ operator to be used and `value` the variable value.\n\n**Note**: Values\
          \ are always treated as String objects on server side.\n\nValid `operator`\
          \ values are:\n`eq` - equal to;\n`neq` - not equal to;\n`gt` - greater than;\n\
          `gteq` - greater than or equal to;\n`lt` - lower than;\n`lteq` - lower than\
          \ or equal to;\n`like`.\n`key` and `value` may not contain underscore or\
          \ comma characters."
        explode: true
        in: query
        name: processVariables
        required: false
        schema:
          type: string
        style: form
      - description: |-
          Only include tasks that belong to case instances that have variables with certain
          values. Variable filtering expressions are comma-separated and are structured as
          follows:

          A valid parameter value has the form `key_operator_value`. `key` is the variable name,
          `operator` is the comparison operator to be used and `value` the variable value.

          **Note**: Values are always treated as String objects on server side.

          Valid `operator` values are:
          `eq` - equal to;
          `neq` - not equal to;
          `gt` - greater than;
          `gteq` - greater than or equal to;
          `lt` - lower than;
          `lteq` - lower than or equal to;
          `like`.
          `key` and `value` may not contain underscore or comma characters.
        explode: true
        in: query
        name: caseInstanceVariables
        required: false
        schema:
          type: string
        style: form
      - description: |-
          Match all variable names in this query case-insensitively. If set
          `variableName` and `variablename` are treated as equal.
        explode: true
        in: query
        name: variableNamesIgnoreCase
        required: false
        schema:
          default: false
          type: boolean
        style: form
      - description: |-
          Match all variable values in this query case-insensitively. If set
          `variableValue` and `variablevalue` are treated as equal.
        explode: true
        in: query
        name: variableValuesIgnoreCase
        required: false
        schema:
          default: false
          type: boolean
        style: form
      - description: Restrict query to all tasks that are sub tasks of the given task.
          Takes a task id.
        explode: true
        in: query
        name: parentTaskId
        required: false
        schema:
          type: string
        style: form
      - description: |-
          Sort the results lexicographically by a given criterion.
          Must be used in conjunction with the sortOrder parameter.
        explode: true
        in: query
        name: sortBy
        required: false
        schema:
          enum:
          - instanceId
          - caseInstanceId
          - dueDate
          - executionId
          - caseExecutionId
          - assignee
          - created
          - description
          - id
          - name
          - nameCaseInsensitive
          - priority
          - processVariable
          - executionVariable
          - taskVariable
          - caseExecutionVariable
          - caseInstanceVariable
          type: string
        style: form
      - description: |-
          Sort the results in a given order. Values may be asc for ascending order or desc for descending order.
          Must be used in conjunction with the sortBy parameter.
        explode: true
        in: query
        name: sortOrder
        required: false
        schema:
          enum:
          - asc
          - desc
          type: string
        style: form
      - description: Pagination of results. Specifies the index of the first result
          to return.
        explode: true
        in: query
        name: firstResult
        required: false
        schema:
          type: integer
        style: form
      - description: |-
          Pagination of results. Specifies the maximum number of results to return.
          Will return less results if there are no more results left.
        explode: true
        in: query
        name: maxResults
        required: false
        schema:
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              examples:
                example-1:
                  description: Response for GET `/task?assignee=anAssignee&delegationState=RESOLVED&maxPriority=50`
                  summary: Status 200 response
                  value:
                  - id: anId
                    name: aName
                    assignee: anAssignee
                    created: 2013-01-23T13:42:42.657+0200
                    due: 2013-01-23T13:49:42.323+0200
                    'followUp:': 2013-01-23T13:44:42.987+0200
                    delegationState: RESOLVED
                    description: aDescription
                    executionId: anExecution
                    owner: anOwner
                    parentTaskId: aParentId
                    priority: 42
                    processDefinitionId: aProcDefId
                    processInstanceId: aProcInstId
                    caseDefinitionId: aCaseDefId
                    caseInstanceId: aCaseInstId
                    caseExecutionId: aCaseExecution
                    taskDefinitionKey: aTaskDefinitionKey
                    suspended: false
                    formKey: aFormKey
                    tenantId: aTenantId
              schema:
                items:
                  $ref: '#/components/schemas/TaskDto'
                type: array
          description: Request successful.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
          description: |-
            Returned if some of the query parameters are invalid, for example if a `sortOrder`
            parameter is supplied, but no `sortBy`, or if an invalid operator for variable
            comparison is used. See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
      tags:
      - Task
      x-accepts: application/json
    post:
      description: |-
        Queries for tasks that fulfill a given filter. This method is slightly more powerful
        than the [Get Tasks](https://docs.camunda.org/manual/7.14/reference/rest/task/get-query/) method because it
        allows filtering by multiple process or task variables of types `String`, `Number`
        or `Boolean`. The size of the result set can be retrieved by using the
        [Get Task Count (POST)](https://docs.camunda.org/manual/7.14/reference/rest/task/post-query-count/) method.

        **Security Consideration**:
        There are several parameters (such as `assigneeExpression`) for specifying an EL
        expression. These are disabled by default to prevent remote code execution. See the
        section on
        [security considerations for custom code](https://docs.camunda.org/manual/7.14/user-guide/process-engine/securing-custom-code/)
        in the user guide for details.
      operationId: queryTasks
      parameters:
      - description: Pagination of results. Specifies the index of the first result
          to return.
        explode: true
        in: query
        name: firstResult
        required: false
        schema:
          type: integer
        style: form
      - description: |-
          Pagination of results. Specifies the maximum number of results to return.
          Will return less results if there are no more results left.
        explode: true
        in: query
        name: maxResults
        required: false
        schema:
          type: integer
        style: form
      requestBody:
        content:
          application/json:
            examples:
              example-1:
                summary: POST `/task` Request Body 1
                value:
                  taskVariables:
                  - name: varName
                    value: varValue
                    operator: eq
                  - name: anotherVarName
                    value: 30
                    operator: neq
                  processInstanceBusinessKeyIn: aBusinessKey,anotherBusinessKey
                  assigneeIn: anAssignee,anotherAssignee
                  priority: 10
                  sorting:
                  - sortBy: dueDate
                    sortOrder: asc
                  - sortBy: processVariable
                    sortOrder: desc
                    parameters:
                      variable: orderId
                      type: String
              example-2:
                description: 'Logical query: assignee = "John Munda" AND (name = "Approve
                  Invoice" OR priority = 5) AND (suspended = false OR taskDefinitionKey
                  = "approveInvoice")'
                summary: POST `/task` Request Body 2
                value:
                  assignee: John Munda
                  orQueries:
                  - name: Approve Invoice
                    priority: 5
                  - suspended: false
                    taskDefinitionKey: approveInvoice
            schema:
              $ref: '#/components/schemas/TaskQueryDto'
      responses:
        "200":
          content:
            application/json:
              examples:
                example-1:
                  summary: Status 200 response 1
                  value:
                  - id: anId
                    name: aName
                    assignee: anAssignee
                    created: 2013-01-23T13:42:42.453+0200
                    due: 2013-01-23T13:49:42.342+0200
                    'followUp:': 2013-01-23T13:44:42.546+0200
                    delegationState: RESOLVED
                    description: aDescription
                    executionId: anExecution
                    owner: anOwner
                    parentTaskId: aParentId
                    priority: 10
                    processDefinitionId: aProcDefId
                    processInstanceId: aProcInstId
                    caseDefinitionId: aCaseDefId
                    caseInstanceId: aCaseInstId
                    caseExecutionId: aCaseExecution
                    taskDefinitionKey: aTaskDefinitionKey
                    suspended: false
                    formKey: aFormKey
                    tenantId: aTenantId
                example-2:
                  summary: Status 200 response 2
                  value:
                  - id: 349fffa8-6571-11e7-9a44-d6940f5ef88d
                    name: Approve Invoice
                    assignee: John Munda
                    created: 2017-07-10T15:10:54.670+0200
                    due: 2017-07-17T15:10:54.670+0200
                    followUp: null
                    delegationState: null
                    description: Approve the invoice (or not).
                    executionId: 349f8a5c-6571-11e7-9a44-d6940f5ef88d
                    owner: null
                    parentTaskId: null
                    priority: 50
                    processDefinitionId: invoice:1:2c8d8057-6571-11e7-9a44-d6940f5ef88d
                    processInstanceId: 349f8a5c-6571-11e7-9a44-d6940f5ef88d
                    taskDefinitionKey: approveInvoice
                    caseExecutionId: null
                    caseInstanceId: null
                    caseDefinitionId: null
                    suspended: false
                    formKey: embedded:app:develop/invoice-forms/approve-invoice.html
                    tenantId: null
              schema:
                items:
                  $ref: '#/components/schemas/TaskDto'
                type: array
          description: Request successful.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
          description: |-
            Returned if some of the query parameters are invalid, for example if a `sortOrder`
            parameter is supplied, but no `sortBy`, or if an invalid operator for variable
            comparison is used. See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
      tags:
      - Task
      x-contentType: application/json
      x-accepts: application/json
  /task/count:
    get:
      description: |-
        Retrieves the number of tasks that fulfill a provided filter. Corresponds to the size
        of the result set when using the [Get Tasks](https://docs.camunda.org/manual/7.14/reference/rest/task/) method.

        **Security Consideration:** There are several query parameters (such as
        assigneeExpression) for specifying an EL expression. These are disabled by default to
        prevent remote code execution. See the section on
        [security considerations](https://docs.camunda.org/manual/7.14/user-guide/process-engine/securing-custom-code/)
        for custom code in the user guide for details.
      operationId: getTasksCount
      parameters:
      - description: Restrict to tasks that belong to process instances with the given
          id.
        explode: true
        in: query
        name: processInstanceId
        required: false
        schema:
          type: string
        style: form
      - description: Restrict to tasks that belong to process instances with the given
          ids.
        explode: true
        in: query
        name: processInstanceIdIn
        required: false
        schema:
          type: string
        style: form
      - description: Restrict to tasks that belong to process instances with the given
          business key.
        explode: true
        in: query
        name: processInstanceBusinessKey
        required: false
        schema:
          type: string
        style: form
      - description: "Restrict to tasks that belong to process instances with the\
          \ given business key which \nis described by an expression. See the \n[user\
          \ guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/expression-language/#internal-context-functions)\n\
          for more information on available functions."
        explode: true
        in: query
        name: processInstanceBusinessKeyExpression
        required: false
        schema:
          type: string
        style: form
      - description: "Restrict to tasks that belong to process instances with one\
          \ of the give business keys. \nThe keys need to be in a comma-separated\
          \ list."
        explode: true
        in: query
        name: processInstanceBusinessKeyIn
        required: false
        schema:
          type: string
        style: form
      - description: "Restrict to tasks that have a process instance business key\
          \ that has the parameter \nvalue as a substring."
        explode: true
        in: query
        name: processInstanceBusinessKeyLike
        required: false
        schema:
          type: string
        style: form
      - description: "Restrict to tasks that have a process instance business key\
          \ that has the parameter \nvalue as a substring and is described by an expression.\
          \ See the\n[user guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/expression-language/#internal-context-functions)\
          \ \nfor more information on available functions."
        explode: true
        in: query
        name: processInstanceBusinessKeyLikeExpression
        required: false
        schema:
          type: string
        style: form
      - description: Restrict to tasks that belong to a process definition with the
          given id.
        explode: true
        in: query
        name: processDefinitionId
        required: false
        schema:
          type: string
        style: form
      - description: Restrict to tasks that belong to a process definition with the
          given key.
        explode: true
        in: query
        name: processDefinitionKey
        required: false
        schema:
          type: string
        style: form
      - description: "Restrict to tasks that belong to a process definition with one\
          \ of the given keys. The \nkeys need to be in a comma-separated list."
        explode: true
        in: query
        name: processDefinitionKeyIn
        required: false
        schema:
          type: string
        style: form
      - description: Restrict to tasks that belong to a process definition with the
          given name.
        explode: true
        in: query
        name: processDefinitionName
        required: false
        schema:
          type: string
        style: form
      - description: "Restrict to tasks that have a process definition name that has\
          \ the parameter value as \na substring."
        explode: true
        in: query
        name: processDefinitionNameLike
        required: false
        schema:
          type: string
        style: form
      - description: Restrict to tasks that belong to an execution with the given
          id.
        explode: true
        in: query
        name: executionId
        required: false
        schema:
          type: string
        style: form
      - description: Restrict to tasks that belong to case instances with the given
          id.
        explode: true
        in: query
        name: caseInstanceId
        required: false
        schema:
          type: string
        style: form
      - description: Restrict to tasks that belong to case instances with the given
          business key.
        explode: true
        in: query
        name: caseInstanceBusinessKey
        required: false
        schema:
          type: string
        style: form
      - description: "Restrict to tasks that have a case instance business key that\
          \ has the parameter value \nas a substring."
        explode: true
        in: query
        name: caseInstanceBusinessKeyLike
        required: false
        schema:
          type: string
        style: form
      - description: Restrict to tasks that belong to a case definition with the given
          id.
        explode: true
        in: query
        name: caseDefinitionId
        required: false
        schema:
          type: string
        style: form
      - description: Restrict to tasks that belong to a case definition with the given
          key.
        explode: true
        in: query
        name: caseDefinitionKey
        required: false
        schema:
          type: string
        style: form
      - description: Restrict to tasks that belong to a case definition with the given
          name.
        explode: true
        in: query
        name: caseDefinitionName
        required: false
        schema:
          type: string
        style: form
      - description: "Restrict to tasks that have a case definition name that has\
          \ the parameter value as a \nsubstring."
        explode: true
        in: query
        name: caseDefinitionNameLike
        required: false
        schema:
          type: string
        style: form
      - description: Restrict to tasks that belong to a case execution with the given
          id.
        explode: true
        in: query
        name: caseExecutionId
        required: false
        schema:
          type: string
        style: form
      - description: "Only include tasks which belong to one of the passed and comma-separated\
          \ activity \ninstance ids."
        explode: true
        in: query
        name: activityInstanceIdIn
        required: false
        schema:
          type: string
        style: form
      - description: "Only include tasks which belong to one of the passed and comma-separated\
          \ \ntenant ids."
        explode: true
        in: query
        name: tenantIdIn
        required: false
        schema:
          type: string
        style: form
      - description: "Only include tasks which belong to no tenant. Value may only\
          \ be `true`, \nas `false` is the default behavior."
        explode: true
        in: query
        name: withoutTenantId
        required: false
        schema:
          default: false
          type: boolean
        style: form
      - description: Restrict to tasks that the given user is assigned to.
        explode: true
        in: query
        name: assignee
        required: false
        schema:
          type: string
        style: form
      - description: "Restrict to tasks that the user described by the given expression\
          \ is assigned to. \nSee the \n[user guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/expression-language/#internal-context-functions)\
          \ \nfor more information on available functions."
        explode: true
        in: query
        name: assigneeExpression
        required: false
        schema:
          type: string
        style: form
      - description: "Restrict to tasks that have an assignee that has the parameter\
          \ \nvalue as a substring."
        explode: true
        in: query
        name: assigneeLike
        required: false
        schema:
          type: string
        style: form
      - description: "Restrict to tasks that have an assignee that has the parameter\
          \ value described by the \ngiven expression as a substring. See the \n[user\
          \ guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/expression-language/#internal-context-functions)\
          \ \nfor more information on available functions."
        explode: true
        in: query
        name: assigneeLikeExpression
        required: false
        schema:
          type: string
        style: form
      - description: "Only include tasks which are assigned to one of the passed and\
          \ \ncomma-separated user ids."
        explode: true
        in: query
        name: assigneeIn
        required: false
        schema:
          type: string
        style: form
      - description: Restrict to tasks that the given user owns.
        explode: true
        in: query
        name: owner
        required: false
        schema:
          type: string
        style: form
      - description: "Restrict to tasks that the user described by the given expression\
          \ owns. See the \n[user guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/expression-language/#internal-context-functions)\
          \ \nfor more information on available functions."
        explode: true
        in: query
        name: ownerExpression
        required: false
        schema:
          type: string
        style: form
      - description: Only include tasks that are offered to the given group.
        explode: true
        in: query
        name: candidateGroup
        required: false
        schema:
          type: string
        style: form
      - description: "Only include tasks that are offered to the group described by\
          \ the given expression. \nSee the \n[user guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/expression-language/#internal-context-functions)\
          \ \nfor more information on available functions."
        explode: true
        in: query
        name: candidateGroupExpression
        required: false
        schema:
          type: string
        style: form
      - description: Only include tasks that are offered to the given user or to one
          of his groups.
        explode: true
        in: query
        name: candidateUser
        required: false
        schema:
          type: string
        style: form
      - description: "Only include tasks that are offered to the user described by\
          \ the given expression. \nSee the \n[user guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/expression-language/#internal-context-functions)\
          \ \nfor more information on available functions."
        explode: true
        in: query
        name: candidateUserExpression
        required: false
        schema:
          type: string
        style: form
      - description: "Also include tasks that are assigned to users in candidate queries.\
          \ Default is to only \ninclude tasks that are not assigned to any user if\
          \ you query by candidate user or\ngroup(s)."
        explode: true
        in: query
        name: includeAssignedTasks
        required: false
        schema:
          default: false
          type: boolean
        style: form
      - description: "Only include tasks that the given user is involved in. A user\
          \ is involved in a task if \nan identity link exists between task and user\
          \ (e.g., the user is the assignee)."
        explode: true
        in: query
        name: involvedUser
        required: false
        schema:
          type: string
        style: form
      - description: |-
          Only include tasks that the user described by the given expression is involved in.
          A user is involved in a task if an identity link exists between task and user
          (e.g., the user is the assignee). See the
          [user guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/expression-language/#internal-context-functions)
          for more information on available functions.
        explode: true
        in: query
        name: involvedUserExpression
        required: false
        schema:
          type: string
        style: form
      - description: If set to `true`, restricts the query to all tasks that are assigned.
        explode: true
        in: query
        name: assigned
        required: false
        schema:
          default: false
          type: boolean
        style: form
      - description: If set to `true`, restricts the query to all tasks that are unassigned.
        explode: true
        in: query
        name: unassigned
        required: false
        schema:
          default: false
          type: boolean
        style: form
      - description: Restrict to tasks that have the given key.
        explode: true
        in: query
        name: taskDefinitionKey
        required: false
        schema:
          type: string
        style: form
      - description: |-
          Restrict to tasks that have one of the given keys. The keys need to be in a
          comma-separated list.
        explode: true
        in: query
        name: taskDefinitionKeyIn
        required: false
        schema:
          type: string
        style: form
      - description: Restrict to tasks that have a key that has the parameter value
          as a substring.
        explode: true
        in: query
        name: taskDefinitionKeyLike
        required: false
        schema:
          type: string
        style: form
      - description: Restrict to tasks that have the given name.
        explode: true
        in: query
        name: name
        required: false
        schema:
          type: string
        style: form
      - description: Restrict to tasks that do not have the given name.
        explode: true
        in: query
        name: nameNotEqual
        required: false
        schema:
          type: string
        style: form
      - description: Restrict to tasks that have a name with the given parameter value
          as substring.
        explode: true
        in: query
        name: nameLike
        required: false
        schema:
          type: string
        style: form
      - description: |-
          Restrict to tasks that do not have a name with the given parameter
          value as substring.
        explode: true
        in: query
        name: nameNotLike
        required: false
        schema:
          type: string
        style: form
      - description: Restrict to tasks that have the given description.
        explode: true
        in: query
        name: description
        required: false
        schema:
          type: string
        style: form
      - description: |-
          Restrict to tasks that have a description that has the parameter
          value as a substring.
        explode: true
        in: query
        name: descriptionLike
        required: false
        schema:
          type: string
        style: form
      - description: Restrict to tasks that have the given priority.
        explode: true
        in: query
        name: priority
        required: false
        schema:
          type: integer
        style: form
      - description: Restrict to tasks that have a lower or equal priority.
        explode: true
        in: query
        name: maxPriority
        required: false
        schema:
          type: integer
        style: form
      - description: Restrict to tasks that have a higher or equal priority.
        explode: true
        in: query
        name: minPriority
        required: false
        schema:
          type: integer
        style: form
      - description: |-
          Restrict to tasks that are due on the given date. By
          [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the
          format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g.,
          `2013-01-23T14:42:45.546+0200`.
        explode: true
        in: query
        name: dueDate
        required: false
        schema:
          type: string
        style: form
      - description: |-
          Restrict to tasks that are due on the date described by the given expression. See the
          [User Guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/expression-language/#internal-context-functions)
          for more information on available functions. The expression must evaluate to a
          `java.util.Date` or `org.joda.time.DateTime` object.
        explode: true
        in: query
        name: dueDateExpression
        required: false
        schema:
          type: string
        style: form
      - description: |-
          Restrict to tasks that are due after the given date. By
          [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have
          the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g.,
          `2013-01-23T14:42:45.435+0200`.
        explode: true
        in: query
        name: dueAfter
        required: false
        schema:
          type: string
        style: form
      - description: |-
          Restrict to tasks that are due after the date described by the given expression.
          See the
          [user guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/expression-language/#internal-context-functions)
          for more information on available functions. The expression must evaluate to a
          `java.util.Date` or `org.joda.time.DateTime` object.
        explode: true
        in: query
        name: dueAfterExpression
        required: false
        schema:
          type: string
        style: form
      - description: |-
          Restrict to tasks that are due before the given date. By
          [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have
          the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g.,
          `2013-01-23T14:42:45.243+0200`.
        explode: true
        in: query
        name: dueBefore
        required: false
        schema:
          type: string
        style: form
      - description: |-
          Restrict to tasks that are due before the date described by the given expression.
          See the
          [user guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/expression-language/#internal-context-functions)
          for more information on available functions. The expression must evaluate to a
          `java.util.Date` or `org.joda.time.DateTime` object.
        explode: true
        in: query
        name: dueBeforeExpression
        required: false
        schema:
          type: string
        style: form
      - description: |-
          Restrict to tasks that have a followUp date on the given date. By
          [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date
          must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g.,
          `2013-01-23T14:42:45.342+0200`.
        explode: true
        in: query
        name: followUpDate
        required: false
        schema:
          type: string
        style: form
      - description: |-
          Restrict to tasks that have a followUp date on the date described by the given
          expression. See the
          [user guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/expression-language/#internal-context-functions)
          for more information on available functions. The expression must evaluate to a
          `java.util.Date` or `org.joda.time.DateTime` object.
        explode: true
        in: query
        name: followUpDateExpression
        required: false
        schema:
          type: string
        style: form
      - description: |-
          Restrict to tasks that have a followUp date after the given date. By
          [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the
          date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g.,
          `2013-01-23T14:42:45.542+0200`.
        explode: true
        in: query
        name: followUpAfter
        required: false
        schema:
          type: string
        style: form
      - description: |-
          Restrict to tasks that have a followUp date after the date described by the given
          expression. See the
          [user guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/expression-language/#internal-context-functions)
          for more information on available functions. The expression must evaluate to a
          `java.util.Date` or `org.joda.time.DateTime` object.
        explode: true
        in: query
        name: followUpAfterExpression
        required: false
        schema:
          type: string
        style: form
      - description: |-
          Restrict to tasks that have a followUp date before the given date. By
          [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the
          date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g.,
          `2013-01-23T14:42:45.234+0200`.
        explode: true
        in: query
        name: followUpBefore
        required: false
        schema:
          type: string
        style: form
      - description: |-
          Restrict to tasks that have a followUp date before the date described by the given
          expression. See the
          [user guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/expression-language/#internal-context-functions)
          for more information on available functions. The expression must evaluate to a
          `java.util.Date` or `org.joda.time.DateTime` object.
        explode: true
        in: query
        name: followUpBeforeExpression
        required: false
        schema:
          type: string
        style: form
      - description: |-
          Restrict to tasks that have no followUp date or a followUp date before the given date.
          By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the
          format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.432+0200`. The
          typical use case is to query all `active` tasks for a user for a given date.
        explode: true
        in: query
        name: followUpBeforeOrNotExistent
        required: false
        schema:
          type: string
        style: form
      - description: |-
          Restrict to tasks that have no followUp date or a followUp date before the date
          described by the given expression. See the
          [user guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/expression-language/#internal-context-functions)
          for more information on available functions. The expression must evaluate to a
          `java.util.Date` or `org.joda.time.DateTime` object.
        explode: true
        in: query
        name: followUpBeforeOrNotExistentExpression
        required: false
        schema:
          type: string
        style: form
      - description: |-
          Restrict to tasks that were created on the given date. By
          [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have
          the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.324+0200`.
        explode: true
        in: query
        name: createdOn
        required: false
        schema:
          type: string
        style: form
      - description: |-
          Restrict to tasks that were created on the date described by the given expression.
          See the
          [user guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/expression-language/#internal-context-functions)
          for more information on available functions. The expression must evaluate to a
          `java.util.Date` or `org.joda.time.DateTime` object.
        explode: true
        in: query
        name: createdOnExpression
        required: false
        schema:
          type: string
        style: form
      - description: |-
          Restrict to tasks that were created after the given date. By
          [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the
          format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.342+0200`.
        explode: true
        in: query
        name: createdAfter
        required: false
        schema:
          type: string
        style: form
      - description: |-
          Restrict to tasks that were created after the date described by the given expression.
          See the
          [user guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/expression-language/#internal-context-functions)
          for more information on available functions. The expression must evaluate to a
          `java.util.Date` or `org.joda.time.DateTime` object.
        explode: true
        in: query
        name: createdAfterExpression
        required: false
        schema:
          type: string
        style: form
      - description: |-
          Restrict to tasks that were created before the given date. By
          [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the
          format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.332+0200`.
        explode: true
        in: query
        name: createdBefore
        required: false
        schema:
          type: string
        style: form
      - description: |-
          Restrict to tasks that were created before the date described by the given expression.
          See the
          [user guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/expression-language/#internal-context-functions)
          for more information on available functions. The expression must evaluate to a
          `java.util.Date` or `org.joda.time.DateTime` object.
        explode: true
        in: query
        name: createdBeforeExpression
        required: false
        schema:
          type: string
        style: form
      - description: |-
          Restrict to tasks that are in the given delegation state. Valid values are
          `PENDING` and `RESOLVED`.
        explode: true
        in: query
        name: delegationState
        required: false
        schema:
          enum:
          - PENDING
          - RESOLVED
          type: string
        style: form
      - description: |-
          Restrict to tasks that are offered to any of the given candidate groups. Takes a
          comma-separated list of group names, so for example `developers,support,sales`.
        explode: true
        in: query
        name: candidateGroups
        required: false
        schema:
          type: string
        style: form
      - description: |-
          Restrict to tasks that are offered to any of the candidate groups described by the
          given expression. See the
          [user guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/expression-language/#internal-context-functions)
          for more information on available functions. The expression must evaluate to
          `java.util.List` of Strings.
        explode: true
        in: query
        name: candidateGroupsExpression
        required: false
        schema:
          type: string
        style: form
      - description: |-
          Only include tasks which have a candidate group. Value may only be `true`,
          as `false` is the default behavior.
        explode: true
        in: query
        name: withCandidateGroups
        required: false
        schema:
          default: false
          type: boolean
        style: form
      - description: |-
          Only include tasks which have no candidate group. Value may only be `true`,
          as `false` is the default behavior.
        explode: true
        in: query
        name: withoutCandidateGroups
        required: false
        schema:
          default: false
          type: boolean
        style: form
      - description: |-
          Only include tasks which have a candidate user. Value may only be `true`,
          as `false` is the default behavior.
        explode: true
        in: query
        name: withCandidateUsers
        required: false
        schema:
          default: false
          type: boolean
        style: form
      - description: |-
          Only include tasks which have no candidate users. Value may only be `true`,
          as `false` is the default behavior.
        explode: true
        in: query
        name: withoutCandidateUsers
        required: false
        schema:
          default: false
          type: boolean
        style: form
      - description: |-
          Only include active tasks. Value may only be `true`, as `false`
          is the default behavior.
        explode: true
        in: query
        name: active
        required: false
        schema:
          default: false
          type: boolean
        style: form
      - description: |-
          Only include suspended tasks. Value may only be `true`, as
          `false` is the default behavior.
        explode: true
        in: query
        name: suspended
        required: false
        schema:
          default: false
          type: boolean
        style: form
      - description: |-
          Only include tasks that have variables with certain values. Variable filtering
          expressions are comma-separated and are structured as follows:

          A valid parameter value has the form `key_operator_value`. `key` is the variable name,
          `operator` is the comparison operator to be used and `value` the variable value.

          **Note**: Values are always treated as String objects on server side.

          Valid `operator` values are:
          `eq` - equal to;
          `neq` - not equal to;
          `gt` - greater than;
          `gteq` - greater than or equal to;
          `lt` - lower than;
          `lteq` - lower than or equal to;
          `like`.
          `key` and `value` may not contain underscore or comma characters.
        explode: true
        in: query
        name: taskVariables
        required: false
        schema:
          type: string
        style: form
      - description: "Only include tasks that belong to process instances that have\
          \ variables with certain \nvalues. Variable filtering expressions are comma-separated\
          \ and are structured as\nfollows:\n\nA valid parameter value has the form\
          \ `key_operator_value`. `key` is the variable name,\n`operator` is the comparison\
          \ operator to be used and `value` the variable value.\n\n**Note**: Values\
          \ are always treated as String objects on server side.\n\nValid `operator`\
          \ values are:\n`eq` - equal to;\n`neq` - not equal to;\n`gt` - greater than;\n\
          `gteq` - greater than or equal to;\n`lt` - lower than;\n`lteq` - lower than\
          \ or equal to;\n`like`.\n`key` and `value` may not contain underscore or\
          \ comma characters."
        explode: true
        in: query
        name: processVariables
        required: false
        schema:
          type: string
        style: form
      - description: |-
          Only include tasks that belong to case instances that have variables with certain
          values. Variable filtering expressions are comma-separated and are structured as
          follows:

          A valid parameter value has the form `key_operator_value`. `key` is the variable name,
          `operator` is the comparison operator to be used and `value` the variable value.

          **Note**: Values are always treated as String objects on server side.

          Valid `operator` values are:
          `eq` - equal to;
          `neq` - not equal to;
          `gt` - greater than;
          `gteq` - greater than or equal to;
          `lt` - lower than;
          `lteq` - lower than or equal to;
          `like`.
          `key` and `value` may not contain underscore or comma characters.
        explode: true
        in: query
        name: caseInstanceVariables
        required: false
        schema:
          type: string
        style: form
      - description: |-
          Match all variable names in this query case-insensitively. If set
          `variableName` and `variablename` are treated as equal.
        explode: true
        in: query
        name: variableNamesIgnoreCase
        required: false
        schema:
          default: false
          type: boolean
        style: form
      - description: |-
          Match all variable values in this query case-insensitively. If set
          `variableValue` and `variablevalue` are treated as equal.
        explode: true
        in: query
        name: variableValuesIgnoreCase
        required: false
        schema:
          default: false
          type: boolean
        style: form
      - description: Restrict query to all tasks that are sub tasks of the given task.
          Takes a task id.
        explode: true
        in: query
        name: parentTaskId
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              examples:
                example-1:
                  summary: Status 200 response
                  value:
                    count: 1
              schema:
                $ref: '#/components/schemas/CountResultDto'
          description: Request successful.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
          description: |-
            Returned if some of the query parameters are invalid. See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
      tags:
      - Task
      x-accepts: application/json
    post:
      description: |-
        Retrieves the number of tasks that fulfill the given filter. Corresponds to the size
        of the result set of the [Get Tasks (POST)](https://docs.camunda.org/manual/7.14/reference/rest/task/post-query/)
        method and takes the same parameters.

        **Security Consideration**:
        There are several parameters (such as `assigneeExpression`) for specifying an EL
        expression. These are disabled by default to prevent remote code execution. See the
        section on
        [security considerations for custom code](https://docs.camunda.org/manual/7.14/user-guide/process-engine/securing-custom-code/)
        in the user guide for details.
      operationId: queryTasksCount
      requestBody:
        content:
          application/json:
            examples:
              example-1:
                summary: POST `/task` Request Body 1
                value:
                  taskVariables:
                  - name: varName
                    value: varValue
                    operator: eq
                  - name: anotherVarName
                    value: 30
                    operator: neq
                  processInstanceBusinessKeyIn: aBusinessKey,anotherBusinessKey
                  assigneeIn: anAssignee,anotherAssignee
                  priority: 10
                  sorting:
                  - sortBy: dueDate
                    sortOrder: asc
                  - sortBy: processVariable
                    sortOrder: desc
                    parameters:
                      variable: orderId
                      type: String
              example-2:
                description: 'Logical query: assignee = "John Munda" AND (name = "Approve
                  Invoice" OR priority = 5) AND (suspended = false OR taskDefinitionKey
                  = "approveInvoice")'
                summary: POST `/task` Request Body 2
                value:
                  assignee: John Munda
                  orQueries:
                  - name: Approve Invoice
                    priority: 5
                  - suspended: false
                    taskDefinitionKey: approveInvoice
            schema:
              $ref: '#/components/schemas/TaskQueryDto'
      responses:
        "200":
          content:
            application/json:
              examples:
                example-1:
                  summary: Status 200 response
                  value:
                    count: 1
              schema:
                $ref: '#/components/schemas/CountResultDto'
          description: Request successful.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
          description: |-
            Returned if some of the query parameters are invalid. See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
      tags:
      - Task
      x-contentType: application/json
      x-accepts: application/json
  /task/create:
    post:
      description: Creates a new task.
      operationId: createTask
      requestBody:
        content:
          application/json:
            examples:
              example-1:
                summary: POST /task/create
                value:
                  id: aTaskId
                  name: My Task
                  description: This have to be done very urgent
                  priority: 30
                  assignee: peter
                  owner: mary
                  delegationState: PENDING
                  due: 2014-08-30T10:00:00.000+0200
                  followUp: 2014-08-25T10:00:00.000+0200
                  parentTaskId: aParentTaskId
                  caseInstanceId: aCaseInstanceId
                  tenantId: null
            schema:
              $ref: '#/components/schemas/TaskDto'
      responses:
        "204":
          description: Request successful.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
          description: |-
            Returned if a not valid `delegationState` is supplied. See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
      tags:
      - Task
      x-contentType: application/json
      x-accepts: application/json
  /task/{id}:
    delete:
      description: Removes a task by id.
      operationId: deleteTask
      parameters:
      - description: The id of the task to be removed.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: Request successful.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
          description: |-
            Bad Request. The Task with the given id does not exist. See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling) for the error response format.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
          description: |-
            The Task with the given id cannot be deleted because it is part of a running process or case instance.
            See the [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling) for
            the error response format.
      tags:
      - Task
      x-accepts: application/json
    get:
      description: Retrieves a task by id.
      operationId: getTask
      parameters:
      - description: The id of the task to be retrieved.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              examples:
                example-1:
                  summary: GET /task/anId Response
                  value:
                    id: anId
                    name: aName
                    assignee: anAssignee
                    created: 2013-01-23T13:42:42.000+0200
                    due: 2013-01-23T13:49:42.576+0200
                    followUp: 2013-01-23T13:44:42.437+0200
                    delegationState: RESOLVED
                    description: aDescription
                    executionId: anExecution
                    owner: anOwner
                    parentTaskId: aParentId
                    priority: 42
                    processDefinitionId: aProcDefId
                    processInstanceId: aProcInstId
                    caseDefinitionId: aCaseDefId
                    caseInstanceId: aCaseInstId
                    caseExecutionId: aCaseExecution
                    taskDefinitionKey: aTaskDefinitionKey
                    suspended: false
                    formKey: aFormKey
                    tenantId: aTenantId
              schema:
                $ref: '#/components/schemas/TaskDto'
          description: Request successful.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
          description: |-
            Task with given id does not exist. See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
      tags:
      - Task
      x-accepts: application/json
    put:
      description: Updates a task.
      operationId: updateTask
      parameters:
      - description: The id of the task to be updated.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            examples:
              example-1:
                summary: PUT /task/aTaskId/ Response
                value:
                  name: My Task
                  description: This have to be done very urgent
                  priority: 30
                  assignee: peter
                  owner: mary
                  delegationState: PENDING
                  due: 2014-08-30T10:00:00.000+0200
                  followUp: 2014-08-25T10:00:00.000+0200
                  parentTaskId: aParentTaskId
                  caseInstanceId: aCaseInstanceId
                  tenantId: tenantId
            schema:
              $ref: '#/components/schemas/TaskDto'
      responses:
        "204":
          description: Request successful.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
          description: |-
            Returned if a not valid `delegationState` is supplied. See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
          description: If the corresponding task cannot be found.
      tags:
      - Task
      x-contentType: application/json
      x-accepts: application/json
  /task/{id}/assignee:
    post:
      description: |-
        Changes the assignee of a task to a specific user.

        **Note:** The difference with the [Claim Task](https://docs.camunda.org/manual/7.14/reference/rest/task/post-claim/)
        method is that this method does not check if the task already has a user
        assigned to it.
      operationId: setAssignee
      parameters:
      - description: The id of the task to set the assignee for.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            examples:
              example-1:
                description: POST `/task/anId/assignee`
                summary: Request Body
                value:
                  userId: aUserId
            schema:
              $ref: '#/components/schemas/UserIdDto'
        description: Provide the id of the user that will be the assignee of the task.
      responses:
        "204":
          description: Request successful.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
          description: |-
            Task with given id does not exist or setting the assignee was not successful.
            See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
      tags:
      - Task
      x-contentType: application/json
      x-accepts: application/json
  /task/{id}/attachment:
    get:
      description: Gets the attachments for a task.
      operationId: getAttachments
      parameters:
      - description: The id of the task to retrieve the attachments for.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              examples:
                example-1:
                  summary: GET /task/aTaskId/attachment
                  value:
                  - id: attachmentId
                    name: attachmentName
                    taskId: aTaskId
                    description: attachmentDescription
                    type: attachmentType
                    url: http://my-attachment-content-url.de
                    createTime: 2017-02-10T14:33:19.000+0200
                    removalTime: 2018-02-10T14:33:19.000+0200
                    rootProcessInstanceId: aRootProcessInstanceId
                  - id: anotherAttachmentId
                    name: anotherAttachmentName
                    taskId: aTaskId
                    description: anotherAttachmentDescription
                    type: anotherAttachmentType
                    url: http://my-another-attachment-content-url.de
                    createTime: 2017-02-10T14:33:19.000+0200
                    removalTime: 2018-02-10T14:33:19.000+0200
                    rootProcessInstanceId: aRootProcessInstanceId
                  - id: yetAnotherAttachmentId
                    name: yetAnotherAttachmentName
                    taskId: aTaskId
                    description: yetAnotherAttachmentDescription
                    type: yetAnotherAttachmentType
                    url: http://yet-another-attachment-content-url.de
                    createTime: 2017-02-10T14:33:19.000+0200
                    removalTime: 2018-02-10T14:33:19.000+0200
                    rootProcessInstanceId: aRootProcessInstanceId
              schema:
                items:
                  $ref: '#/components/schemas/AttachmentDto'
                type: array
          description: Request successful.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
          description: |-
            No task exists for the given task id. See the [Introduction](/reference/rest/overview/#error-handling)
            for the error response format.
      tags:
      - Task Attachment
      x-accepts: application/json
  /task/{id}/attachment/create:
    post:
      description: Creates an attachment for a task.
      operationId: addAttachment
      parameters:
      - description: The id of the task to add the attachment to.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          multipart/form-data:
            examples:
              example-1:
                description: Post data for a new task attachment.
                summary: POST /task/aTaskId/attachment/create
                value: |-
                  ------------------------------925df49a954b
                                          Content-Disposition: form-data; name="url"

                                          http://my-attachment-content-url.de
                                          ------------------------------925df49a954b
                                          Content-Disposition: form-data; name="attachment-name"

                                          attachmentName
                                          ------------------------------925df49a954b
                                          Content-Disposition: form-data; name="attachment-description"

                                          attachmentDescription
                                          ------------------------------925df49a954b
                                          Content-Disposition: form-data; name="attachment-type"

                                          attachmentType
                                          ------------------------------925df49a954b--
            schema:
              $ref: '#/components/schemas/MultiFormAttachmentDto'
      responses:
        "200":
          content:
            application/json:
              examples:
                example-1:
                  summary: Status 200 Response
                  value:
                    id: attachmentId
                    name: attachmentName
                    taskId: aTaskId
                    description: attachmentDescription
                    type: attachmentType
                    url: http://my-attachment-content-url.de
                    createTime: 2017-02-10T14:33:19.000+0200
                    removalTime: 2018-02-10T14:33:19.000+0200
                    rootProcessInstanceId: aRootProcessInstanceId
                    links:
                    - method: GET
                      href: http://localhost:38080/rest-test/task/aTaskId/attachment/aTaskAttachmentId
                      rel: self
              schema:
                $ref: '#/components/schemas/AttachmentDto'
          description: Request successful.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
          description: |-
            The task does not exists or task id is null. No content or url to remote content exists. See the
            [Introduction](/reference/rest/overview/#error-handling) for the error response format.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthorizationExceptionDto'
          description: |-
            The history of the engine is disabled. See the [Introduction](/reference/rest/overview/#error-handling)
            for the error response format.
      tags:
      - Task Attachment
      x-contentType: multipart/form-data
      x-accepts: application/json
  /task/{id}/attachment/{attachmentId}:
    delete:
      description: Removes an attachment from a task by id.
      operationId: deleteAttachment
      parameters:
      - description: The id of the task.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - description: The id of the attachment to be removed.
        explode: false
        in: path
        name: attachmentId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: Request successful.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthorizationExceptionDto'
          description: |-
            The history of the engine is disabled. See the [Introduction](/reference/rest/overview/#error-handling)
            for the error response format.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
          description: |-
            A Task Attachment for the given task id and attachment id does not exist. See the
            [Introduction](/reference/rest/overview/#error-handling)
            for the error response format.
      tags:
      - Task Attachment
      x-accepts: application/json
    get:
      description: Retrieves a task attachment by task id and attachment id.
      operationId: getAttachment
      parameters:
      - description: The id of the task.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - description: The id of the attachment to be retrieved.
        explode: false
        in: path
        name: attachmentId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              examples:
                example-1:
                  summary: GET /task/aTaskId/attachment/aTaskAttachmentId
                  value:
                    id: attachmentId
                    name: attachmentName
                    taskId: aTaskId
                    description: attachmentDescription
                    type: attachmentType
                    url: http://my-attachment-content-url.de
                    createTime: 2017-02-10T14:33:19.000+0200
                    removalTime: 2018-02-10T14:33:19.000+0200
                    rootProcessInstanceId: aRootProcessInstanceId
                    links:
                    - method: GET
                      href: http://localhost:38080/rest-test/task/aTaskId/attachment/aTaskAttachmentId
                      rel: self
              schema:
                $ref: '#/components/schemas/AttachmentDto'
          description: Request successful.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
          description: |-
            The attachment for the given task and attachment id does not exist or the history of the engine is
            disabled.

            See the [Introduction](/reference/rest/overview/#error-handling) for the error response format.
      tags:
      - Task Attachment
      x-accepts: application/json
  /task/{id}/attachment/{attachmentId}/data:
    get:
      description: Retrieves the binary content of a task attachment by task id and
        attachment id.
      operationId: getAttachmentData
      parameters:
      - description: The id of the task.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - description: The id of the attachment to be retrieved.
        explode: false
        in: path
        name: attachmentId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/octet-stream:
              schema:
                description: For files without any MIME type information, a byte stream
                  is returned.
                format: binary
                type: string
            text/plain:
              schema:
                description: |-
                  Files with MIME type information are returned as the saved type. Additionally, for file
                                              responses, the Content-Disposition header will be set.
                format: binary
                type: string
          description: Request successful.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
          description: |-
            The attachment content for the given task id and attachment id does not exist, or the history of the
            engine is disabled.

            See the [Introduction](/reference/rest/overview/#error-handling) for the error response format.
      tags:
      - Task Attachment
      x-accepts: application/json
  /task/{id}/bpmnError:
    post:
      description: |-
        Reports a business error in the context of a running task by id. The error code must
        be specified to identify the BPMN error handler. See the documentation for
        [Reporting Bpmn Error](https://docs.camunda.org/manual/7.14/reference/bpmn20/tasks/user-task/#reporting-bpmn-error)
        in User Tasks.
      operationId: handleBpmnError
      parameters:
      - description: The id of the task a BPMN error is reported for.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            examples:
              example-1:
                description: POST `/task/aTaskId/bpmnError`
                summary: Request Body
                value:
                  errorCode: bpmn-error-543
                  errorMessage: anErrorMessage
                  variables:
                    aVariable:
                      value: aStringValue
                      type: String
                    anotherVariable:
                      value: true
                      type: Boolean
            schema:
              $ref: '#/components/schemas/TaskBpmnErrorDto'
      responses:
        "204":
          description: Request successful.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthorizationExceptionDto'
          description: |-
            If the authenticated user is unauthorized to update the process instance. See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
          description: |-
            Returned if the task does not exist or <code>errorCode</code> is not presented in
            the request. See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
      tags:
      - Task
      x-contentType: application/json
      x-accepts: application/json
  /task/{id}/bpmnEscalation:
    post:
      description: |-
        Reports an escalation in the context of a running task by id. The escalation code must
        be specified to identify the escalation handler. See the documentation for
        [Reporting Bpmn Escalation](https://docs.camunda.org/manual/7.14/reference/bpmn20/tasks/user-task/#reporting-bpmn-escalation)
        in User Tasks.
      operationId: handleEscalation
      parameters:
      - description: The id of the task in which context a BPMN escalation is reported.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            examples:
              example-1:
                description: POST `/task/aTaskId/bpmnEscalation`
                summary: Request Body
                value:
                  escalationCode: bpmn-escalation-432
                  variables:
                    aVariable:
                      value: aStringValue
                      type: String
                    anotherVariable:
                      value: true
                      type: Boolean
            schema:
              $ref: '#/components/schemas/TaskEscalationDto'
      responses:
        "204":
          description: Request successful.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthorizationExceptionDto'
          description: |-
            If the authenticated user is unauthorized to update the process instance. See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
          description: |-
            Returned if the task does not exist or <code>errorCode</code> is not presented in
            the request. See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
      tags:
      - Task
      x-contentType: application/json
      x-accepts: application/json
  /task/{id}/claim:
    post:
      description: |-
        Claims a task for a specific user.

        **Note:** The difference with the
        [Set Assignee](https://docs.camunda.org/manual/7.14/reference/rest/task/post-assignee/)
        method is that here a check is performed to see if the task already has a user
        assigned to it.
      operationId: claim
      parameters:
      - description: The id of the task to claim.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            examples:
              example-1:
                description: POST `/task/anId/claim`
                summary: Request Body
                value:
                  userId: aUserId
            schema:
              $ref: '#/components/schemas/UserIdDto'
        description: Provide the id of the user that claims the task.
      responses:
        "204":
          description: Request successful.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
          description: |-
            Task with given id does not exist or claiming was not successful. See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
      tags:
      - Task
      x-contentType: application/json
      x-accepts: application/json
  /task/{id}/comment:
    get:
      description: Gets the comments for a task by id.
      operationId: getComments
      parameters:
      - description: The id of the task to retrieve the comments for.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              examples:
                example-1:
                  summary: GET /task/aTaskId/comment
                  value:
                  - id: commentId
                    userId: userId
                    taskId: aTaskId
                    time: 2013-01-02T21:37:03.764+0200
                    message: message
                    removalTime: 2018-02-10T14:33:19.000+0200
                    rootProcessInstanceId: aRootProcessInstanceId
                  - id: anotherCommentId
                    userId: anotherUserId
                    taskId: aTaskId
                    time: 2013-02-23T20:37:43.975+0200
                    message: anotherMessage
                    removalTime: 2018-02-10T14:33:19.000+0200
                    rootProcessInstanceId: aRootProcessInstanceId
                  - id: yetAnotherCommentId
                    userId: yetAnotherUserId
                    taskId: aTaskId
                    time: 2013-04-21T10:15:23.764+0200
                    message: yetAnotherMessage
                    removalTime: 2018-02-10T14:33:19.000+0200
                    rootProcessInstanceId: aRootProcessInstanceId
              schema:
                items:
                  $ref: '#/components/schemas/CommentDto'
                type: array
          description: Request successful.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
          description: |-
            No task exists for the given task id. See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
      tags:
      - Task Comment
      x-accepts: application/json
  /task/{id}/comment/create:
    post:
      description: Creates a comment for a task by id.
      operationId: createComment
      parameters:
      - description: The id of the task to add the comment to.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            examples:
              example-1:
                summary: POST /task/aTaskId/comment/create
                value:
                  message: a task comment
            schema:
              $ref: '#/components/schemas/CommentDto'
        description: '**Note:** Only the `message` property will be used. Every other
          property passed to this endpoint will be ignored.'
      responses:
        "200":
          content:
            application/json:
              examples:
                example-1:
                  summary: Status 200 Response
                  value:
                    links:
                    - method: GET
                      href: http://localhost:38080/rest-test/task/aTaskId/comment/aTaskCommentId
                      rel: self
                    id: aTaskCommentId
                    userId: userId
                    taskId: aTaskId
                    time: 2013-01-02T21:37:03.887+0200
                    message: comment message
                    removalTime: 2018-02-10T14:33:19.000+0200
                    rootProcessInstanceId: aRootProcessInstanceId
              schema:
                $ref: '#/components/schemas/CommentDto'
          description: Request successful.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
          description: |-
            The task does not exist or no comment message was submitted. See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthorizationExceptionDto'
          description: |-
            The history of the engine is disabled. See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
      tags:
      - Task Comment
      x-contentType: application/json
      x-accepts: application/json
  /task/{id}/comment/{commentId}:
    get:
      description: Retrieves a task comment by task id and comment id.
      operationId: getComment
      parameters:
      - description: The id of the task.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - description: The id of the comment to be retrieved.
        explode: false
        in: path
        name: commentId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              examples:
                example-1:
                  summary: GET /task/aTaskId/comment
                  value:
                    id: aTaskCommentId
                    userId: userId
                    taskId: aTaskId
                    time: 2013-01-02T21:37:03.664+0200
                    message: comment content
                    removalTime: 2018-02-10T14:33:19.000+0200
                    rootProcessInstanceId: aRootProcessInstanceId
              schema:
                $ref: '#/components/schemas/CommentDto'
          description: Request successful.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
          description: |-
            The task or comment with given task and comment id does not exist, or the history of
            the engine is disabled. See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
      tags:
      - Task Comment
      x-accepts: application/json
  /task/{id}/complete:
    post:
      description: Completes a task and updates process variables.
      operationId: complete
      parameters:
      - description: The id of the task to complete.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            examples:
              example-1:
                description: Complete Task with variables in return
                summary: POST `/task/anId/complete`
                value:
                  variables:
                    aVariable:
                      value: aStringValue
                    anotherVariable:
                      value: 42
                    aThirdVariable:
                      value: true
                  withVariablesInReturn: true
              example-2:
                description: Complete Task without variables in return
                summary: POST `/task/anId/complete`
                value:
                  variables:
                    aVariable:
                      value: aStringValue
                    anotherVariable:
                      value: 42
                    aThirdVariable:
                      value: true
            schema:
              $ref: '#/components/schemas/CompleteTaskDto'
      responses:
        "200":
          content:
            application/json:
              examples:
                example-1:
                  description: Response Body
                  summary: POST `/task/anId/complete`
                  value:
                    variables:
                      aVariable:
                        value: aStringValue
                      anotherVariable:
                        value: 42
                      aThirdVariable:
                        value: true
              schema:
                additionalProperties:
                  $ref: '#/components/schemas/VariableValueDto'
                type: object
          description: Request successful. The response contains the process variables.
        "204":
          description: Request successful. The response contains no variables.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
          description: |-
            The variable value or type is invalid, for example if the value could not be parsed
            to an Integer value or the passed variable type is not supported. See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
          description: |-
            If the task does not exist or the corresponding process instance could not be
            resumed successfully. See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
      tags:
      - Task
      x-contentType: application/json
      x-accepts: application/json
  /task/{id}/delegate:
    post:
      description: Delegates a task to another user.
      operationId: delegateTask
      parameters:
      - description: The id of the task to delegate.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            examples:
              example-1:
                description: POST `/task/anId/delegate`
                summary: Request Body
                value:
                  userId: aUserId
            schema:
              $ref: '#/components/schemas/UserIdDto'
        description: Provide the id of the user that the task should be delegated
          to.
      responses:
        "204":
          description: Request successful.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
          description: |-
            If the task does not exist or delegation was not successful. See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
      tags:
      - Task
      x-contentType: application/json
      x-accepts: application/json
  /task/{id}/deployed-form:
    get:
      description: |-
        Retrieves the deployed form that is referenced from a given task. For further
        information please refer to the
        [User Guide](https://docs.camunda.org/manual/7.14/user-guide/task-forms/#embedded-task-forms).
      operationId: getDeployedForm
      parameters:
      - description: The id of the task to get the deployed form for.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/xhtml+xml:
              examples:
                example-1:
                  description: Resonse for GET `/task/taskId/deployed-form`
                  summary: Status 200 Response
                  value: |-
                    <form role="form" name="invoiceForm"
                                                          class="form-horizontal">

                                                      <div class="form-group">
                                                        <label class="control-label col-md-4"
                                                               for="creditor">Creditor</label>
                                                        <div class="col-md-8">
                                                          <input cam-variable-name="creditor"
                                                                 cam-variable-type="String"
                                                                 id="creditor"
                                                                 class="form-control"
                                                                 type="text"
                                                                 required />
                                                          <div class="help">
                                                            (e.g. &quot;Great Pizza for Everyone Inc.&quot;)
                                                          </div>
                                                        </div>
                                                      </div>

                                                    </form>
              schema:
                description: For `application/xhtml+xml` Responses, a byte stream
                  is returned.
                format: binary
                type: string
          description: Request successful.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
          description: |-
            The form key has wrong format. See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthorizationExceptionDto'
          description: |-
            The deployed form cannot be retrieved due to missing permissions on task resource.
            See the [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
          description: |-
            No deployed form for a given task exists. See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
      tags:
      - Task
      x-accepts: application/json
  /task/{id}/form:
    get:
      description: |-
        Retrieves the form key for a task. The form key corresponds to the `FormData#formKey`
        property in the engine. This key can be used to do task-specific form rendering in
        client applications. Additionally, the context path of the containing process
        application is returned.
      operationId: getForm
      parameters:
      - description: The id of the task to retrieve the form for.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              examples:
                example-1:
                  description: GET `/task/anId/form`
                  summary: Status 200 Response
                  value:
                    key: aFormKey
                    contextPath: http://localhost:8080/my-process-application/
              schema:
                $ref: '#/components/schemas/FormDto'
          description: Request successful.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
          description: |-
            Task with given id does not exist. See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
      tags:
      - Task
      x-accepts: application/json
  /task/{id}/form-variables:
    get:
      description: |-
        Retrieves the form variables for a task. The form variables take form data specified
        on the task into account. If form fields are defined, the variable types and default
        values of the form fields are taken into account.
      operationId: getFormVariables
      parameters:
      - description: The id of the task to retrieve the variables for.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - description: |-
          A comma-separated list of variable names. Allows restricting the list of requested
          variables to the variable names in the list. It is best practice to restrict the
          list of variables to the variables actually required by the form in order to
          minimize fetching of data. If the query parameter is ommitted all variables are
          fetched. If the query parameter contains non-existent variable names, the variable
          names are ignored.
        explode: true
        in: query
        name: variableNames
        required: false
        schema:
          type: string
        style: form
      - description: |-
          Determines whether serializable variable values (typically variables that store
          custom Java objects) should be deserialized on server side (default true).

          If set to true, a serializable variable will be deserialized on server side and
          transformed to JSON using [Jackson's](http://jackson.codehaus.org/) POJO/bean
          property introspection feature. Note that this requires the Java classes of the
          variable value to be on the REST API's classpath.

          If set to false, a serializable variable will be returned in its serialized format.
          For example, a variable that is serialized as XML will be returned as a JSON string
          containing XML.

          Note: While true is the default value for reasons of backward compatibility, we
          recommend setting this parameter to false when developing web applications that are
          independent of the Java process applications deployed to the engine.
        explode: true
        in: query
        name: deserializeValues
        required: false
        schema:
          default: true
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/json:
              examples:
                example-1:
                  description: GET `/task/anId/form-variables`
                  summary: Status 200 Response
                  value:
                    amount:
                      type: integer
                      value: 5
                      valueInfo: {}
                    firstName:
                      type: String
                      value: Jonny
                      valueInfo: {}
              schema:
                additionalProperties:
                  $ref: '#/components/schemas/VariableValueDto'
                type: object
          description: Request successful. A JSON object containing a property for
            each variable returned.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
          description: |2-
             id is null or does not exist. See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
      tags:
      - Task
      x-accepts: application/json
  /task/{id}/identity-links:
    get:
      description: |-
        Gets the identity links for a task by id, which are the users and groups that are in
        *some* relation to it (including assignee and owner).
      operationId: getIdentityLinks
      parameters:
      - description: The id of the task to retrieve the identity links for.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - description: Filter by the type of links to include.
        explode: true
        in: query
        name: type
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              examples:
                example-1:
                  summary: GET /task/anId/identityLinks
                  value:
                  - userId: userId
                    groupId: null
                    type: assignee
                  - userId: null
                    groupId: groupId1
                    type: candidate
                  - userId: null
                    groupId: groupId2
                    type: candidate
              schema:
                items:
                  $ref: '#/components/schemas/IdentityLinkDto'
                type: array
          description: Request successful.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
          description: |-
            Task with given id does not exist. See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling) for the error response format.
      tags:
      - Task Identity Link
      x-accepts: application/json
    post:
      description: |-
        Adds an identity link to a task by id. Can be used to link any user or group to a task
        and specify a relation.
      operationId: addIdentityLink
      parameters:
      - description: The id of the task to add a link to.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            examples:
              example-1:
                summary: POST `/task/anId/identity-links`
                value:
                  groupId: aNewGroupId
                  type: candidate
            schema:
              $ref: '#/components/schemas/IdentityLinkDto'
      responses:
        "204":
          description: Request successful.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
          description: |-
            Task with given id does not exist. See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling) for the error response format.
      tags:
      - Task Identity Link
      x-contentType: application/json
      x-accepts: application/json
  /task/{id}/identity-links/delete:
    post:
      description: Removes an identity link from a task by id
      operationId: deleteIdentityLink
      parameters:
      - description: The id of the task to remove a link from.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            examples:
              example-1:
                summary: POST `/task/anId/identityLinks/delete`
                value:
                  groupId: theOldGroupId
                  type: candidate
            schema:
              $ref: '#/components/schemas/IdentityLinkDto'
      responses:
        "204":
          description: Request successful.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
          description: |-
            Task with given id does not exist.
            See the [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling) for
            the error response format.
      tags:
      - Task Identity Link
      x-contentType: application/json
      x-accepts: application/json
  /task/{id}/localVariables:
    get:
      description: Retrieves all variables of a given task by id.
      operationId: getTaskLocalVariables
      parameters:
      - description: The id of the task to retrieve the variables from.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - description: |-
          Determines whether serializable variable values (typically variables that store custom Java objects)
          should be deserialized on the server side (default `true`).

          If set to `true`, a serializable variable will be deserialized on server side and transformed to JSON
          using [Jackson's](https://github.com/FasterXML/jackson) POJO/bean property introspection feature.
          Note that this requires the Java classes of the variable value to be on the REST API's classpath.

          If set to `false`, a serializable variable will be returned in its serialized format.
          For example, a variable that is serialized as XML will be returned as a JSON string containing XML.

          **Note:** While `true` is the default value for reasons of backward compatibility, we recommend setting this
          parameter to `false` when developing web applications that are independent of the Java process
          applications deployed to the engine.
        explode: true
        in: query
        name: deserializeValues
        required: false
        schema:
          default: true
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/json:
              examples:
                example-1:
                  summary: GET `/task/aTaskId/variables`
                  value:
                    aVariableKey:
                      value:
                        prop1: a
                        prop2: b
                      type: Object
                      valueInfo:
                        objectTypeName: com.example.MyObject
                        serializationDataFormat: application/xml
                example-2:
                  summary: GET `/task/aTaskId/variables?deserializeValue=false`
                  value:
                    aVariableKey:
                      value: ab
                      type: Object
                      valueInfo:
                        objectTypeName: com.example.MyObject
                        serializationDataFormat: application/xml
              schema:
                additionalProperties:
                  $ref: '#/components/schemas/VariableValueDto'
                type: object
          description: Request successful.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
          description: |-
            Task id is `null` or does not exist. See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
      tags:
      - Task Local Variable
      x-accepts: application/json
    post:
      description: |-
        Updates or deletes the variables in the context of a task. Updates precede deletions. So, if a variable is
        updated AND deleted, the deletion overrides the update.
      operationId: modifyTaskLocalVariables
      parameters:
      - description: The id of the task to set variables for.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            examples:
              example-1:
                description: 'Status 204 Response: No content.'
                summary: POST `/task/aTaskId/variables`
                value:
                  modifications:
                    aVariable:
                      value: aValue
                      type: String
                    anotherVariable:
                      value: 42
                      type: Integer
                  deletions:
                  - aThirdVariable
                  - FourthVariable
            schema:
              $ref: '#/components/schemas/PatchVariablesDto'
      responses:
        "204":
          description: Request successful.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
          description: |-
            The variable value or type is invalid. For example the value could not be parsed to an `Integer` value
            or the passed variable type is not supported. See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
          description: |-
            Update or delete could not be executed because the task is `null` or does not exist.. See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
      tags:
      - Task Local Variable
      x-contentType: application/json
      x-accepts: application/json
  /task/{id}/localVariables/{varName}:
    delete:
      description: Removes a local variable from a task by id.
      operationId: deleteTaskLocalVariable
      parameters:
      - description: The id of the task to delete the variable from.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - description: The name of the variable to be removed.
        explode: false
        in: path
        name: varName
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: Request successful.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
          description: |-
            Task id is `null` or does not exist. See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
      tags:
      - Task Local Variable
      x-accepts: application/json
    get:
      description: Retrieves a variable from the context of a given task by id.
      operationId: getTaskLocalVariable
      parameters:
      - description: The id of the task to retrieve the variable from.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - description: The name of the variable to get
        explode: false
        in: path
        name: varName
        required: true
        schema:
          type: string
        style: simple
      - description: |-
          Determines whether serializable variable values (typically variables that store custom Java objects)
          should be deserialized on the server side (default `true`).

          If set to `true`, a serializable variable will be deserialized on server side and transformed to JSON
          using [Jackson's](https://github.com/FasterXML/jackson) POJO/bean property introspection feature.
          Note that this requires the Java classes of the variable value to be on the REST API's classpath.

          If set to `false`, a serializable variable will be returned in its serialized format.
          For example, a variable that is serialized as XML will be returned as a JSON string containing XML.

          Note: While `true` is the default value for reasons of backward compatibility, we recommend setting this
          parameter to `false` when developing web applications that are independent of the Java process
          applications deployed to the engine.
        explode: true
        in: query
        name: deserializeValue
        required: false
        schema:
          default: true
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/json:
              examples:
                example-1:
                  summary: GET `/task/aTaskId/variables/myObject123`
                  value:
                    value:
                      prop1: a
                      prop2: b
                    type: Object
                    valueInfo:
                      objectTypeName: com.example.MyObject
                      serializationDataFormat: application/xml
                example-2:
                  summary: GET `/task/aTaskId/variables/myObject123?deserializeValue=false`
                  value:
                    value: ab
                    type: Object
                    valueInfo:
                      objectTypeName: com.example.MyObject
                      serializationDataFormat: application/xml
              schema:
                $ref: '#/components/schemas/VariableValueDto'
          description: Request successful.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
          description: |-
            Variable with given id does not exist. See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
          description: |-
            Task id is `null` or does not exist. See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
      tags:
      - Task Local Variable
      x-accepts: application/json
    put:
      description: Sets a variable in the context of a given task.
      operationId: putTaskLocalVariable
      parameters:
      - description: The id of the task to set the variable for.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - description: The name of the variable to set.
        explode: false
        in: path
        name: varName
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            examples:
              example-1:
                description: Status 204. No content.
                summary: PUT /task/aTaskId/variables/aVarName
                value:
                  value: someValue
                  type: String
              example-2:
                description: An Object Variable PUT Request. Status 204. No content.
                summary: PUT /task/aTaskId/variables/aVarName
                value:
                  value: ab
                  type: Object
                  valueInfo:
                    objectTypeName: com.example.MyObject
                    serializationDataFormat: application/xml
            schema:
              $ref: '#/components/schemas/VariableValueDto'
      responses:
        "204":
          description: Request successful.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
          description: |-
            The variable name, value or type is invalid, for example if the value could not be parsed to an `Integer`
            value or the passed variable type is not supported or a new transient variable has the name that is
            already persisted. See the [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
          description: |-
            The variable name is `null`, or the Task id is `null` or does not exist. See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
      tags:
      - Task Local Variable
      x-contentType: application/json
      x-accepts: application/json
  /task/{id}/localVariables/{varName}/data:
    get:
      description: |-
        Retrieves a binary variable from the context of a given task by id. Applicable for byte array and file
        variables.
      operationId: getTaskLocalVariableBinary
      parameters:
      - description: The id of the task to retrieve the variable for.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - description: The name of the variable to retrieve.
        explode: false
        in: path
        name: varName
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/octet-stream:
              examples:
                example-1:
                  summary: GET /task/aTaskId/variables/aVarName/data
                  value: 'binary variable: Status 200. Content-Type: application/octet-stream'
              schema:
                description: For binary variables or files without any MIME type information,
                  a byte stream is returned.
                format: binary
                type: string
            text/plain:
              examples:
                example-1:
                  summary: GET /task/aTaskId/variables/aVarName/data
                  value: 'file variable: Status 200. Content-Type: text/plain; charset=UTF-8.
                    Content-Disposition: attachment; filename="someFile.txt"'
              schema:
                description: |-
                  File variables with MIME type information are returned as the saved type.
                              Additionally, for file variables the Content-Disposition header will be set.
                format: binary
                type: string
          description: |-
            Request successful.
                    For binary variables or files without any MIME type information, a byte stream is returned.
                    File variables with MIME type information are returned as the saved type.
                    Additionally, for file variables the Content-Disposition header will be set.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
          description: |-
            Variable with given id exists but is not a binary variable.See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
          description: |-
            Variable with given id does not exist. See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
      tags:
      - Task Local Variable
      x-accepts: application/json
    post:
      description: Sets the serialized value for a binary variable or the binary value
        for a file variable.
      operationId: setBinaryTaskLocalVariable
      parameters:
      - description: The id of the task to retrieve the variable for.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - description: The name of the variable to retrieve.
        explode: false
        in: path
        name: varName
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          multipart/form-data:
            examples:
              example-1:
                description: Post binary content of a byte array variable.
                summary: POST `/task/aTaskId/variables/aVarName/data` (1)
                value: "\n                        ```\n                        ------------------------------354ddb6baeff\n\
                  \                        Content-Disposition: form-data; name=\"\
                  data\"; filename=\"image.png\"\n                        Content-Type:\
                  \ application/octet-stream\n                        Content-Transfer-Encoding:\
                  \ binary\n\n                        <<Byte Stream ommitted>>\n \
                  \                       ------------------------------354ddb6baeff\n\
                  \                        Content-Disposition: form-data; name=\"\
                  valueType\"\n                        Content-Type: text/plain; charset=US-ASCII\n\
                  \                        Content-Transfer-Encoding: 8bit\n\n   \
                  \                     Bytes\n                        ------------------------------1e838f8f632a--\n\
                  \                        ```\n                      "
              example-2:
                description: Post the JSON serialization of a Java Class (**deprecated**).
                summary: POST `/task/aTaskId/variables/aVarName/data` (2)
                value: "\n                        ```\n                        ------------------------------1e838f8f632a\n\
                  \                        Content-Disposition: form-data; name=\"\
                  type\"\n                        Content-Type: text/plain; charset=US-ASCII\n\
                  \                        Content-Transfer-Encoding: 8bit\n\n   \
                  \                     java.util.ArrayList<java.lang.Object>\n  \
                  \                      ------------------------------1e838f8f632a\n\
                  \                        Content-Disposition: form-data; name=\"\
                  data\"\n                        Content-Type: application/json;\
                  \ charset=US-ASCII\n                        Content-Transfer-Encoding:\
                  \ 8bit\n\n                        [\"foo\",\"bar\"]\n          \
                  \              ------------------------------1e838f8f632a--\n  \
                  \                      ```\n                      "
              example-3:
                description: Post a text file.
                summary: POST `/task/aTaskId/variables/aVarName/data` (3)
                value: "\n                        ```\n                        ---OSQH1f8lzs83iXFHphqfIuitaQfNKFY74Y\n\
                  \                        Content-Disposition: form-data; name=\"\
                  data\"; filename=\"myFile.txt\"\n                        Content-Type:\
                  \ text/plain; charset=US-ASCII\n                        Content-Transfer-Encoding:\
                  \ binary\n\n                        <<Byte Stream ommitted>>\n \
                  \                       ---OSQH1f8lzs83iXFHphqfIuitaQfNKFY74Y\n\
                  \                        Content-Disposition: form-data; name=\"\
                  valueType\"\n                        Content-Type: text/plain; charset=US-ASCII\n\
                  \                        Content-Transfer-Encoding: 8bit\n\n   \
                  \                     File\n                        ------------------------------1e838f8f632a--\n\
                  \                        ```\n                      "
            schema:
              $ref: '#/components/schemas/MultiFormVariableBinaryDto'
        description: 'For binary variables a multipart form submit with the following
          parts:'
      responses:
        "204":
          description: Request successful.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
          description: |-
            The variable value or type is invalid, for example if no filename is set. See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
          description: |-
            Variable name is `null`, or the Task id is `null` or does not exist. See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
      tags:
      - Task Local Variable
      x-contentType: multipart/form-data
      x-accepts: application/json
  /task/{id}/rendered-form:
    get:
      description: |-
        Retrieves the rendered form for a task. This method can be used to get the HTML
        rendering of a
        [Generated Task Form](https://docs.camunda.org/manual/7.14/user-guide/task-forms/#generated-task-forms).
      operationId: getRenderedForm
      parameters:
      - description: The id of the task to get the rendered form for.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/xhtml+xml:
              examples:
                example-1:
                  description: A `/task/anId/rendered-form` HTML GET response body
                    providing the rendered (generated) form content.
                  summary: Status 200 Response
                  value: |-
                    <form class="form-horizontal">
                                                      <div class="control-group">
                                                        <label class="control-label">Customer ID</label>
                                                        <div class="controls">
                                                          <input form-field type="string" name="customerId"></input>
                                                        </div>
                                                      </div>
                                                      <div class="control-group">
                                                        <label class="control-label">Amount</label>
                                                        <div class="controls">
                                                          <input form-field type="number" name="amount"></input>
                                                        </div>
                                                      </div>
                                                    </form>
              schema:
                description: For `application/xhtml+xml` Responses, a byte stream
                  is returned.
                format: binary
                type: string
          description: Request successful.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
          description: |-
            The task with the given id does not exist or has no form field metadata defined for
            this task. See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
      tags:
      - Task
      x-accepts: application/json
  /task/{id}/resolve:
    post:
      description: |-
        Resolves a task and updates execution variables.

        Resolving a task marks that the assignee is done with the task delegated to them, and
        that it can be sent back to the owner. Can only be executed when the task has been
        delegated. The assignee will be set to the owner, who performed the delegation.
      operationId: resolve
      parameters:
      - description: The id of the task to resolve.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            examples:
              example-1:
                description: POST `/task/anId/resolve`
                summary: Request Body
                value:
                  variables:
                    aVariable:
                      value: aStringValue
                    anotherVariable:
                      value: 42
                    aThirdVariable:
                      value: true
            schema:
              $ref: '#/components/schemas/CompleteTaskDto'
      responses:
        "204":
          description: Request successful.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
          description: |-
            The variable value or type is invalid, for example if the value could not be parsed
            to an Integer value or the passed variable type is not supported. See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
          description: |-
            If the task does not exist or the corresponding process instance could not be
            resumed successfully. See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
      tags:
      - Task
      x-contentType: application/json
      x-accepts: application/json
  /task/{id}/submit-form:
    post:
      description: |-
        Completes a task and updates process variables using a form submit. There are two
        difference between this method and the `complete` method:

        * If the task is in state `PENDING` - i.e., has been delegated before, it is not
        completed but resolved. Otherwise it will be completed.
        * If the task has Form Field Metadata defined, the process engine will perform backend
        validation for any form fields which have validators defined.
        See the
        [Generated Task Forms](https://docs.camunda.org/manual/7.14/user-guide/task-forms/_index/#generated-task-forms)
        section of the [User Guide](https://docs.camunda.org/manual/7.14/user-guide/) for more information.
      operationId: submit
      parameters:
      - description: The id of the task to submit the form for.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            examples:
              example-1:
                description: POST `/task/anId/submit-form`
                summary: Request Body 1
                value:
                  variables:
                    aVariable:
                      value: aStringValue
                    anotherVariable:
                      value: 42
                    aThirdVariable:
                      value: true
                    aFileVariable:
                      value: TG9yZW0gaXBzdW0=
                      type: File
                      valueInfo:
                        filename: myFile.txt
              example-2:
                description: POST `/task/anId/complete`
                summary: Request Body 2
                value:
                  variables:
                    aVariable:
                      value: aStringValue
                    anotherVariable:
                      value: 42
                    aThirdVariable:
                      value: true
                  withVariablesInReturn: true
            schema:
              $ref: '#/components/schemas/CompleteTaskDto'
      responses:
        "200":
          content:
            application/json:
              examples:
                example-1:
                  description: Response of a submitted task form with variables in
                    return
                  summary: Response Body
                  value:
                    aVariable:
                      value: aStringValue
                      type: String
                      valueInfo: {}
                    anotherVariable:
                      value: 42
                      type: Integer
                      valueInfo: {}
                    aThirdVariable:
                      value: true
                      type: Boolean
                      valueInfo: {}
              schema:
                additionalProperties:
                  $ref: '#/components/schemas/VariableValueDto'
                type: object
          description: Request successful. The response contains the process variables.
        "204":
          description: Request successful. The response contains no variables.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
          description: |-
            The variable value or type is invalid, for example if the value could not be parsed to an Integer value
            or the passed variable type is not supported.

            See the [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling) for
            the error response format.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
          description: |-
            If the task does not exist or the corresponding process instance could not be resumed successfully.

            See the [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling) for
            the error response format.
      tags:
      - Task
      x-contentType: application/json
      x-accepts: application/json
  /task/{id}/unclaim:
    post:
      description: Resets a task's assignee. If successful, the task is not assigned
        to a user.
      operationId: unclaim
      parameters:
      - description: The id of the task to unclaim.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: Request successful.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
          description: |-
            The Task with the given id does not exist. See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
      tags:
      - Task
      x-accepts: application/json
  /task/{id}/variables:
    get:
      description: |-
        Retrieves all variables visible from the task. A variable is visible from the task if it is a local task
        variable or declared in a parent scope of the task. See documentation on
        [visiblity of variables](https://docs.camunda.org/manual/7.14/user-guide/process-engine/variables/).
      operationId: getTaskVariables
      parameters:
      - description: The id of the task to retrieve the variables from.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - description: |-
          Determines whether serializable variable values (typically variables that store custom Java objects)
          should be deserialized on the server side (default `true`).
          If set to `true`, a serializable variable will be deserialized on server side and transformed to JSON
          using [Jackson's](https://github.com/FasterXML/jackson) POJO/bean property introspection feature.
          Note that this requires the Java classes of the variable value to be on the REST API's classpath.

          If set to `false`, a serializable variable will be returned in its serialized format.
          For example, a variable that is serialized as XML will be returned as a JSON string containing XML.

          Note: While `true` is the default value for reasons of backward compatibility, we recommend setting this
          parameter to `false` when developing web applications that are independent of the Java process
          applications deployed to the engine.
        explode: true
        in: query
        name: deserializeValue
        required: false
        schema:
          default: true
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/json:
              examples:
                example-1:
                  summary: GET `/task/aTaskId/variables`
                  value:
                    aVariableKey:
                      value:
                        prop1: a
                        prop2: b
                      type: Object
                      valueInfo:
                        objectTypeName: com.example.MyObject
                        serializationDataFormat: application/xml
                example-2:
                  summary: GET `/task/aTaskId/variables?deserializeValue=false`
                  value:
                    aVariableKey:
                      value: ab
                      type: Object
                      valueInfo:
                        objectTypeName: com.example.MyObject
                        serializationDataFormat: application/xml
              schema:
                additionalProperties:
                  $ref: '#/components/schemas/VariableValueDto'
                type: object
          description: Request successful.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
          description: |-
            Task id is `null` or does not exist. See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
      tags:
      - Task Variable
      x-accepts: application/json
    post:
      description: |-
        Updates or deletes the variables visible from the task. Updates precede deletions. So, if a variable is
        updated AND deleted, the deletion overrides the update. A variable is visible from the task if it is a
        local task variable or declared in a parent scope of the task. See documentation on
        [visiblity of variables](https://docs.camunda.org/manual/7.14/user-guide/process-engine/variables/).
      operationId: modifyTaskVariables
      parameters:
      - description: The id of the task to set variables for.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            examples:
              example-1:
                description: 'Status 204 Response: No content.'
                summary: POST `/task/aTaskId/variables`
                value:
                  modifications:
                    aVariable:
                      value: aValue
                      type: String
                    anotherVariable:
                      value: 42
                      type: Integer
                  deletions:
                  - aThirdVariable
                  - FourthVariable
            schema:
              $ref: '#/components/schemas/PatchVariablesDto'
      responses:
        "204":
          description: Request successful.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
          description: |-
            The variable value or type is invalid. For example the value could not be parsed to an `Integer` value
            or the passed variable type is not supported. See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
          description: |-
            Update or delete could not be executed because the task is `null` or does not exist. See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
      tags:
      - Task Variable
      x-contentType: application/json
      x-accepts: application/json
  /task/{id}/variables/{varName}:
    delete:
      description: |-
        Removes a variable that is visible to a task. A variable is visible to a task if it is a local task
        variable or declared in a parent scope of the task. See documentation on
        [visiblity of variables](https://docs.camunda.org/manual/7.14/user-guide/process-engine/variables/).
      operationId: deleteTaskVariable
      parameters:
      - description: The id of the task to delete the variable from.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - description: The name of the variable to be removed.
        explode: false
        in: path
        name: varName
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: Request successful.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
          description: |-
            Task id is null or does not exist. See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
      tags:
      - Task Variable
      x-accepts: application/json
    get:
      description: |-
        Retrieves a variable from the context of a given task.
        The variable must be visible from the task. It is visible from the task if it is a local task variable or
        declared in a parent scope of the task. See documentation on
        [visiblity of variables](https://docs.camunda.org/manual/7.14/user-guide/process-engine/variables/).
      operationId: getTaskVariable
      parameters:
      - description: The id of the task to retrieve the variable from.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - description: The name of the variable to get.
        explode: false
        in: path
        name: varName
        required: true
        schema:
          type: string
        style: simple
      - description: |-
          Determines whether serializable variable values (typically variables that store custom Java objects)
          should be deserialized on the server side (default `true`).

          If set to `true`, a serializable variable will be deserialized on server side and transformed to JSON
          using [Jackson's](https://github.com/FasterXML/jackson) POJO/bean property introspection feature.
          Note that this requires the Java classes of the variable value to be on the REST API's classpath.

          If set to `false`, a serializable variable will be returned in its serialized format.
          For example, a variable that is serialized as XML will be returned as a JSON string containing XML.

          Note: While `true` is the default value for reasons of backward compatibility, we recommend setting this
          parameter to `false` when developing web applications that are independent of the Java process
          applications deployed to the engine.
        explode: true
        in: query
        name: deserializeValue
        required: false
        schema:
          default: true
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/json:
              examples:
                example-1:
                  summary: GET `/task/aTaskId/variables/myObject123`
                  value:
                    value:
                      prop1: a
                      prop2: b
                    type: Object
                    valueInfo:
                      objectTypeName: com.example.MyObject
                      serializationDataFormat: application/xml
                example-2:
                  summary: GET `/task/aTaskId/variables/myObject123?deserializeValue=false`
                  value:
                    value: ab
                    type: Object
                    valueInfo:
                      objectTypeName: com.example.MyObject
                      serializationDataFormat: application/xml
              schema:
                $ref: '#/components/schemas/VariableValueDto'
          description: Request successful.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
          description: |-
            Variable with given id does not exist. See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
          description: |-
            Task id is `null` or does not exist. See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
      tags:
      - Task Variable
      x-accepts: application/json
    put:
      description: |-
        Updates a process variable that is visible from the Task scope. A variable is visible from the task if it
        is a local task variable, or declared in a parent scope of the task. See the documentation on
        [variable scopes and visibility](https://docs.camunda.org/manual/7.14/user-guide/process-engine/variables#variable-scopes-and-variable-visibility).

        **Note**: If a variable doesn't exist, the variable is created in the top-most scope
        visible from the task.
      operationId: putTaskVariable
      parameters:
      - description: The id of the task to set the variable for.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - description: The name of the variable to set.
        explode: false
        in: path
        name: varName
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            examples:
              example-1:
                description: Status 204. No content.
                summary: PUT /task/aTaskId/variables/aVarName
                value:
                  value: someValue
                  type: String
              example-2:
                description: Status 204. No content.
                summary: PUT /task/aTaskId/variables/aVarName
                value:
                  value: ab
                  type: Object
                  valueInfo:
                    objectTypeName: com.example.MyObject
                    serializationDataFormat: application/xml
            schema:
              $ref: '#/components/schemas/VariableValueDto'
      responses:
        "204":
          description: Request successful.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
          description: |-
            The variable name, value or type is invalid, for example if the value could not be parsed to an `Integer`
            value or the passed variable type is not supported or a new transient variable has the name that is
            already persisted. See the [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
          description: |-
            The variable name is `null`, or the Task id is `null` or does not exist. See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
      tags:
      - Task Variable
      x-contentType: application/json
      x-accepts: application/json
  /task/{id}/variables/{varName}/data:
    get:
      description: |-
        Retrieves a binary variable from the context of a given task. Applicable for byte array and file
        variables. The variable must be visible from the task. It is visible from the task if it is a local task
        variable or declared in a parent scope of the task. See documentation on
        [visiblity of variables](https://docs.camunda.org/manual/7.14/user-guide/process-engine/variables/).
      operationId: getTaskVariableBinary
      parameters:
      - description: The id of the task to retrieve the variable for.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - description: The name of the variable to retrieve.
        explode: false
        in: path
        name: varName
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/octet-stream:
              examples:
                example-1:
                  summary: GET /task/aTaskId/variables/aVarName/data
                  value: 'binary variable: Status 200. Content-Type: application/octet-stream'
              schema:
                description: For binary variables or files without any MIME type information,
                  a byte stream is returned.
                format: binary
                type: string
            text/plain:
              examples:
                example-1:
                  summary: GET /task/aTaskId/variables/aVarName/data
                  value: 'file variable: Status 200. Content-Type: text/plain; charset=UTF-8.
                    Content-Disposition: attachment; filename="someFile.txt"'
              schema:
                description: |-
                  File variables with MIME type information are returned as the saved type.
                              Additionally, for file variables the Content-Disposition header will be set.
                format: binary
                type: string
          description: |-
            Request successful.
                    For binary variables or files without any MIME type information, a byte stream is returned.
                    File variables with MIME type information are returned as the saved type.
                    Additionally, for file variables the Content-Disposition header will be set.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
          description: |-
            Variable with given id exists but is not a binary variable.See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
          description: |-
            Variable with given id does not exist. See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
      tags:
      - Task Variable
      x-accepts: application/json
    post:
      description: |-
        Sets the serialized value for a binary variable or the binary value for a file variable visible from the
        task. A variable is visible from the task if it is a local task variable or declared in a parent scope of
        the task. See documentation on
        [visiblity of variables](https://docs.camunda.org/manual/7.14/user-guide/process-engine/variables/).
      operationId: setBinaryTaskVariable
      parameters:
      - description: The id of the task to retrieve the variable for.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - description: The name of the variable to retrieve.
        explode: false
        in: path
        name: varName
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          multipart/form-data:
            examples:
              example-1:
                description: Post binary content of a byte array variable.
                summary: POST `/task/aTaskId/variables/aVarName/data` (1)
                value: "\n                        ```\n                        ------------------------------354ddb6baeff\n\
                  \                        Content-Disposition: form-data; name=\"\
                  data\"; filename=\"image.png\"\n                        Content-Type:\
                  \ application/octet-stream\n                        Content-Transfer-Encoding:\
                  \ binary\n\n                        <<Byte Stream ommitted>>\n \
                  \                       ------------------------------354ddb6baeff\n\
                  \                        Content-Disposition: form-data; name=\"\
                  valueType\"\n                        Content-Type: text/plain; charset=US-ASCII\n\
                  \                        Content-Transfer-Encoding: 8bit\n\n   \
                  \                     Bytes\n                        ------------------------------1e838f8f632a--\n\
                  \                        ```\n                      "
              example-2:
                description: Post the JSON serialization of a Java Class (**deprecated**).
                summary: POST `/task/aTaskId/variables/aVarName/data` (2)
                value: "\n                        ```\n                        ------------------------------1e838f8f632a\n\
                  \                        Content-Disposition: form-data; name=\"\
                  type\"\n                        Content-Type: text/plain; charset=US-ASCII\n\
                  \                        Content-Transfer-Encoding: 8bit\n\n   \
                  \                     java.util.ArrayList<java.lang.Object>\n  \
                  \                      ------------------------------1e838f8f632a\n\
                  \                        Content-Disposition: form-data; name=\"\
                  data\"\n                        Content-Type: application/json;\
                  \ charset=US-ASCII\n                        Content-Transfer-Encoding:\
                  \ 8bit\n\n                        [\"foo\",\"bar\"]\n          \
                  \              ------------------------------1e838f8f632a--\n  \
                  \                      ```\n                      "
              example-3:
                description: Post a text file.
                summary: POST `/task/aTaskId/variables/aVarName/data` (3)
                value: "\n                        ```\n                        ---OSQH1f8lzs83iXFHphqfIuitaQfNKFY74Y\n\
                  \                        Content-Disposition: form-data; name=\"\
                  data\"; filename=\"myFile.txt\"\n                        Content-Type:\
                  \ text/plain; charset=US-ASCII\n                        Content-Transfer-Encoding:\
                  \ binary\n\n                        <<Byte Stream ommitted>>\n \
                  \                       ---OSQH1f8lzs83iXFHphqfIuitaQfNKFY74Y\n\
                  \                        Content-Disposition: form-data; name=\"\
                  valueType\"\n                        Content-Type: text/plain; charset=US-ASCII\n\
                  \                        Content-Transfer-Encoding: 8bit\n\n   \
                  \                     File\n                        ------------------------------1e838f8f632a--\n\
                  \                        ```\n                      "
            schema:
              $ref: '#/components/schemas/MultiFormVariableBinaryDto'
        description: 'For binary variables a multipart form submit with the following
          parts:'
      responses:
        "204":
          description: Request successful.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
          description: |-
            The variable value or type is invalid, for example if no filename is set. See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
          description: |-
            Variable name is `null`, or the Task id is `null` or does not exist. See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
      tags:
      - Task Variable
      x-contentType: multipart/form-data
      x-accepts: application/json
  /telemetry/configuration:
    get:
      description: Fetches Telemetry Configuration.
      operationId: getTelemetryConfiguration
      parameters: []
      responses:
        "200":
          content:
            application/json:
              examples:
                example-1:
                  description: The Response content of a status 200
                  summary: Status 200 Response
                  value:
                    enableTelemetry: true
              schema:
                $ref: '#/components/schemas/TelemetryConfigurationDto'
          description: Request successful.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
          description: If the user who perform the operation is not a <b>camunda-admin</b>
            user.
      summary: Fetch Telemetry Configuration
      tags:
      - Telemetry
      x-accepts: application/json
    post:
      description: Configures whether Camunda receives data collection of the process
        engine setup and usage.
      operationId: configureTelemetry
      parameters: []
      requestBody:
        content:
          application/json:
            examples:
              examle-1:
                description: The content of the Request Body
                summary: POST /telemetry/configuration
                value:
                  enableTelemetry: true
            schema:
              $ref: '#/components/schemas/TelemetryConfigurationDto'
      responses:
        "204":
          description: Request successful.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
          description: If the user who perform the operation is not a <b>camunda-admin</b>
            user.
      summary: Configure Telemetry
      tags:
      - Telemetry
      x-contentType: application/json
      x-accepts: application/json
  /user:
    get:
      description: |-
        Query for a list of users using a list of parameters.
        The size of the result set can be retrieved by using the Get User Count method.
        [Get User Count](https://docs.camunda.org/manual/7.14/reference/rest/user/get-query-count/) method.
      operationId: getUsers
      parameters:
      - description: Filter by user id
        explode: true
        in: query
        name: id
        required: false
        schema:
          type: string
        style: form
      - description: Filter by a comma-separated list of user ids.
        explode: true
        in: query
        name: idIn
        required: false
        schema:
          type: string
        style: form
      - description: Filter by the first name of the user. Exact match.
        explode: true
        in: query
        name: firstName
        required: false
        schema:
          type: string
        style: form
      - description: Filter by the first name that the parameter is a substring of.
        explode: true
        in: query
        name: firstNameLike
        required: false
        schema:
          type: string
        style: form
      - description: Filter by the last name of the user. Exact match.
        explode: true
        in: query
        name: lastName
        required: false
        schema:
          type: string
        style: form
      - description: Filter by the last name that the parameter is a substring of.
        explode: true
        in: query
        name: lastNameLike
        required: false
        schema:
          type: string
        style: form
      - description: Filter by the email of the user. Exact match.
        explode: true
        in: query
        name: email
        required: false
        schema:
          type: string
        style: form
      - description: Filter by the email that the parameter is a substring of.
        explode: true
        in: query
        name: emailLike
        required: false
        schema:
          type: string
        style: form
      - description: Filter for users which are members of the given group.
        explode: true
        in: query
        name: memberOfGroup
        required: false
        schema:
          type: string
        style: form
      - description: Filter for users which are members of the given tenant.
        explode: true
        in: query
        name: memberOfTenant
        required: false
        schema:
          type: string
        style: form
      - description: Only select Users that are potential starter for the given process
          definition.
        explode: true
        in: query
        name: potentialStarter
        required: false
        schema:
          type: string
        style: form
      - description: |-
          Sort the results lexicographically by a given criterion.
          Must be used in conjunction with the sortOrder parameter.
        explode: true
        in: query
        name: sortBy
        required: false
        schema:
          enum:
          - instanceId
          - caseInstanceId
          - dueDate
          - executionId
          - caseExecutionId
          - assignee
          - created
          - description
          - id
          - name
          - nameCaseInsensitive
          - priority
          - processVariable
          - executionVariable
          - taskVariable
          - caseExecutionVariable
          - caseInstanceVariable
          type: string
        style: form
      - description: |-
          Sort the results in a given order. Values may be asc for ascending order or desc for descending order.
          Must be used in conjunction with the sortBy parameter.
        explode: true
        in: query
        name: sortOrder
        required: false
        schema:
          enum:
          - asc
          - desc
          type: string
        style: form
      - description: Pagination of results. Specifies the index of the first result
          to return.
        explode: true
        in: query
        name: firstResult
        required: false
        schema:
          type: integer
        style: form
      - description: |-
          Pagination of results. Specifies the maximum number of results to return.
          Will return less results if there are no more results left.
        explode: true
        in: query
        name: maxResults
        required: false
        schema:
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              examples:
                example-1:
                  summary: GET `/user?firstName=John`
                  value:
                  - id: jonny1
                    firstName: John
                    lastName: Doe
                    email: anEmailAddress
                  - id: jonny2
                    firstName: John
                    lastName: Smoe
                    email: anotherEmailAddress
              schema:
                items:
                  $ref: '#/components/schemas/UserProfileDto'
                type: array
          description: Request successful.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
          description: |-
            Returned if some of the query parameters are invalid, for example if a `sortOrder` parameter is supplied,
            but no `sortBy`, or if an invalid operator for variable comparison is used. See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
      summary: Get List
      tags:
      - User
      x-accepts: application/json
    options:
      description: |-
        The `/user` resource supports two custom `OPTIONS` requests, one for the resource as such
        and one for individual user instances. The `OPTIONS` request allows checking for the set of
        available operations that the currently authenticated user can perform on the /user resource.
        If the user can perform an operation or not may depend on various things, including the user's
        authorizations to interact with this resource and the internal configuration of the process
        engine.
      operationId: availableOperations
      responses:
        "200":
          content:
            application/json:
              examples:
                example-1:
                  summary: GET `/user/aUserId`
                  value:
                    links:
                    - method: GET
                      href: http://localhost:8080/camunda/api/engine/engine/default/user/peter/profile
                      rel: self
                    - method: DELETE
                      href: http://localhost:8080/camunda/api/engine/engine/default/user/peter
                      rel: delete
                    - method: PUT
                      href: http://localhost:8080/camunda/api/engine/engine/default/user/peter/profile
                      rel: update
              schema:
                $ref: '#/components/schemas/ResourceOptionsDto'
          description: Request successful.
      summary: Options
      tags:
      - User
      x-accepts: application/json
  /user/count:
    get:
      description: |-
        Queries for the number of deployments that fulfill given parameters. Takes the same parameters as the
        [Get Users](https://docs.camunda.org/manual/7.14/reference/rest/user/get-query/) method.
      operationId: getUserCount
      parameters:
      - description: Filter by user id
        explode: true
        in: query
        name: id
        required: false
        schema:
          type: string
        style: form
      - description: Filter by a comma-separated list of user ids.
        explode: true
        in: query
        name: idIn
        required: false
        schema:
          type: string
        style: form
      - description: Filter by the first name of the user. Exact match.
        explode: true
        in: query
        name: firstName
        required: false
        schema:
          type: string
        style: form
      - description: Filter by the first name that the parameter is a substring of.
        explode: true
        in: query
        name: firstNameLike
        required: false
        schema:
          type: string
        style: form
      - description: Filter by the last name of the user. Exact match.
        explode: true
        in: query
        name: lastName
        required: false
        schema:
          type: string
        style: form
      - description: Filter by the last name that the parameter is a substring of.
        explode: true
        in: query
        name: lastNameLike
        required: false
        schema:
          type: string
        style: form
      - description: Filter by the email of the user. Exact match.
        explode: true
        in: query
        name: email
        required: false
        schema:
          type: string
        style: form
      - description: Filter by the email that the parameter is a substring of.
        explode: true
        in: query
        name: emailLike
        required: false
        schema:
          type: string
        style: form
      - description: Filter for users which are members of the given group.
        explode: true
        in: query
        name: memberOfGroup
        required: false
        schema:
          type: string
        style: form
      - description: Filter for users which are members of the given tenant.
        explode: true
        in: query
        name: memberOfTenant
        required: false
        schema:
          type: string
        style: form
      - description: Only select Users that are potential starter for the given process
          definition.
        explode: true
        in: query
        name: potentialStarter
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              examples:
                example-1:
                  summary: GET `/user/count?firstName=John`
                  value:
                    count: 2
              schema:
                $ref: '#/components/schemas/CountResultDto'
          description: Request successful.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
          description: |-
            Returned if some of the query parameters are invalid, for example, if an invalid operator for variable
            comparison is used. See the [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
      summary: Get List Count
      tags:
      - User
      x-accepts: application/json
  /user/create:
    post:
      description: Create a new user.
      operationId: createUser
      requestBody:
        content:
          application/json:
            examples:
              example-1:
                summary: POST /user/create
                value:
                  profile:
                    id: jonny1
                    firstName: John
                    lastName: Doe
                    email: anEmailAddress
                  credentials:
                    password: s3cret
            schema:
              $ref: '#/components/schemas/UserDto'
      responses:
        "204":
          description: Request successful.
      summary: Create
      tags:
      - User
      x-contentType: application/json
      x-accepts: application/json
  /user/{id}:
    delete:
      description: Deletes a user by id.
      operationId: deleteUser
      parameters:
      - description: The id of the user to be deleted.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: Request successful.
        "403":
          content:
            application/json:
              schema: {}
          description: Identity service is read-only (Cannot modify users / groups
            / memberships).
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
          description: |-
            A Deployment with the provided id does not exist. See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
      summary: Delete
      tags:
      - User
      x-accepts: application/json
    options:
      description: |-
        The `/user` resource supports two custom `OPTIONS` requests, one for the resource as such
        and one for individual user instances. The `OPTIONS` request allows checking for the set of
        available operations that the currently authenticated user can perform on the /user resource.
        If the user can perform an operation or not may depend on various things, including the user's
        authorizations to interact with this resource and the internal configuration of the process
        engine.
      operationId: availableUserOperations
      parameters:
      - description: The id of the user to be deleted.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              examples:
                example-1:
                  summary: GET `/user`
                  value:
                    links:
                    - method: GET
                      href: http://localhost:8080/camunda/api/engine/engine/default/user/peter/profile
                      rel: self
                    - method: DELETE
                      href: http://localhost:8080/camunda/api/engine/engine/default/user/peter
                      rel: delete
                    - method: PUT
                      href: http://localhost:8080/camunda/api/engine/engine/default/user/peter/profile
                      rel: update
              schema:
                $ref: '#/components/schemas/ResourceOptionsDto'
          description: Request successful.
      summary: Options
      tags:
      - User
      x-accepts: application/json
  /user/{id}/credentials:
    put:
      description: Updates a user's credentials (password)
      operationId: updateCredentials
      parameters:
      - description: The id of the user to be updated.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - description: The users new password.
        explode: true
        in: query
        name: password
        required: true
        schema:
          type: string
        style: form
      - description: |-
          The password of the authenticated user who changes the password of the user
          (i.e., the user with passed id as path parameter).
        explode: true
        in: query
        name: authenticatedUserPassword
        required: true
        schema:
          type: string
        style: form
      requestBody:
        content:
          application/json:
            examples:
              example-1:
                summary: PUT /user/jonny1/credentials
                value:
                  password: s3cr3t
                  authenticatedUserPassword: demo
            schema:
              $ref: '#/components/schemas/UserCredentialsDto'
      responses:
        "200":
          content:
            application/json:
              schema: {}
          description: Request successful.
        "403":
          content:
            application/json:
              schema: {}
          description: Identity service is read-only (Cannot modify users / groups
            / memberships).
        "400":
          content:
            application/json:
              schema: {}
          description: The authenticated user password does not match
        "404":
          content:
            application/json:
              schema: {}
          description: If the corresponding user cannot be found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
          description: |-
            The user could not be updated due to an internal server error. See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
      summary: Update Credentials
      tags:
      - User
      x-contentType: application/json
      x-accepts: application/json
  /user/{id}/profile:
    get:
      description: Retrieves a user's profile.
      operationId: getUserProfile
      parameters:
      - description: The id of the user to retrieve.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              examples:
                example-1:
                  summary: GET `/user/jonny1/profile
                  value:
                  - id: jonny1
                    firstName: John
                    lastName: Doe
                    email: anEmailAddress
              schema:
                items:
                  $ref: '#/components/schemas/UserProfileDto'
                type: array
          description: Request successful.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
          description: |-
            Execution with given id does not exist. See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
      summary: Get Profile
      tags:
      - User
      x-accepts: application/json
  /user/{id}/unlock:
    post:
      description: Unlocks a user by id.
      operationId: unlockUser
      parameters:
      - description: The id of the user to be unlocked.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: Request successful.
        "403":
          content:
            application/json:
              schema: {}
          description: The user who performed the operation is not a Camunda admin
            user.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
          description: |-
            User cannot be found. See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
      summary: Unlock User
      tags:
      - User
      x-accepts: application/json
  /version:
    get:
      description: Retrieves the version of the Rest API.
      operationId: getRestAPIVersion
      responses:
        "200":
          content:
            application/json:
              examples:
                example-1:
                  description: The Response content of a status 200
                  summary: Status 200 Response
                  value:
                    version: 7.13.0
              schema:
                $ref: '#/components/schemas/VersionDto'
          description: Request successful.
      tags:
      - Version
      x-accepts: application/json
components:
  schemas:
    AbstractSetRemovalTimeDto:
      properties:
        absoluteRemovalTime:
          description: |-
            The date for which the instances shall be removed. Value may not be `null`.

            **Note:** Cannot be set in conjunction with `clearedRemovalTime` or `calculatedRemovalTime`.
          format: date-time
          nullable: true
          type: string
        clearedRemovalTime:
          description: |-
            Sets the removal time to `null`. Value may only be `true`, as `false` is the default behavior.

            **Note:** Cannot be set in conjunction with `absoluteRemovalTime` or `calculatedRemovalTime`.
          nullable: true
          type: boolean
        calculatedRemovalTime:
          description: |-
            The removal time is calculated based on the engine's configuration settings. Value may only be `true`, as `false` is the default behavior.

            **Note:** Cannot be set in conjunction with `absoluteRemovalTime` or `clearedRemovalTime`.
          nullable: true
          type: boolean
      type: object
    ActivityInstanceDto:
      description: A JSON object corresponding to the Activity Instance tree of the
        given process instance.
      example:
        childTransitionInstances:
        - activityId: activityId
          processInstanceId: processInstanceId
          processDefinitionId: processDefinitionId
          executionId: executionId
          activityName: activityName
          incidents:
          - id: id
            parentActivityInstanceId: parentActivityInstanceId
          - id: id
            parentActivityInstanceId: parentActivityInstanceId
          id: id
          activityType: activityType
          incidentIds:
          - incidentIds
          - incidentIds
          parentActivityInstanceId: parentActivityInstanceId
        - activityId: activityId
          processInstanceId: processInstanceId
          processDefinitionId: processDefinitionId
          executionId: executionId
          activityName: activityName
          incidents:
          - id: id
            parentActivityInstanceId: parentActivityInstanceId
          - id: id
            parentActivityInstanceId: parentActivityInstanceId
          id: id
          activityType: activityType
          incidentIds:
          - incidentIds
          - incidentIds
          parentActivityInstanceId: parentActivityInstanceId
        activityId: activityId
        processInstanceId: processInstanceId
        processDefinitionId: processDefinitionId
        executionIds:
        - executionIds
        - executionIds
        activityName: activityName
        incidents:
        - id: id
          parentActivityInstanceId: parentActivityInstanceId
        - id: id
          parentActivityInstanceId: parentActivityInstanceId
        id: id
        activityType: activityType
        incidentIds:
        - incidentIds
        - incidentIds
        childActivityInstances:
        - null
        - null
        parentActivityInstanceId: parentActivityInstanceId
      properties:
        id:
          description: The id of the activity instance.
          type: string
        parentActivityInstanceId:
          description: The id of the parent activity instance, for example a sub process
            instance.
          type: string
        activityId:
          description: The id of the activity.
          type: string
        activityName:
          description: The name of the activity
          type: string
        activityType:
          description: The type of activity (corresponds to the XML element name in
            the BPMN 2.0, e.g., 'userTask')
          type: string
        processInstanceId:
          description: The id of the process instance this activity instance is part
            of.
          type: string
        processDefinitionId:
          description: The id of the process definition.
          type: string
        childActivityInstances:
          description: A list of child activity instances.
          items:
            $ref: '#/components/schemas/ActivityInstanceDto'
          type: array
        childTransitionInstances:
          description: |-
            A list of child transition instances.
            A transition instance represents an execution waiting in an asynchronous continuation.
          items:
            $ref: '#/components/schemas/TransitionInstanceDto'
          type: array
        executionIds:
          description: A list of execution ids.
          items:
            type: string
          type: array
        incidentIds:
          description: A list of incident ids.
          items:
            type: string
          type: array
        incidents:
          description: |-
            A list of JSON objects containing incident specific properties:
            * `id`: the id of the incident
            * `activityId`: the activity id in which the incident occurred
          items:
            $ref: '#/components/schemas/ActivityInstanceIncidentDto'
          type: array
      type: object
    ActivityInstanceIncidentDto:
      description: An activity instance, incident pair.
      example:
        id: id
        parentActivityInstanceId: parentActivityInstanceId
      properties:
        id:
          description: The id of the incident.
          type: string
        parentActivityInstanceId:
          description: The activity id in which the incident happened.
          type: string
      type: object
    ActivityStatisticsResultDto:
      example:
        instances: 0
        failedJobs: 6
        incidents:
        - incidentCount: 1
          incidentType: incidentType
        - incidentCount: 1
          incidentType: incidentType
        id: id
      properties:
        id:
          description: The id of the activity the results are aggregated for.
          type: string
        instances:
          description: The total number of running process instances of this activity.
          format: int32
          type: integer
        failedJobs:
          description: |-
            The total number of failed jobs for the running instances.
            **Note**: Will be `0` (not `null`), if failed jobs were excluded.
          format: int32
          type: integer
        incidents:
          description: |-
            Each item in the resulting array is an object which contains `incidentType` and `incidentCount`.
            **Note**: Will be an empty array, if `incidents` or `incidentsForType` were excluded.
            Furthermore, the array will be also empty if no incidents were found.
          items:
            $ref: '#/components/schemas/IncidentStatisticsResultDto'
          type: array
      type: object
    AtomLink:
      properties:
        rel:
          description: The relation of the link to the object that belongs to.
          type: string
        href:
          description: The url of the link.
          type: string
        method:
          description: The http method.
          type: string
      type: object
    AttachmentDto:
      allOf:
      - $ref: '#/components/schemas/AttachmentDto_allOf'
      - $ref: '#/components/schemas/LinkableDto'
    AuthorizationExceptionDto:
      allOf:
      - $ref: '#/components/schemas/AuthorizationExceptionDto_allOf'
      - $ref: '#/components/schemas/ExceptionDto'
    BatchDto:
      example:
        monitorJobDefinitionId: monitorJobDefinitionId
        createUserId: createUserId
        invocationsPerBatchJob: 5
        totalJobs: 0
        jobsCreated: 6
        tenantId: tenantId
        batchJobsPerSeed: 1
        seedJobDefinitionId: seedJobDefinitionId
        id: id
        type: type
        batchJobDefinitionId: batchJobDefinitionId
        suspended: true
      properties:
        id:
          description: The id of the batch.
          type: string
        type:
          description: The type of the batch.
          type: string
        totalJobs:
          description: The total jobs of a batch is the number of batch execution
            jobs required to complete the batch.
          format: int32
          type: integer
        jobsCreated:
          description: The number of batch execution jobs already created by the seed
            job.
          format: int32
          type: integer
        batchJobsPerSeed:
          description: |-
            The number of batch execution jobs created per seed job invocation.
            The batch seed job is invoked until it has created all batch execution jobs required by the batch (see totalJobs property).
          format: int32
          type: integer
        invocationsPerBatchJob:
          description: |-
            Every batch execution job invokes the command executed by the batch invocationsPerBatchJob times.
            E.g., for a process instance migration batch this specifies the number of process instances which are migrated per batch execution job.
          format: int32
          type: integer
        seedJobDefinitionId:
          description: The job definition id for the seed jobs of this batch.
          type: string
        monitorJobDefinitionId:
          description: The job definition id for the monitor jobs of this batch.
          type: string
        batchJobDefinitionId:
          description: The job definition id for the batch execution jobs of this
            batch.
          type: string
        suspended:
          description: Indicates whether this batch is suspended or not.
          type: boolean
        tenantId:
          description: The tenant id of the batch.
          type: string
        createUserId:
          description: The id of the user that created the batch.
          type: string
      type: object
    CaseDefinitionDto:
      properties:
        id:
          description: The id of the case definition
          type: string
        key:
          description: The key of the case definition, i.e., the id of the CMMN 2.0
            XML case definition.
          type: string
        category:
          description: The category of the case definition.
          type: string
        name:
          description: The name of the case definition.
          type: string
        version:
          description: The version of the case definition that the engine assigned
            to it.
          format: int32
          type: integer
        resource:
          description: The file name of the case definition.
          type: string
        deploymentId:
          description: The deployment id of the case definition.
          type: string
        tenantId:
          description: The tenant id of the case definition.
          type: string
        historyTimeToLive:
          description: |-
            History time to live value of the case definition.
            Is used within [History cleanup](https://docs.camunda.org/manual/7.14/user-guide/process-engine/history/#history-cleanup).
          format: int32
          minimum: 0
          nullable: true
          type: integer
      type: object
    CommentDto:
      allOf:
      - $ref: '#/components/schemas/CommentDto_allOf'
      - $ref: '#/components/schemas/LinkableDto'
    CompleteExternalTaskDto:
      example:
        workerId: workerId
        variables:
          key:
            valueInfo:
              key: '{}'
            type: type
            value: '{}'
        localVariables:
          key:
            valueInfo:
              key: '{}'
            type: type
            value: '{}'
      properties:
        workerId:
          description: The id of the worker that completes the task. Must match the
            id of the worker who has most recently locked the task.
          type: string
        variables:
          additionalProperties:
            $ref: '#/components/schemas/VariableValueDto'
          description: 'A JSON object containing variable key-value pairs. Each key
            is a variable name and each value a JSON variable value object with the
            following properties:'
          type: object
        localVariables:
          additionalProperties:
            $ref: '#/components/schemas/VariableValueDto'
          description: 'A JSON object containing local variable key-value pairs. Local
            variables are set only in the scope of external task. Each key is a variable
            name and each value a JSON variable value object with the following properties:'
          type: object
      type: object
    CompleteTaskDto:
      example:
        variables:
          key:
            valueInfo:
              key: '{}'
            type: type
            value: '{}'
        withVariablesInReturn: false
      properties:
        variables:
          additionalProperties:
            $ref: '#/components/schemas/VariableValueDto'
          description: A JSON object containing variable key-value pairs.
          type: object
        withVariablesInReturn:
          default: false
          description: |-
            Indicates whether the response should contain the process variables or not. The
            default is `false` with a response code of `204`. If set to `true` the response
            contains the process variables and has a response code of `200`. If the task is not
            associated with a process instance (e.g. if it's part of a case instance) no
            variables will be returned.
          nullable: true
          type: boolean
      type: object
    CorrelationMessageDto:
      example:
        messageName: messageName
        all: false
        processInstanceId: processInstanceId
        localCorrelationKeys:
          key:
            valueInfo:
              key: '{}'
            type: type
            value: '{}'
        businessKey: businessKey
        tenantId: tenantId
        withoutTenantId: false
        correlationKeys:
          key:
            valueInfo:
              key: '{}'
            type: type
            value: '{}'
        processVariables:
          key:
            valueInfo:
              key: '{}'
            type: type
            value: '{}'
        processVariablesLocal:
          key:
            valueInfo:
              key: '{}'
            type: type
            value: '{}'
        resultEnabled: false
        variablesInResultEnabled: false
      properties:
        messageName:
          description: The name of the message to deliver.
          type: string
        businessKey:
          description: |-
            Used for correlation of process instances that wait for incoming messages.
            Will only correlate to executions that belong to a process instance with the provided business key.
          type: string
        tenantId:
          description: |-
            Used to correlate the message for a tenant with the given id.
            Will only correlate to executions and process definitions which belong to the tenant.
            Must not be supplied in conjunction with a `withoutTenantId`.
          type: string
        withoutTenantId:
          default: false
          description: |-
            A Boolean value that indicates whether the message should only be correlated to executions
            and process definitions which belong to no tenant or not. Value may only be `true`, as `false`
            is the default behavior.
            Must not be supplied in conjunction with a `tenantId`.
          nullable: true
          type: boolean
        processInstanceId:
          description: Used to correlate the message to the process instance with
            the given id.
          type: string
        correlationKeys:
          additionalProperties:
            $ref: '#/components/schemas/VariableValueDto'
          description: |-
            Used for correlation of process instances that wait for incoming messages.
            Has to be a JSON object containing key-value pairs that are matched against process instance variables
            during correlation. Each key is a variable name and each value a JSON variable value object with the
            following properties.
          type: object
        localCorrelationKeys:
          additionalProperties:
            $ref: '#/components/schemas/VariableValueDto'
          description: |-
            Local variables used for correlation of executions (process instances) that wait for incoming messages.
            Has to be a JSON object containing key-value pairs that are matched against local variables during correlation.
            Each key is a variable name and each value a JSON variable value object with the following properties.
          type: object
        processVariables:
          additionalProperties:
            $ref: '#/components/schemas/VariableValueDto'
          description: |-
            A map of variables that is injected into the triggered execution or process instance after the message
            has been delivered. Each key is a variable name and each value a JSON variable value object with
            the following properties.
          type: object
        processVariablesLocal:
          additionalProperties:
            $ref: '#/components/schemas/VariableValueDto'
          description: |-
            A map of local variables that is injected into the triggered execution or process instance after the
            message has been delivered. Each key is a variable name and each value a JSON variable value object
            with the following properties.
          type: object
        all:
          default: false
          description: |-
            A Boolean value that indicates whether the message should be correlated to exactly one entity or multiple entities.
            If the value is set to `false`, the message will be correlated to exactly one entity (execution or process definition).
            If the value is set to `true`, the message will be correlated to multiple executions and a process definition that
            can be instantiated by this message in one go.
          nullable: true
          type: boolean
        resultEnabled:
          default: false
          description: |-
            A Boolean value that indicates whether the result of the correlation should be returned or not.
            If this property is set to `true`, there will be returned a list of message correlation result objects. Depending on the
            all property, there will be either one ore more returned results in the list.

            The default value is `false`, which means no result will be returned.
          nullable: true
          type: boolean
        variablesInResultEnabled:
          default: false
          description: |-
            A Boolean value that indicates whether the result of the correlation should contain process variables or not.
            The parameter resultEnabled should be set to `true` in order to use this it.

            The default value is `false`, which means the variables will not be returned.
          nullable: true
          type: boolean
      type: object
    CountResultDto:
      example:
        count: 0
      properties:
        count:
          description: The number of matching instances.
          format: int64
          type: integer
      type: object
    DecisionDefinitionDto:
      properties:
        id:
          description: The id of the decision definition
          type: string
        key:
          description: The key of the decision definition, i.e., the id of the DMN
            1.0 XML decision definition.
          type: string
        category:
          description: The category of the decision definition.
          type: string
        name:
          description: The name of the decision definition.
          type: string
        version:
          description: The version of the decision definition that the engine assigned
            to it.
          format: int32
          type: integer
        resource:
          description: The file name of the decision definition.
          type: string
        deploymentId:
          description: The deployment id of the decision definition.
          type: string
        tenantId:
          description: The tenant id of the decision definition.
          type: string
        decisionRequirementsDefinitionId:
          description: The id of the decision requirements definition this decision
            definition belongs to.
          type: string
        decisionRequirementsDefinitionKey:
          description: The key of the decision requirements definition this decision
            definition belongs to.
          type: string
        historyTimeToLive:
          description: |-
            History time to live value of the decision definition.
            Is used within [History cleanup](https://docs.camunda.org/manual/7.14/user-guide/process-engine/history/#history-cleanup).
          format: int32
          minimum: 0
          nullable: true
          type: integer
        versionTag:
          description: The version tag of the decision definition.
          type: string
      type: object
    DecisionRequirementsDefinitionDto:
      properties:
        id:
          description: The id of the decision requirements definition
          type: string
        key:
          description: The key of the decision requirements definition, i.e., the
            id of the DMN 1.0 XML decision definition.
          type: string
        name:
          description: The name of the decision requirements definition.
          type: string
        category:
          description: The category of the decision requirements definition.
          type: string
        version:
          description: The version of the decision requirements definition that the
            engine assigned to it.
          format: int32
          type: integer
        resource:
          description: The file name of the decision requirements definition.
          type: string
        deploymentId:
          description: The deployment id of the decision requirements definition.
          type: string
        tenantId:
          description: The tenant id of the decisionrequirements definition.
          type: string
      type: object
    DeleteHistoricProcessInstancesDto:
      example:
        historicProcessInstanceIds:
        - historicProcessInstanceIds
        - historicProcessInstanceIds
        historicProcessInstanceQuery:
          variableNamesIgnoreCase: true
          subCaseInstanceId: subCaseInstanceId
          incidentType: incidentType
          executedActivityAfter: 2000-01-23T04:56:07.000+00:00
          processDefinitionName: processDefinitionName
          executedJobAfter: 2000-01-23T04:56:07.000+00:00
          processDefinitionKey: processDefinitionKey
          withRootIncidents: true
          subProcessInstanceId: subProcessInstanceId
          tenantIdIn:
          - tenantIdIn
          - tenantIdIn
          internallyTerminated: true
          processInstanceBusinessKey: processInstanceBusinessKey
          sorting:
          - sortOrder: asc
            sortBy: instanceId
          - sortOrder: asc
            sortBy: instanceId
          variableValuesIgnoreCase: true
          processDefinitionKeyNotIn:
          - processDefinitionKeyNotIn
          - processDefinitionKeyNotIn
          unfinished: true
          startedAfter: 2000-01-23T04:56:07.000+00:00
          executedActivityBefore: 2000-01-23T04:56:07.000+00:00
          rootProcessInstances: true
          withIncidents: true
          incidentStatus: open
          superProcessInstanceId: superProcessInstanceId
          processInstanceId: processInstanceId
          processDefinitionId: processDefinitionId
          processDefinitionNameLike: processDefinitionNameLike
          finishedAfter: 2000-01-23T04:56:07.000+00:00
          variables:
          - name: name
            value: '{}'
            operator: eq
          - name: name
            value: '{}'
            operator: eq
          incidentMessage: incidentMessage
          activeActivityIdIn:
          - activeActivityIdIn
          - activeActivityIdIn
          processDefinitionKeyIn:
          - processDefinitionKeyIn
          - processDefinitionKeyIn
          startedBy: startedBy
          caseInstanceId: caseInstanceId
          externallyTerminated: true
          executedActivityIdIn:
          - executedActivityIdIn
          - executedActivityIdIn
          active: true
          finished: true
          completed: true
          superCaseInstanceId: superCaseInstanceId
          processInstanceIds:
          - processInstanceIds
          - processInstanceIds
          suspended: true
          orQueries:
          - null
          - null
          processInstanceBusinessKeyLike: processInstanceBusinessKeyLike
          withoutTenantId: true
          startedBefore: 2000-01-23T04:56:07.000+00:00
          incidentMessageLike: incidentMessageLike
          finishedBefore: 2000-01-23T04:56:07.000+00:00
          executedJobBefore: 2000-01-23T04:56:07.000+00:00
        deleteReason: deleteReason
        failIfNotExists: true
      properties:
        historicProcessInstanceIds:
          description: A list historic process instance ids to delete.
          items:
            type: string
          type: array
        historicProcessInstanceQuery:
          $ref: '#/components/schemas/HistoricProcessInstanceQueryDto'
        deleteReason:
          description: A string with delete reason.
          type: string
        failIfNotExists:
          description: If set to `false`, the request will still be successful if
            one ore more of the process ids are not found.
          nullable: true
          type: boolean
      type: object
    DeleteProcessInstancesDto:
      example:
        processInstanceQuery:
          subProcessInstance: subProcessInstance
          variableNamesIgnoreCase: true
          withIncident: true
          incidentType: incidentType
          processDefinitionKey: processDefinitionKey
          processDefinitionWithoutTenantId: true
          tenantIdIn:
          - tenantIdIn
          - tenantIdIn
          deploymentId: deploymentId
          sorting:
          - sortOrder: asc
            sortBy: instanceId
          - sortOrder: asc
            sortBy: instanceId
          variableValuesIgnoreCase: true
          processDefinitionKeyNotIn:
          - processDefinitionKeyNotIn
          - processDefinitionKeyNotIn
          rootProcessInstances: true
          leafProcessInstances: true
          activityIdIn:
          - activityIdIn
          - activityIdIn
          processDefinitionId: processDefinitionId
          variables:
          - name: name
            value: '{}'
            operator: eq
          - name: name
            value: '{}'
            operator: eq
          incidentMessage: incidentMessage
          businessKeyLike: businessKeyLike
          processDefinitionKeyIn:
          - processDefinitionKeyIn
          - processDefinitionKeyIn
          superCaseInstance: superCaseInstance
          caseInstanceId: caseInstanceId
          active: true
          suspended: true
          processInstanceIds:
          - processInstanceIds
          - processInstanceIds
          subCaseInstance: subCaseInstance
          superProcessInstance: superProcessInstance
          orQueries:
          - null
          - null
          businessKey: businessKey
          withoutTenantId: true
          incidentId: incidentId
          incidentMessageLike: incidentMessageLike
        historicProcessInstanceQuery:
          variableNamesIgnoreCase: true
          subCaseInstanceId: subCaseInstanceId
          incidentType: incidentType
          executedActivityAfter: 2000-01-23T04:56:07.000+00:00
          processDefinitionName: processDefinitionName
          executedJobAfter: 2000-01-23T04:56:07.000+00:00
          processDefinitionKey: processDefinitionKey
          withRootIncidents: true
          subProcessInstanceId: subProcessInstanceId
          tenantIdIn:
          - tenantIdIn
          - tenantIdIn
          internallyTerminated: true
          processInstanceBusinessKey: processInstanceBusinessKey
          sorting:
          - sortOrder: asc
            sortBy: instanceId
          - sortOrder: asc
            sortBy: instanceId
          variableValuesIgnoreCase: true
          processDefinitionKeyNotIn:
          - processDefinitionKeyNotIn
          - processDefinitionKeyNotIn
          unfinished: true
          startedAfter: 2000-01-23T04:56:07.000+00:00
          executedActivityBefore: 2000-01-23T04:56:07.000+00:00
          rootProcessInstances: true
          withIncidents: true
          incidentStatus: open
          superProcessInstanceId: superProcessInstanceId
          processInstanceId: processInstanceId
          processDefinitionId: processDefinitionId
          processDefinitionNameLike: processDefinitionNameLike
          finishedAfter: 2000-01-23T04:56:07.000+00:00
          variables:
          - name: name
            value: '{}'
            operator: eq
          - name: name
            value: '{}'
            operator: eq
          incidentMessage: incidentMessage
          activeActivityIdIn:
          - activeActivityIdIn
          - activeActivityIdIn
          processDefinitionKeyIn:
          - processDefinitionKeyIn
          - processDefinitionKeyIn
          startedBy: startedBy
          caseInstanceId: caseInstanceId
          externallyTerminated: true
          executedActivityIdIn:
          - executedActivityIdIn
          - executedActivityIdIn
          active: true
          finished: true
          completed: true
          superCaseInstanceId: superCaseInstanceId
          processInstanceIds:
          - processInstanceIds
          - processInstanceIds
          suspended: true
          orQueries:
          - null
          - null
          processInstanceBusinessKeyLike: processInstanceBusinessKeyLike
          withoutTenantId: true
          startedBefore: 2000-01-23T04:56:07.000+00:00
          incidentMessageLike: incidentMessageLike
          finishedBefore: 2000-01-23T04:56:07.000+00:00
          executedJobBefore: 2000-01-23T04:56:07.000+00:00
        deleteReason: deleteReason
        skipSubprocesses: true
        processInstanceIds:
        - processInstanceIds
        - processInstanceIds
        skipCustomListeners: true
      properties:
        processInstanceIds:
          description: A list process instance ids to delete.
          items:
            type: string
          type: array
        deleteReason:
          description: A string with delete reason.
          type: string
        skipCustomListeners:
          description: Skip execution listener invocation for activities that are
            started or ended as part of this request.
          nullable: true
          type: boolean
        skipSubprocesses:
          description: Skip deletion of the subprocesses related to deleted processes
            as part of this request.
          nullable: true
          type: boolean
        processInstanceQuery:
          $ref: '#/components/schemas/ProcessInstanceQueryDto'
        historicProcessInstanceQuery:
          $ref: '#/components/schemas/HistoricProcessInstanceQueryDto'
      type: object
    DeploymentDto:
      allOf:
      - $ref: '#/components/schemas/DeploymentDto_allOf'
      - $ref: '#/components/schemas/LinkableDto'
    DeploymentResourceDto:
      description: |-
        A JSON object corresponding to the `Resource` interface in the engine.
        Its properties are as follows:
      example:
        deploymentId: deploymentId
        name: name
        id: id
      properties:
        id:
          description: The id of the deployment resource.
          type: string
        name:
          description: The name of the deployment resource
          type: string
        deploymentId:
          description: The id of the deployment.
          type: string
      title: DeploymentResourceDto
      type: object
    DeploymentWithDefinitionsDto:
      allOf:
      - $ref: '#/components/schemas/DeploymentWithDefinitionsDto_allOf'
      - $ref: '#/components/schemas/DeploymentDto'
    DurationReportResultDto:
      properties:
        period:
          description: |-
            Specifies a timespan within a year.
            **Note:** The period must be interpreted in conjunction with the returned `periodUnit`.
          format: int32
          type: integer
        periodUnit:
          description: The unit of the given period. Possible values are `MONTH` and
            `QUARTER`.
          enum:
          - MONTH
          - QUARTER
          type: string
        minimum:
          description: The smallest duration in milliseconds of all completed process
            instances which were started in the given period.
          format: int64
          type: integer
        maximum:
          description: The greatest duration in milliseconds of all completed process
            instances which were started in the given period.
          format: int64
          type: integer
        average:
          description: The average duration in milliseconds of all completed process
            instances which were started in the given period.
          format: int64
          type: integer
      type: object
    EvaluationConditionDto:
      example:
        processDefinitionId: processDefinitionId
        variables:
          key:
            valueInfo:
              key: '{}'
            type: type
            value: '{}'
        businessKey: businessKey
        tenantId: tenantId
        withoutTenantId: true
      properties:
        variables:
          additionalProperties:
            $ref: '#/components/schemas/VariableValueDto'
          description: |-
            A map of variables which are used for evaluation of the conditions and are injected into the process instances which have been triggered.
            Each key is a variable name and each value a JSON variable value object with the following properties.
          type: object
        businessKey:
          description: Used for the process instances that have been triggered after
            the evaluation.
          type: string
        tenantId:
          description: |-
            Used to evaluate a condition for a tenant with the given id.
            Will only evaluate conditions of process definitions which belong to the tenant.
          type: string
        withoutTenantId:
          description: |-
            A Boolean value that indicates whether the conditions should only be evaluated of process definitions which belong to no tenant or not.
            Value may only be true, as false is the default behavior.
          nullable: true
          type: boolean
        processDefinitionId:
          description: Used to evaluate conditions of the process definition with
            the given id.
          type: string
      type: object
    EventSubscriptionDto:
      example:
        executionId: executionId
        processInstanceId: processInstanceId
        activityId: activityId
        createdDate: 2000-01-23T04:56:07.000+00:00
        tenantId: tenantId
        eventName: eventName
        id: id
        eventType: eventType
      properties:
        id:
          description: The id of the event subscription.
          type: string
        eventType:
          description: The type of the event subscription.
          type: string
        eventName:
          description: The name of the event this subscription belongs to as defined
            in the process model.
          type: string
        executionId:
          description: The execution that is subscribed on the referenced event.
          type: string
        processInstanceId:
          description: The process instance this subscription belongs to.
          type: string
        activityId:
          description: |-
            The identifier of the activity that this event subscription belongs to.
            This could for example be the id of a receive task.
          type: string
        createdDate:
          description: The time this event subscription was created.
          format: date-time
          nullable: true
          type: string
        tenantId:
          description: |-
            The id of the tenant this event subscription belongs to.
            Can be `null` if the subscription belongs to no single tenant.
          type: string
      type: object
    EventSubscriptionQueryDto:
      description: A event subscription query which retrieves a list of event subscriptions
      properties:
        eventSubscriptionId:
          description: The id of the event subscription.
          type: string
        eventName:
          description: The name of the event this subscription belongs to as defined
            in the process model.
          type: string
        eventType:
          description: The type of the event subscription.
          enum:
          - message
          - signal
          - compensate
          - conditional
          type: string
        executionId:
          description: The execution that is subscribed on the referenced event.
          type: string
        processInstanceId:
          description: The process instance this subscription belongs to.
          type: string
        activityId:
          description: |-
            The identifier of the activity that this event subscription belongs to.
            This could for example be the id of a receive task.
          type: string
        tenantIdIn:
          description: |-
            Filter by a comma-separated list of tenant ids.
            Only select subscriptions that belong to one of the given tenant ids.
          items:
            type: string
          type: array
        withoutTenantId:
          description: |-
            Only select subscriptions which have no tenant id.
            Value may only be `true`, as `false` is the default behavior.
          nullable: true
          type: boolean
        includeEventSubscriptionsWithoutTenantId:
          description: |-
            Select event subscriptions which have no tenant id.
            Can be used in combination with tenantIdIn parameter.
            Value may only be `true`, as `false` is the default behavior.
          nullable: true
          type: boolean
        sorting:
          description: Apply sorting of the result
          items:
            $ref: '#/components/schemas/EventSubscriptionQueryDto_sorting'
          type: array
      type: object
    ExceptionDto:
      properties:
        type:
          description: An exception class indicating the occurred error.
          type: string
        message:
          description: A detailed message of the error.
          type: string
      title: ExceptionDto
      type: object
    ExecutionDto:
      example:
        processInstanceId: processInstanceId
        ended: true
        tenantId: tenantId
        id: id
      properties:
        id:
          description: The id of the Execution.
          type: string
        processInstanceId:
          description: The id of the root of the execution tree representing the process
            instance.
          type: string
        ended:
          description: Indicates if the execution is ended.
          type: boolean
        tenantId:
          description: |-
            The id of the tenant this execution belongs to. Can be `null`
            if the execution belongs to no single tenant.
          type: string
      type: object
    ExtendLockOnExternalTaskDto:
      example:
        workerId: workerId
        newDuration: 0
      properties:
        workerId:
          description: The ID of a worker who is locking the external task.
          type: string
        newDuration:
          description: An amount of time (in milliseconds). This is the new lock duration
            starting from the current moment.
          format: int64
          type: integer
      type: object
    ExternalTaskBpmnError:
      allOf:
      - $ref: '#/components/schemas/ExternalTaskBpmnError_allOf'
      - $ref: '#/components/schemas/TaskBpmnErrorDto'
    ExternalTaskDto:
      description: An External Task object with the following properties
      example:
        processDefinitionId: processDefinitionId
        processInstanceId: processInstanceId
        workerId: workerId
        lockExpirationTime: 2000-01-23T04:56:07.000+00:00
        errorMessage: errorMessage
        activityInstanceId: activityInstanceId
        priority: 6
        suspended: true
        processDefinitionKey: processDefinitionKey
        activityId: activityId
        executionId: executionId
        processDefinitionVersionTag: processDefinitionVersionTag
        retries: 0
        tenantId: tenantId
        businessKey: businessKey
        topicName: topicName
        id: id
      properties:
        activityId:
          description: The id of the activity that this external task belongs to.
          type: string
        activityInstanceId:
          description: The id of the activity instance that the external task belongs
            to.
          type: string
        errorMessage:
          description: |-
            The full error message submitted with the latest reported failure executing this task; `null` if no
            failure was reported previously or if no error message was submitted
          type: string
        executionId:
          description: The id of the execution that the external task belongs to.
          type: string
        id:
          description: The id of the external task.
          type: string
        lockExpirationTime:
          description: The date that the task's most recent lock expires or has expired.
          format: date-time
          nullable: true
          type: string
        processDefinitionId:
          description: The id of the process definition the external task is defined
            in.
          type: string
        processDefinitionKey:
          description: The key of the process definition the external task is defined
            in.
          type: string
        processDefinitionVersionTag:
          description: The version tag of the process definition the external task
            is defined in.
          type: string
        processInstanceId:
          description: The id of the process instance the external task belongs to.
          type: string
        tenantId:
          description: The id of the tenant the external task belongs to.
          type: string
        retries:
          description: The number of retries the task currently has left.
          format: int32
          nullable: true
          type: integer
        suspended:
          description: A flag indicating whether the external task is suspended or
            not.
          nullable: true
          type: boolean
        workerId:
          description: The id of the worker that posesses or posessed the most recent
            lock.
          type: string
        topicName:
          description: The topic name of the external task.
          type: string
        priority:
          description: The priority of the external task.
          format: int64
          nullable: true
          type: integer
        businessKey:
          description: The business key of the process instance the external task
            belongs to.
          type: string
      title: ExternalTaskDto
      type: object
    ExternalTaskFailureDto:
      example:
        retries: 0
        workerId: workerId
        retryTimeout: 6
        errorMessage: errorMessage
        errorDetails: errorDetails
      properties:
        workerId:
          description: |-
            The id of the worker that reports the failure. Must match the id of the worker who has most recently
            locked the task.
          type: string
        errorMessage:
          description: An message indicating the reason of the failure.
          type: string
        errorDetails:
          description: A detailed error description.
          type: string
        retries:
          description: |-
            A number of how often the task should be retried. Must be >= 0. If this is 0, an incident is created and
            the task cannot be fetched anymore unless the retries are increased again. The incident's message is set
            to the `errorMessage` parameter.
          format: int32
          type: integer
        retryTimeout:
          description: A timeout in milliseconds before the external task becomes
            available again for fetching. Must be >= 0.
          format: int64
          type: integer
      type: object
    ExternalTaskQueryDto:
      description: 'A JSON object with the following properties:'
      example:
        processInstanceId: processInstanceId
        processDefinitionId: processDefinitionId
        workerId: workerId
        withRetriesLeft: true
        notLocked: true
        lockExpirationAfter: 2000-01-23T04:56:07.000+00:00
        active: true
        processInstanceIdIn:
        - processInstanceIdIn
        - processInstanceIdIn
        suspended: true
        activityId: activityId
        executionId: executionId
        priorityLowerThanOrEquals: 6
        priorityHigherThanOrEquals: 0
        lockExpirationBefore: 2000-01-23T04:56:07.000+00:00
        tenantIdIn:
        - tenantIdIn
        - tenantIdIn
        sorting:
        - sortOrder: asc
          sortBy: id
        - sortOrder: asc
          sortBy: id
        topicName: topicName
        noRetriesLeft: true
        externalTaskId: externalTaskId
        locked: true
        externalTaskIdIn:
        - externalTaskIdIn
        - externalTaskIdIn
        activityIdIn:
        - activityIdIn
        - activityIdIn
      properties:
        externalTaskId:
          description: Filter by an external task's id.
          type: string
        externalTaskIdIn:
          description: Filter by the comma-separated list of external task ids.
          items:
            type: string
          type: array
        topicName:
          description: Filter by an external task topic.
          type: string
        workerId:
          description: Filter by the id of the worker that the task was most recently
            locked by.
          type: string
        locked:
          description: |-
            Only include external tasks that are currently locked (i.e., they have a lock time and it has not expired).
            Value may only be `true`, as `false` matches any external task.
          nullable: true
          type: boolean
        notLocked:
          description: |-
            Only include external tasks that are currently not locked (i.e., they have no lock or it has expired).
            Value may only be `true`, as `false` matches any external task.
          nullable: true
          type: boolean
        withRetriesLeft:
          description: |-
            Only include external tasks that have a positive (&gt; 0) number of retries (or `null`). Value may only be
            `true`, as `false` matches any external task.
          nullable: true
          type: boolean
        noRetriesLeft:
          description: |-
            Only include external tasks that have 0 retries. Value may only be `true`, as `false` matches any
            external task.
          nullable: true
          type: boolean
        lockExpirationAfter:
          description: |-
            Restrict to external tasks that have a lock that expires after a given date. By
            [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format
            `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
          format: date-time
          nullable: true
          type: string
        lockExpirationBefore:
          description: |-
            Restrict to external tasks that have a lock that expires before a given date. By
            [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format
            `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
          format: date-time
          nullable: true
          type: string
        activityId:
          description: Filter by the id of the activity that an external task is created
            for.
          type: string
        activityIdIn:
          description: Filter by the comma-separated list of ids of the activities
            that an external task is created for.
          items:
            type: string
          type: array
        executionId:
          description: Filter by the id of the execution that an external task belongs
            to.
          type: string
        processInstanceId:
          description: Filter by the id of the process instance that an external task
            belongs to.
          type: string
        processInstanceIdIn:
          description: Filter by a comma-separated list of process instance ids that
            an external task may belong to.
          items:
            type: string
          type: array
        processDefinitionId:
          description: Filter by the id of the process definition that an external
            task belongs to.
          type: string
        tenantIdIn:
          description: |-
            Filter by a comma-separated list of tenant ids.
            An external task must have one of the given tenant ids.
          items:
            type: string
          type: array
        active:
          description: Only include active tasks. Value may only be `true`, as `false`
            matches any external task.
          nullable: true
          type: boolean
        suspended:
          description: Only include suspended tasks. Value may only be `true`, as
            `false` matches any external task.
          nullable: true
          type: boolean
        priorityHigherThanOrEquals:
          description: |-
            Only include jobs with a priority higher than or equal to the given value.
            Value must be a valid `long` value.
          format: int64
          nullable: true
          type: integer
        priorityLowerThanOrEquals:
          description: |-
            Only include jobs with a priority lower than or equal to the given value.
            Value must be a valid `long` value.
          format: int64
          nullable: true
          type: integer
        sorting:
          description: |-
            A JSON array of criteria to sort the result by. Each element of the array is a JSON object that
                                specifies one ordering. The position in the array identifies the rank of an ordering, i.e., whether
                                it is primary, secondary, etc. The ordering objects have the following properties:

                                **Note:** The `sorting` properties will not be applied to the External Task count query.
          items:
            $ref: '#/components/schemas/ExternalTaskQueryDto_sorting'
          type: array
      title: ExternalTaskQueryDto
      type: object
    FetchExternalTaskTopicDto:
      example:
        processDefinitionId: processDefinitionId
        variables:
        - variables
        - variables
        includeExtensionProperties: false
        lockDuration: 1
        processDefinitionKeyIn:
        - processDefinitionKeyIn
        - processDefinitionKeyIn
        processDefinitionIdIn:
        - processDefinitionIdIn
        - processDefinitionIdIn
        processDefinitionKey: processDefinitionKey
        processDefinitionVersionTag: processDefinitionVersionTag
        localVariables: false
        deserializeValues: false
        tenantIdIn:
        - tenantIdIn
        - tenantIdIn
        businessKey: businessKey
        topicName: topicName
        withoutTenantId: false
        processVariables:
          key: '{}'
      properties:
        topicName:
          description: '**Mandatory.** The topic''s name.'
          type: string
        lockDuration:
          description: '**Mandatory.** The duration to lock the external tasks for
            in milliseconds.'
          format: int64
          nullable: true
          type: integer
        variables:
          description: |-
            A JSON array of `String` values that represent variable names. For each result task belonging to this
            topic, the given variables are returned as well if they are accessible from the external task's
            execution. If not provided - all variables will be fetched.
          items:
            type: string
          type: array
        localVariables:
          default: false
          description: If `true` only local variables will be fetched.
          nullable: true
          type: boolean
        businessKey:
          description: A `String` value which enables the filtering of tasks based
            on process instance business key.
          type: string
        processDefinitionId:
          description: Filter tasks based on process definition id.
          type: string
        processDefinitionIdIn:
          description: Filter tasks based on process definition ids.
          items:
            type: string
          type: array
        processDefinitionKey:
          description: Filter tasks based on process definition key.
          type: string
        processDefinitionKeyIn:
          description: Filter tasks based on process definition keys.
          items:
            type: string
          type: array
        processDefinitionVersionTag:
          description: Filter tasks based on process definition version tag.
          type: string
        withoutTenantId:
          default: false
          description: Filter tasks without tenant id.
          nullable: true
          type: boolean
        tenantIdIn:
          description: Filter tasks based on tenant ids.
          items:
            type: string
          type: array
        processVariables:
          additionalProperties: true
          description: |-
            A `JSON` object used for filtering tasks based on process instance variable values. A property name of
            the object represents a process variable name, while the property value represents the process variable
            value to filter tasks by.
          type: object
        deserializeValues:
          default: false
          description: |-
            Determines whether serializable variable values (typically variables that store custom Java objects)
            should be deserialized on server side (default `false`).

            If set to `true`, a serializable variable will be deserialized on server side and transformed to JSON
            using [Jackson's](https://github.com/FasterXML/jackson) POJO/bean property introspection feature. Note
            that this requires the Java classes of the variable value to be on the REST API's classpath.

            If set to `false`, a serializable variable will be returned in its serialized format. For example, a
            variable that is serialized as XML will be returned as a JSON string containing XML.
          nullable: true
          type: boolean
        includeExtensionProperties:
          default: false
          description: |-
            Determines whether custom extension properties defined in the BPMN activity of the external task (e.g.
            via the Extensions tab in the Camunda modeler) should be included in the response. Default: false
          nullable: true
          type: boolean
      required:
      - lockDuration
      - topicName
      type: object
    FetchExternalTasksDto:
      example:
        workerId: workerId
        asyncResponseTimeout: 6
        maxTasks: 0
        topics:
        - processDefinitionId: processDefinitionId
          variables:
          - variables
          - variables
          includeExtensionProperties: false
          lockDuration: 1
          processDefinitionKeyIn:
          - processDefinitionKeyIn
          - processDefinitionKeyIn
          processDefinitionIdIn:
          - processDefinitionIdIn
          - processDefinitionIdIn
          processDefinitionKey: processDefinitionKey
          processDefinitionVersionTag: processDefinitionVersionTag
          localVariables: false
          deserializeValues: false
          tenantIdIn:
          - tenantIdIn
          - tenantIdIn
          businessKey: businessKey
          topicName: topicName
          withoutTenantId: false
          processVariables:
            key: '{}'
        - processDefinitionId: processDefinitionId
          variables:
          - variables
          - variables
          includeExtensionProperties: false
          lockDuration: 1
          processDefinitionKeyIn:
          - processDefinitionKeyIn
          - processDefinitionKeyIn
          processDefinitionIdIn:
          - processDefinitionIdIn
          - processDefinitionIdIn
          processDefinitionKey: processDefinitionKey
          processDefinitionVersionTag: processDefinitionVersionTag
          localVariables: false
          deserializeValues: false
          tenantIdIn:
          - tenantIdIn
          - tenantIdIn
          businessKey: businessKey
          topicName: topicName
          withoutTenantId: false
          processVariables:
            key: '{}'
        usePriority: true
      properties:
        workerId:
          description: |-
            **Mandatory.** The id of the worker on which behalf tasks are fetched. The returned tasks are locked for
            that worker and can only be completed when providing the same worker id.
          type: string
        maxTasks:
          description: '**Mandatory.** The maximum number of tasks to return.'
          format: int32
          nullable: true
          type: integer
        usePriority:
          description: |-
            A `boolean` value, which indicates whether the task should be fetched based on its priority
            or arbitrarily.
          nullable: true
          type: boolean
        asyncResponseTimeout:
          description: |-
            The [Long Polling](https://docs.camunda.org/manual/7.14/user-guide/process-engine/external-tasks/#long-polling-to-fetch-and-lock-external-tasks)
            timeout in milliseconds.

            **Note:** The value cannot be set larger than 1.800.000 milliseconds (corresponds to 30 minutes).
          format: int64
          nullable: true
          type: integer
        topics:
          description: |-
            A JSON array of topic objects for which external tasks should be fetched. The returned tasks may be
            arbitrarily distributed among these topics. Each topic object has the following properties:
          items:
            $ref: '#/components/schemas/FetchExternalTaskTopicDto'
          type: array
      required:
      - maxTasks
      - workerId
      type: object
    FormDto:
      example:
        contextPath: contextPath
        key: key
      properties:
        key:
          description: The form key.
          type: string
        contextPath:
          description: |-
            The context path of the process application. If the task (or the process definition) does not
            belong to a process application deployment or a process definition at all, this
            property is not set.
          type: string
      title: FormDto
      type: object
    HistoricActivityInstanceDto:
      example:
        processDefinitionId: processDefinitionId
        processInstanceId: processInstanceId
        durationInMillis: 0
        activityName: activityName
        completeScope: true
        processDefinitionKey: processDefinitionKey
        removalTime: 2000-01-23T04:56:07.000+00:00
        activityId: activityId
        executionId: executionId
        canceled: true
        calledCaseInstanceId: calledCaseInstanceId
        tenantId: tenantId
        startTime: 2000-01-23T04:56:07.000+00:00
        rootProcessInstanceId: rootProcessInstanceId
        id: id
        assignee: assignee
        endTime: 2000-01-23T04:56:07.000+00:00
        activityType: activityType
        calledProcessInstanceId: calledProcessInstanceId
        taskId: taskId
        parentActivityInstanceId: parentActivityInstanceId
      properties:
        id:
          description: The id of the activity instance.
          type: string
        parentActivityInstanceId:
          description: The id of the parent activity instance, for example a sub process
            instance.
          type: string
        activityId:
          description: The id of the activity that this object is an instance of.
          type: string
        activityName:
          description: The name of the activity that this object is an instance of.
          type: string
        activityType:
          description: The type of the activity that this object is an instance of.
          type: string
        processDefinitionKey:
          description: The key of the process definition that this activity instance
            belongs to.
          type: string
        processDefinitionId:
          description: The id of the process definition that this activity instance
            belongs to.
          type: string
        processInstanceId:
          description: The id of the process instance that this activity instance
            belongs to.
          type: string
        executionId:
          description: The id of the execution that executed this activity instance.
          type: string
        taskId:
          description: The id of the task that is associated to this activity instance.
            Is only set if the activity is a user task.
          type: string
        assignee:
          description: The assignee of the task that is associated to this activity
            instance. Is only set if the activity is a user task.
          type: string
        calledProcessInstanceId:
          description: The id of the called process instance. Is only set if the activity
            is a call activity and the called instance a process instance.
          type: string
        calledCaseInstanceId:
          description: The id of the called case instance. Is only set if the activity
            is a call activity and the called instance a case instance.
          type: string
        startTime:
          description: |-
            The time the instance was started. By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/),
            the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
          format: date-time
          nullable: true
          type: string
        endTime:
          description: |-
            The time the instance ended. By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/),
            the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
          format: date-time
          nullable: true
          type: string
        durationInMillis:
          description: The time the instance took to finish (in milliseconds).
          format: int32
          type: integer
        canceled:
          description: If `true`, this activity instance is canceled.
          nullable: true
          type: boolean
        completeScope:
          description: If `true`, this activity instance did complete a BPMN 2.0 scope.
          nullable: true
          type: boolean
        tenantId:
          description: The tenant id of the activity instance.
          type: string
        removalTime:
          description: |-
            The time after which the activity instance should be removed by the History Cleanup job. By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/),
            the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
          format: date-time
          nullable: true
          type: string
        rootProcessInstanceId:
          description: The process instance id of the root process instance that initiated
            the process containing this activity instance.
          type: string
      type: object
    HistoricActivityInstanceQueryDto:
      description: A historic activity instance query which defines a group of historic
        activity instances
      example:
        processInstanceId: processInstanceId
        processDefinitionId: processDefinitionId
        finishedAfter: 2000-01-23T04:56:07.000+00:00
        activityName: activityName
        finished: true
        activityInstanceId: activityInstanceId
        completeScope: true
        executionId: executionId
        activityId: activityId
        canceled: true
        tenantIdIn:
        - tenantIdIn
        - tenantIdIn
        sorting:
        - sortOrder: asc
          sortBy: activityInstanceId
        - sortOrder: asc
          sortBy: activityInstanceId
        taskAssignee: taskAssignee
        withoutTenantId: true
        unfinished: true
        startedAfter: 2000-01-23T04:56:07.000+00:00
        activityType: activityType
        startedBefore: 2000-01-23T04:56:07.000+00:00
        finishedBefore: 2000-01-23T04:56:07.000+00:00
      properties:
        activityInstanceId:
          description: Filter by activity instance id.
          type: string
        processInstanceId:
          description: Filter by process instance id.
          type: string
        processDefinitionId:
          description: Filter by process definition id.
          type: string
        executionId:
          description: Filter by the id of the execution that executed the activity
            instance.
          type: string
        activityId:
          description: Filter by the activity id (according to BPMN 2.0 XML).
          type: string
        activityName:
          description: Filter by the activity name (according to BPMN 2.0 XML).
          type: string
        activityType:
          description: Filter by activity type.
          type: string
        taskAssignee:
          description: Only include activity instances that are user tasks and assigned
            to a given user.
          type: string
        finished:
          description: |-
            Only include finished activity instances.
            Value may only be `true`, as `false` behaves the same as when the property is not set.
          nullable: true
          type: boolean
        unfinished:
          description: |-
            Only include unfinished activity instances.
            Value may only be `true`, as `false` behaves the same as when the property is not set.
          nullable: true
          type: boolean
        canceled:
          description: |-
            Only include canceled activity instances.
            Value may only be `true`, as `false` behaves the same as when the property is not set.
          nullable: true
          type: boolean
        completeScope:
          description: |-
            Only include activity instances which completed a scope.
            Value may only be `true`, as `false` behaves the same as when the property is not set.
          nullable: true
          type: boolean
        startedBefore:
          description: |-
            Restrict to instances that were started before the given date. By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/),
            the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
          format: date-time
          nullable: true
          type: string
        startedAfter:
          description: |-
            Restrict to instances that were started after the given date. By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/),
            the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
          format: date-time
          nullable: true
          type: string
        finishedBefore:
          description: |-
            Restrict to instances that were finished before the given date. By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/),
            the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
          format: date-time
          nullable: true
          type: string
        finishedAfter:
          description: |-
            Restrict to instances that were finished after the given date. By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/),
            the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
          format: date-time
          nullable: true
          type: string
        tenantIdIn:
          description: Must be a JSON array of Strings. An activity instance must
            have one of the given tenant ids.
          items:
            type: string
          type: array
        withoutTenantId:
          description: Only include historic activity instances that belong to no
            tenant. Value may only be `true`, as `false` is the default behavior.
          nullable: true
          type: boolean
        sorting:
          description: Apply sorting of the result
          items:
            $ref: '#/components/schemas/HistoricActivityInstanceQueryDto_sorting'
          type: array
      type: object
    HistoricProcessInstanceDto:
      example:
        processDefinitionId: processDefinitionId
        durationInMillis: 6
        caseInstanceId: caseInstanceId
        processDefinitionName: processDefinitionName
        superCaseInstanceId: superCaseInstanceId
        deleteReason: deleteReason
        processDefinitionKey: processDefinitionKey
        removalTime: 2000-01-23T04:56:07.000+00:00
        startUserId: startUserId
        startActivityId: startActivityId
        businessKey: businessKey
        tenantId: tenantId
        rootProcessInstanceId: rootProcessInstanceId
        startTime: 2000-01-23T04:56:07.000+00:00
        id: id
        endTime: 2000-01-23T04:56:07.000+00:00
        state: ACTIVE
        processDefinitionVersion: 0
        superProcessInstanceId: superProcessInstanceId
      properties:
        id:
          description: The id of the process instance.
          type: string
        rootProcessInstanceId:
          description: The process instance id of the root process instance that initiated
            the process.
          type: string
        superProcessInstanceId:
          description: The id of the parent process instance, if it exists.
          type: string
        superCaseInstanceId:
          description: The id of the parent case instance, if it exists.
          type: string
        caseInstanceId:
          description: The id of the parent case instance, if it exists.
          type: string
        processDefinitionName:
          description: The name of the process definition that this process instance
            belongs to.
          type: string
        processDefinitionKey:
          description: The key of the process definition that this process instance
            belongs to.
          type: string
        processDefinitionVersion:
          description: The version of the process definition that this process instance
            belongs to.
          format: int32
          type: integer
        processDefinitionId:
          description: The id of the process definition that this process instance
            belongs to.
          type: string
        businessKey:
          description: The business key of the process instance.
          type: string
        startTime:
          description: The time the instance was started. Default [format](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/)
            `yyyy-MM-dd'T'HH:mm:ss.SSSZ`.
          format: date-time
          nullable: true
          type: string
        endTime:
          description: The time the instance ended. Default [format](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/)
            `yyyy-MM-dd'T'HH:mm:ss.SSSZ`.
          format: date-time
          nullable: true
          type: string
        removalTime:
          description: The time after which the instance should be removed by the
            History Cleanup job. Default [format](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/)
            `yyyy-MM-dd'T'HH:mm:ss.SSSZ`.
          format: date-time
          nullable: true
          type: string
        durationInMillis:
          description: The time the instance took to finish (in milliseconds).
          format: int32
          nullable: true
          type: integer
        startUserId:
          description: The id of the user who started the process instance.
          type: string
        startActivityId:
          description: The id of the initial activity that was executed (e.g., a start
            event).
          type: string
        deleteReason:
          description: The provided delete reason in case the process instance was
            canceled during execution.
          type: string
        tenantId:
          description: The tenant id of the process instance.
          type: string
        state:
          description: |-
            Last state of the process instance, possible values are:

            `ACTIVE` - running process instance

            `SUSPENDED` - suspended process instances

            `COMPLETED` - completed through normal end event

            `EXTERNALLY_TERMINATED` - terminated externally, for instance through REST API

            `INTERNALLY_TERMINATED` - terminated internally, for instance by terminating boundary event
          enum:
          - ACTIVE
          - SUSPENDED
          - COMPLETED
          - EXTERNALLY_TERMINATED
          - INTERNALLY_TERMINATED
          type: string
      type: object
    HistoricProcessInstanceQueryDto:
      description: A historic process instance query which defines a group of historic
        process instances
      example:
        variableNamesIgnoreCase: true
        subCaseInstanceId: subCaseInstanceId
        incidentType: incidentType
        executedActivityAfter: 2000-01-23T04:56:07.000+00:00
        processDefinitionName: processDefinitionName
        executedJobAfter: 2000-01-23T04:56:07.000+00:00
        processDefinitionKey: processDefinitionKey
        withRootIncidents: true
        subProcessInstanceId: subProcessInstanceId
        tenantIdIn:
        - tenantIdIn
        - tenantIdIn
        internallyTerminated: true
        processInstanceBusinessKey: processInstanceBusinessKey
        sorting:
        - sortOrder: asc
          sortBy: instanceId
        - sortOrder: asc
          sortBy: instanceId
        variableValuesIgnoreCase: true
        processDefinitionKeyNotIn:
        - processDefinitionKeyNotIn
        - processDefinitionKeyNotIn
        unfinished: true
        startedAfter: 2000-01-23T04:56:07.000+00:00
        executedActivityBefore: 2000-01-23T04:56:07.000+00:00
        rootProcessInstances: true
        withIncidents: true
        incidentStatus: open
        superProcessInstanceId: superProcessInstanceId
        processInstanceId: processInstanceId
        processDefinitionId: processDefinitionId
        processDefinitionNameLike: processDefinitionNameLike
        finishedAfter: 2000-01-23T04:56:07.000+00:00
        variables:
        - name: name
          value: '{}'
          operator: eq
        - name: name
          value: '{}'
          operator: eq
        incidentMessage: incidentMessage
        activeActivityIdIn:
        - activeActivityIdIn
        - activeActivityIdIn
        processDefinitionKeyIn:
        - processDefinitionKeyIn
        - processDefinitionKeyIn
        startedBy: startedBy
        caseInstanceId: caseInstanceId
        externallyTerminated: true
        executedActivityIdIn:
        - executedActivityIdIn
        - executedActivityIdIn
        active: true
        finished: true
        completed: true
        superCaseInstanceId: superCaseInstanceId
        processInstanceIds:
        - processInstanceIds
        - processInstanceIds
        suspended: true
        orQueries:
        - null
        - null
        processInstanceBusinessKeyLike: processInstanceBusinessKeyLike
        withoutTenantId: true
        startedBefore: 2000-01-23T04:56:07.000+00:00
        incidentMessageLike: incidentMessageLike
        finishedBefore: 2000-01-23T04:56:07.000+00:00
        executedJobBefore: 2000-01-23T04:56:07.000+00:00
      properties:
        processInstanceId:
          description: Filter by process instance id.
          type: string
        processInstanceIds:
          description: Filter by process instance ids. Must be a JSON array of `Strings`.
          items:
            type: string
          type: array
        processDefinitionId:
          description: Filter by the process definition the instances run on.
          type: string
        processDefinitionKey:
          description: Filter by the key of the process definition the instances run
            on.
          type: string
        processDefinitionKeyIn:
          description: Filter by a list of process definition keys. A process instance
            must have one of the given process definition keys. Must be a JSON array
            of `Strings`.
          items:
            type: string
          type: array
        processDefinitionName:
          description: Filter by the name of the process definition the instances
            run on.
          type: string
        processDefinitionNameLike:
          description: Filter by process definition names that the parameter is a
            substring of.
          type: string
        processDefinitionKeyNotIn:
          description: Exclude instances that belong to a set of process definitions.
            Must be a JSON array of `Strings`.
          items:
            type: string
          type: array
        processInstanceBusinessKey:
          description: Filter by process instance business key.
          type: string
        processInstanceBusinessKeyLike:
          description: Filter by process instance business key that the parameter
            is a substring of.
          type: string
        rootProcessInstances:
          description: Restrict the query to all process instances that are top level
            process instances.
          nullable: true
          type: boolean
        finished:
          description: Only include finished process instances. Value may only be
            `true`, as `false` is the default behavior.
          nullable: true
          type: boolean
        unfinished:
          description: Only include unfinished process instances. Value may only be
            `true`, as `false` is the default behavior.
          nullable: true
          type: boolean
        withIncidents:
          description: Only include process instances which have an incident. Value
            may only be `true`, as `false` is the default behavior.
          nullable: true
          type: boolean
        withRootIncidents:
          description: Only include process instances which have a root incident.
            Value may only be `true`, as `false` is the default behavior.
          nullable: true
          type: boolean
        incidentType:
          description: Filter by the incident type. See the [User Guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/incidents/#incident-types)
            for a list of incident types.
          type: string
        incidentStatus:
          description: Only include process instances which have an incident in status
            either open or resolved. To get all process instances, use the query parameter
            withIncidents.
          enum:
          - open
          - resolved
          type: string
        incidentMessage:
          description: Filter by the incident message. Exact match.
          type: string
        incidentMessageLike:
          description: Filter by the incident message that the parameter is a substring
            of.
          type: string
        startedBefore:
          description: |-
            Restrict to instances that were started before the given date.
            By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
          format: date-time
          nullable: true
          type: string
        startedAfter:
          description: |-
            Restrict to instances that were started after the given date.
            By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
          format: date-time
          nullable: true
          type: string
        finishedBefore:
          description: |-
            Restrict to instances that were finished before the given date.
            By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
          format: date-time
          nullable: true
          type: string
        finishedAfter:
          description: |-
            Restrict to instances that were finished after the given date.
            By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
          format: date-time
          nullable: true
          type: string
        executedActivityAfter:
          description: |-
            Restrict to instances that executed an activity after the given date (inclusive).
            By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
          format: date-time
          nullable: true
          type: string
        executedActivityBefore:
          description: |-
            Restrict to instances that executed an activity before the given date (inclusive).
            By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
          format: date-time
          nullable: true
          type: string
        executedJobAfter:
          description: |-
            Restrict to instances that executed an job after the given date (inclusive).
            By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
          format: date-time
          nullable: true
          type: string
        executedJobBefore:
          description: |-
            Restrict to instances that executed an job before the given date (inclusive).
            By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
          format: date-time
          nullable: true
          type: string
        startedBy:
          description: Only include process instances that were started by the given
            user.
          type: string
        superProcessInstanceId:
          description: Restrict query to all process instances that are sub process
            instances of the given process instance. Takes a process instance id.
          type: string
        subProcessInstanceId:
          description: Restrict query to one process instance that has a sub process
            instance with the given id.
          type: string
        superCaseInstanceId:
          description: Restrict query to all process instances that are sub process
            instances of the given case instance. Takes a case instance id.
          type: string
        subCaseInstanceId:
          description: Restrict query to one process instance that has a sub case
            instance with the given id.
          type: string
        caseInstanceId:
          description: Restrict query to all process instances that are sub process
            instances of the given case instance. Takes a case instance id.
          type: string
        tenantIdIn:
          description: Filter by a list of tenant ids. A process instance must have
            one of the given tenant ids. Must be a JSON array of `Strings`
          items:
            type: string
          type: array
        withoutTenantId:
          description: Only include historic process instances which belong to no
            tenant. Value may only be `true`, as `false` is the default behavior.
          nullable: true
          type: boolean
        executedActivityIdIn:
          description: Restrict to instances that executed an activity with one of
            given ids. Must be a JSON array of `Strings`
          items:
            type: string
          type: array
        activeActivityIdIn:
          description: Restrict to instances that have an active activity with one
            of given ids. Must be a JSON array of `Strings`
          items:
            type: string
          type: array
        active:
          description: Restrict to instances that are active.
          nullable: true
          type: boolean
        suspended:
          description: Restrict to instances that are suspended.
          nullable: true
          type: boolean
        completed:
          description: Restrict to instances that are completed.
          nullable: true
          type: boolean
        externallyTerminated:
          description: Restrict to instances that are externallyTerminated.
          nullable: true
          type: boolean
        internallyTerminated:
          description: Restrict to instances that are internallyTerminated.
          nullable: true
          type: boolean
        variables:
          description: |
            A JSON array to only include process instances that have/had variables with certain values.
            The array consists of objects with the three properties `name`, `operator` and `value`. `name` (`String`) is the variable name,
            `operator` (`String`) is the comparison operator to be used and `value` the variable value.

            Value may be `String`, `Number` or `Boolean`.

            Valid operator values are: `eq` - equal to; `neq` - not equal to; `gt` - greater than; `gteq` - greater than or equal to; `lt` - lower than; `lteq` - lower than or equal to; `like`.
          items:
            $ref: '#/components/schemas/VariableQueryParameterDto'
          type: array
        variableNamesIgnoreCase:
          description: Match all variable names provided in variables case-insensitively.
            If set to `true` variableName and variablename are treated as equal.
          nullable: true
          type: boolean
        variableValuesIgnoreCase:
          description: Match all variable values provided in variables case-insensitively.
            If set to `true` variableValue and variablevalue are treated as equal.
          nullable: true
          type: boolean
        orQueries:
          description: |-
            A JSON array of nested historic process instance queries with OR semantics.

            A process instance matches a nested query if it fulfills at least one of the query's predicates.

            With multiple nested queries, a process instance must fulfill at least one predicate of each query
            ([Conjunctive Normal Form](https://en.wikipedia.org/wiki/Conjunctive_normal_form)).

            All process instance query properties can be used except for: `sorting`

            See the [User Guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/process-engine-api/#or-queries) for more information about OR queries.
          items:
            $ref: '#/components/schemas/HistoricProcessInstanceQueryDto'
          type: array
        sorting:
          description: Apply sorting of the result
          items:
            $ref: '#/components/schemas/HistoricProcessInstanceQueryDto_sorting'
          type: array
      type: object
    HistoryTimeToLiveDto:
      example:
        historyTimeToLive: 0
      properties:
        historyTimeToLive:
          description: |-
            New value for historyTimeToLive field of the definition.
            Can be `null`. Can not be negative.
          format: int32
          minimum: 0
          nullable: true
          type: integer
      type: object
    IdentityLinkDto:
      example:
        groupId: groupId
        type: type
        userId: userId
      properties:
        userId:
          description: The id of the user participating in this link. Either `userId`
            or `groupId` is set.
          type: string
        groupId:
          description: The id of the group participating in this link. Either `groupId`
            or `userId` is set.
          type: string
        type:
          description: |-
            The type of the identity link. The value of the this property can be user-defined. The Process Engine
            provides three pre-defined Identity Link `type`s:

            * `candidate`
            * `assignee` - reserved for the task assignee
            * `owner` - reserved for the task owner

            **Note**: When adding or removing an Identity Link, the `type` property must be defined.
          type: string
      required:
      - type
      type: object
    IncidentDto:
      example:
        processDefinitionId: processDefinitionId
        processInstanceId: processInstanceId
        jobDefinitionId: jobDefinitionId
        incidentMessage: incidentMessage
        configuration: configuration
        causeIncidentId: causeIncidentId
        incidentType: incidentType
        executionId: executionId
        activityId: activityId
        incidentTimestamp: 2000-01-23T04:56:07.000+00:00
        rootCauseIncidentId: rootCauseIncidentId
        tenantId: tenantId
        id: id
        failedActivityId: failedActivityId
      properties:
        id:
          description: The id of the incident.
          type: string
        processDefinitionId:
          description: The id of the process definition this incident is associated
            with.
          type: string
        processInstanceId:
          description: The id of the process instance this incident is associated
            with.
          type: string
        executionId:
          description: The id of the execution this incident is associated with.
          type: string
        incidentTimestamp:
          description: |-
            The time this incident happened. By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/),
            the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
          format: date-time
          nullable: true
          type: string
        incidentType:
          description: |-
            The type of incident, for example: `failedJobs` will be returned in case of an incident which identified
            a failed job during the execution of a process instance. See the
            [User Guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/incidents/#incident-types) for a list of incident types.
          type: string
        activityId:
          description: The id of the activity this incident is associated with.
          type: string
        failedActivityId:
          description: The id of the activity on which the last exception occurred.
          type: string
        causeIncidentId:
          description: The id of the associated cause incident which has been triggered.
          type: string
        rootCauseIncidentId:
          description: The id of the associated root cause incident which has been
            triggered.
          type: string
        configuration:
          description: The payload of this incident.
          type: string
        tenantId:
          description: The id of the tenant this incident is associated with.
          type: string
        incidentMessage:
          description: The message of this incident.
          type: string
        jobDefinitionId:
          description: The job definition id the incident is associated with.
          type: string
      type: object
    IncidentStatisticsResultDto:
      example:
        incidentCount: 1
        incidentType: incidentType
      properties:
        incidentType:
          description: The type of the incident the number of incidents is aggregated
            for. See the [User Guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/incidents/#incident-types)
            for a list of incident types.
          type: string
        incidentCount:
          description: The total number of incidents for the corresponding incident
            type.
          format: int32
          type: integer
      type: object
    LinkableDto:
      properties:
        links:
          description: The links associated to this resource, with `method`, `href`
            and `rel`.
          items:
            $ref: '#/components/schemas/AtomLink'
          type: array
      type: object
    LockedExternalTaskDto:
      example:
        processDefinitionId: processDefinitionId
        processInstanceId: processInstanceId
        workerId: workerId
        variables:
          key:
            valueInfo:
              key: '{}'
            type: type
            value: '{}'
        lockExpirationTime: 2000-01-23T04:56:07.000+00:00
        errorMessage: errorMessage
        activityInstanceId: activityInstanceId
        priority: 6
        suspended: true
        processDefinitionKey: processDefinitionKey
        activityId: activityId
        executionId: executionId
        processDefinitionVersionTag: processDefinitionVersionTag
        retries: 0
        tenantId: tenantId
        businessKey: businessKey
        topicName: topicName
        id: id
        errorDetails: errorDetails
      properties:
        activityId:
          description: The id of the activity that this external task belongs to.
          type: string
        activityInstanceId:
          description: The id of the activity instance that the external task belongs
            to.
          type: string
        errorMessage:
          description: |-
            The full error message submitted with the latest reported failure executing this task;`null` if no failure
            was reported previously or if no error message was submitted
          type: string
        errorDetails:
          description: |-
            The error details submitted with the latest reported failure executing this task.`null` if no failure was
            reported previously or if no error details was submitted
          type: string
        executionId:
          description: The id of the execution that the external task belongs to.
          type: string
        id:
          description: The id of the external task.
          type: string
        lockExpirationTime:
          description: The date that the task's most recent lock expires or has expired.
          format: date-time
          nullable: true
          type: string
        processDefinitionId:
          description: The id of the process definition the external task is defined
            in.
          type: string
        processDefinitionKey:
          description: The key of the process definition the external task is defined
            in.
          type: string
        processDefinitionVersionTag:
          description: The version tag of the process definition the external task
            is defined in.
          type: string
        processInstanceId:
          description: The id of the process instance the external task belongs to.
          type: string
        tenantId:
          description: The id of the tenant the external task belongs to.
          type: string
        retries:
          description: The number of retries the task currently has left.
          format: int32
          nullable: true
          type: integer
        suspended:
          description: Whether the process instance the external task belongs to is
            suspended.
          nullable: true
          type: boolean
        workerId:
          description: The id of the worker that posesses or posessed the most recent
            lock.
          type: string
        priority:
          description: The priority of the external task.
          format: int64
          nullable: true
          type: integer
        topicName:
          description: The topic name of the external task.
          type: string
        businessKey:
          description: The business key of the process instance the external task
            belongs to.
          type: string
        variables:
          additionalProperties:
            $ref: '#/components/schemas/VariableValueDto'
          description: |-
            A JSON object containing a property for each of the requested variables. The key is the variable name,
            the value is a JSON object of serialized variable values with the following properties:
          type: object
      title: LockedExternalTaskDto
      type: object
    MessageCorrelationResultWithVariableDto:
      description: |-
        The `processInstance` property only has a value if the resultType is set to `ProcessDefinition`.
        The processInstance with the properties as described in the
        [get single instance](https://docs.camunda.org/manual/7.14/reference/rest/process-instance/get/) method.

        The `execution` property only has a value if the resultType is set to `Execution`.
        The execution with the properties as described in the
        [get single execution](https://docs.camunda.org/manual/7.14/reference/rest/execution/get/) method.
      example:
        execution:
          processInstanceId: processInstanceId
          ended: true
          tenantId: tenantId
          id: id
        variables:
          key:
            valueInfo:
              key: '{}'
            type: type
            value: '{}'
        resultType: Execution
      properties:
        resultType:
          description: "Indicates if the message was correlated to a message start\
            \ event or an \nintermediate message catching event. In the first case,\
            \ the resultType is \n`ProcessDefinition` and otherwise `Execution`."
          enum:
          - Execution
          - ProcessDefinition
          type: string
        processInstance:
          $ref: '#/components/schemas/ProcessInstanceDto'
        execution:
          $ref: '#/components/schemas/ExecutionDto'
        variables:
          additionalProperties:
            $ref: '#/components/schemas/VariableValueDto'
          description: "This property is returned if the `variablesInResultEnabled`\
            \ is set to `true`.\nContains a list of the process variables. "
          type: object
      type: object
    MetricsIntervalResultDto:
      example:
        name: name
        reporter: reporter
        value: 0
        timestamp: 2000-01-23T04:56:07.000+00:00
      properties:
        timestamp:
          description: The interval timestamp.
          format: date-time
          type: string
        name:
          description: The name of the metric.
          type: string
        reporter:
          description: The reporter of the metric. `null` if the metrics are aggregated
            by reporter.
          type: string
        value:
          description: The value of the metric aggregated by the interval.
          format: int64
          type: integer
      type: object
    MetricsResultDto:
      example:
        result: 0
      properties:
        result:
          description: The current sum (count) for the selected metric.
          format: int64
          type: integer
      type: object
    MissingAuthorizationDto:
      properties:
        permissionName:
          description: The permission name that the user is missing.
          type: string
        resourceName:
          description: The name of the resource that the user is missing permission
            for.
          type: string
        resourceId:
          description: The id of the resource that the user is missing permission
            for.
          type: string
      type: object
    MultiFormAttachmentDto:
      properties:
        attachment-name:
          description: The name of the attachment.
          type: string
        attachment-description:
          description: The description of the attachment.
          type: string
        attachment-type:
          description: The type of the attachment.
          type: string
        url:
          description: The url to the remote content of the attachment.
          type: string
        content:
          description: The content of the attachment.
          format: binary
          nullable: true
          type: string
      type: object
    MultiFormDeploymentDto:
      properties:
        tenant-id:
          description: The tenant id for the deployment to be created.
          type: string
        deployment-source:
          description: The source for the deployment to be created.
          type: string
        deploy-changed-only:
          default: false
          description: |-
            A flag indicating whether the process engine should perform duplicate checking on a per-resource basis.
            If set to true, only those resources that have actually changed are deployed.
            Checks are made against resources included previous deployments of the same name and only against the latest versions of those resources.
            If set to true, the option enable-duplicate-filtering is overridden and set to true.
          nullable: true
          type: boolean
        enable-duplicate-filtering:
          default: false
          description: |-
            A flag indicating whether the process engine should perform duplicate checking for the deployment or not.
            This allows you to check if a deployment with the same name and the same resouces already exists and
            if true, not create a new deployment but instead return the existing deployment. The default value is false.
          nullable: true
          type: boolean
        deployment-name:
          description: The name for the deployment to be created.
          type: string
        data:
          description: |-
            The binary data to create the deployment resource.
            It is possible to have more than one form part with different form part names for the binary data to create a deployment.
          format: binary
          nullable: true
          type: string
      type: object
    MultiFormVariableBinaryDto:
      properties:
        data:
          description: |-
            The binary data to be set.
            For File variables, this multipart can contain the filename, binary value and MIME type of the file variable to be set
            Only the filename is mandatory.
          format: binary
          nullable: true
          type: string
        valueType:
          description: The name of the variable type. Either Bytes for a byte array
            variable or File for a file variable.
          enum:
          - Bytes
          - File
          type: string
      type: object
    ParseExceptionDto:
      allOf:
      - $ref: '#/components/schemas/ParseExceptionDto_allOf'
      - $ref: '#/components/schemas/ExceptionDto'
    PatchVariablesDto:
      example:
        deletions:
        - deletions
        - deletions
        modifications:
          key:
            valueInfo:
              key: '{}'
            type: type
            value: '{}'
      properties:
        modifications:
          additionalProperties:
            $ref: '#/components/schemas/VariableValueDto'
          description: A JSON object containing variable key-value pairs.
          type: object
        deletions:
          description: An array of String keys of variables to be deleted.
          items:
            type: string
          type: array
      type: object
    PriorityDto:
      example:
        priority: 0
      properties:
        priority:
          description: The priority of the resource.
          format: int64
          nullable: true
          type: integer
      type: object
    ProblemDto:
      properties:
        message:
          description: The message of the problem.
          type: string
        line:
          description: The line where the problem occurred.
          format: int32
          nullable: true
          type: integer
        column:
          description: The column where the problem occurred.
          format: int32
          nullable: true
          type: integer
        mainElementId:
          description: The main element id where the problem occurred.
          type: string
        elementIds:
          description: A list of element id affected by the problem.
          items:
            type: string
          type: array
      type: object
    ProcessDefinitionDiagramDto:
      example:
        bpmn20Xml: bpmn20Xml
        id: id
      properties:
        id:
          description: The id of the process definition.
          type: string
        bpmn20Xml:
          description: |-
            An escaped XML string containing the XML that this definition was deployed with.
            Carriage returns, line feeds and quotation marks are escaped.
          type: string
      type: object
    ProcessDefinitionDto:
      example:
        resource: resource
        startableInTasklist: true
        description: description
        historyTimeToLive: 0
        versionTag: versionTag
        version: 0
        suspended: true
        diagram: diagram
        deploymentId: deploymentId
        name: name
        tenantId: tenantId
        id: id
        category: category
        key: key
      properties:
        id:
          description: The id of the process definition
          type: string
        key:
          description: The key of the process definition, i.e., the id of the BPMN
            2.0 XML process definition.
          type: string
        category:
          description: The category of the process definition.
          type: string
        description:
          description: The description of the process definition.
          type: string
        name:
          description: The name of the process definition.
          type: string
        version:
          description: The version of the process definition that the engine assigned
            to it.
          format: int32
          type: integer
        resource:
          description: The file name of the process definition.
          type: string
        deploymentId:
          description: The deployment id of the process definition.
          type: string
        diagram:
          description: The file name of the process definition diagram, if it exists.
          type: string
        suspended:
          description: A flag indicating whether the definition is suspended or not.
          type: boolean
        tenantId:
          description: The tenant id of the process definition.
          type: string
        versionTag:
          description: The version tag of the process definition.
          type: string
        historyTimeToLive:
          description: |-
            History time to live value of the process definition.
            Is used within [History cleanup](https://docs.camunda.org/manual/7.14/user-guide/process-engine/history/#history-cleanup).
          format: int32
          minimum: 0
          nullable: true
          type: integer
        startableInTasklist:
          description: A flag indicating whether the process definition is startable
            in Tasklist or not.
          type: boolean
      type: object
    ProcessDefinitionStatisticsResultDto:
      example:
        instances: 0
        failedJobs: 6
        incidents:
        - incidentCount: 1
          incidentType: incidentType
        - incidentCount: 1
          incidentType: incidentType
        definition:
          resource: resource
          startableInTasklist: true
          description: description
          historyTimeToLive: 0
          versionTag: versionTag
          version: 0
          suspended: true
          diagram: diagram
          deploymentId: deploymentId
          name: name
          tenantId: tenantId
          id: id
          category: category
          key: key
        id: id
      properties:
        id:
          description: The id of the process definition the results are aggregated
            for.
          type: string
        instances:
          description: The total number of running process instances of this process
            definition.
          format: int32
          type: integer
        failedJobs:
          description: |-
            The total number of failed jobs for the running instances.
            **Note**: Will be `0` (not `null`), if failed jobs were excluded.
          format: int32
          type: integer
        incidents:
          description: |-
            Each item in the resulting array is an object which contains `incidentType` and `incidentCount`.
            **Note**: Will be an empty array, if `incidents` or `incidentsForType` were excluded.
            Furthermore, the array will be also empty if no incidents were found.
          items:
            $ref: '#/components/schemas/IncidentStatisticsResultDto'
          type: array
        definition:
          $ref: '#/components/schemas/ProcessDefinitionDto'
      type: object
    ProcessDefinitionSuspensionStateDto:
      example:
        processDefinitionId: processDefinitionId
        executionDate: 2000-01-23T04:56:07.000+00:00
        includeProcessInstances: true
        suspended: true
        processDefinitionKey: processDefinitionKey
      properties:
        suspended:
          description: |-
            A `Boolean` value which indicates whether to activate or suspend all process definitions with the given key.
            When the value is set to `true`, all process definitions with the given key will be suspended and
            when the value is set to `false`, all process definitions with the given key will be activated.
          nullable: true
          type: boolean
        processDefinitionId:
          description: The id of the process definitions to activate or suspend.
          type: string
        processDefinitionKey:
          description: "\tThe key of the process definitions to activate or suspend."
          type: string
        includeProcessInstances:
          description: "A `Boolean` value which indicates whether to activate or suspend\
            \ also all process instances of \nthe process definitions with the given\
            \ key.\nWhen the value is set to `true`, all process instances of the\
            \ process definitions with the given key\nwill be activated or suspended\
            \ and when the value is set to `false`, the suspension state of \nall\
            \ process instances of the process definitions with the given key will\
            \ not be updated."
          nullable: true
          type: boolean
        executionDate:
          description: |-
            The date on which all process definitions with the given key will be activated or suspended.
            If `null`, the suspension state of all process definitions with the given key is updated immediately.
            By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/),
            the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
          format: date-time
          nullable: true
          type: string
      type: object
    ProcessEngineDto:
      example:
        name: name
      properties:
        name:
          description: The name of the process engine.
          type: string
      type: object
    ProcessInstanceDto:
      allOf:
      - $ref: '#/components/schemas/ProcessInstanceDto_allOf'
      - $ref: '#/components/schemas/LinkableDto'
    ProcessInstanceModificationDto:
      example:
        annotation: annotation
        instructions:
        - activityId: activityId
          transitionId: transitionId
          ancestorActivityInstanceId: ancestorActivityInstanceId
          transitionInstanceId: transitionInstanceId
          activityInstanceId: activityInstanceId
          type: cancel
          cancelCurrentActiveActivityInstances: true
        - activityId: activityId
          transitionId: transitionId
          ancestorActivityInstanceId: ancestorActivityInstanceId
          transitionInstanceId: transitionInstanceId
          activityInstanceId: activityInstanceId
          type: cancel
          cancelCurrentActiveActivityInstances: true
        skipIoMappings: true
        skipCustomListeners: true
      properties:
        skipCustomListeners:
          description: Skip execution listener invocation for activities that are
            started or ended as part of this request.
          nullable: true
          type: boolean
        skipIoMappings:
          description: |-
            Skip execution of [input/output variable mappings](https://docs.camunda.org/manual/7.14/user-guide/process-engine/variables/#input-output-variable-mapping)
            for activities that are started or ended as part of this request.
          nullable: true
          type: boolean
        instructions:
          description: JSON array of modification instructions. The instructions are
            executed in the order they are in.
          items:
            $ref: '#/components/schemas/ProcessInstanceModificationInstructionDto'
          type: array
        annotation:
          description: An arbitrary text annotation set by a user for auditing reasons.
          type: string
      type: object
    ProcessInstanceModificationInstructionDto:
      example:
        activityId: activityId
        transitionId: transitionId
        ancestorActivityInstanceId: ancestorActivityInstanceId
        transitionInstanceId: transitionInstanceId
        activityInstanceId: activityInstanceId
        type: cancel
        cancelCurrentActiveActivityInstances: true
      properties:
        type:
          description: |-
            **Mandatory**. One of the following values: `cancel`, `startBeforeActivity`, `startAfterActivity`, `startTransition`.

            * A cancel instruction requests cancellation of a single activity instance or all instances of one activity.
            * A startBeforeActivity instruction requests to enter a given activity.
            * A startAfterActivity instruction requests to execute the single outgoing sequence flow of a given activity.
            * A startTransition instruction requests to execute a specific sequence flow.
          enum:
          - cancel
          - startBeforeActivity
          - startAfterActivity
          - startTransition
          type: string
        variables:
          $ref: '#/components/schemas/TriggerVariableValueDto'
        activityId:
          description: Can be used with instructions of types `startTransition`. Specifies
            the sequence flow to start.
          type: string
        transitionId:
          description: Can be used with instructions of types `startTransition`. Specifies
            the sequence flow to start.
          type: string
        activityInstanceId:
          description: |-
            Can be used with instructions of type `cancel`. Specifies the activity instance to cancel.
            Valid values are the activity instance IDs supplied by the [Get Activity Instance request](https://docs.camunda.org/manual/7.14/reference/rest/process-instance/get-activity-instances/).
          type: string
        transitionInstanceId:
          description: |-
            Can be used with instructions of type `cancel`. Specifies the transition instance to cancel.
            Valid values are the transition instance IDs supplied by the [Get Activity Instance request](https://docs.camunda.org/manual/7.14/reference/rest/process-instance/get-activity-instances/).
          type: string
        ancestorActivityInstanceId:
          description: |-
            Can be used with instructions of type `startBeforeActivity`, `startAfterActivity`, and `startTransition`.
            Valid values are the activity instance IDs supplied by the Get Activity Instance request.
            If there are multiple parent activity instances of the targeted activity,
            this specifies the ancestor scope in which hierarchy the activity/transition is to be instantiated.

            Example: When there are two instances of a subprocess and an activity contained in the subprocess is to be started,
            this parameter allows to specifiy under which subprocess instance the activity should be started.
          type: string
        cancelCurrentActiveActivityInstances:
          description: Can be used with instructions of type cancel. Prevents the
            deletion of new created activity instances.
          nullable: true
          type: boolean
      required:
      - type
      type: object
    ProcessInstanceQueryDto:
      description: A process instance query which defines a group of process instances
      example:
        subProcessInstance: subProcessInstance
        variableNamesIgnoreCase: true
        withIncident: true
        incidentType: incidentType
        processDefinitionKey: processDefinitionKey
        processDefinitionWithoutTenantId: true
        tenantIdIn:
        - tenantIdIn
        - tenantIdIn
        deploymentId: deploymentId
        sorting:
        - sortOrder: asc
          sortBy: instanceId
        - sortOrder: asc
          sortBy: instanceId
        variableValuesIgnoreCase: true
        processDefinitionKeyNotIn:
        - processDefinitionKeyNotIn
        - processDefinitionKeyNotIn
        rootProcessInstances: true
        leafProcessInstances: true
        activityIdIn:
        - activityIdIn
        - activityIdIn
        processDefinitionId: processDefinitionId
        variables:
        - name: name
          value: '{}'
          operator: eq
        - name: name
          value: '{}'
          operator: eq
        incidentMessage: incidentMessage
        businessKeyLike: businessKeyLike
        processDefinitionKeyIn:
        - processDefinitionKeyIn
        - processDefinitionKeyIn
        superCaseInstance: superCaseInstance
        caseInstanceId: caseInstanceId
        active: true
        suspended: true
        processInstanceIds:
        - processInstanceIds
        - processInstanceIds
        subCaseInstance: subCaseInstance
        superProcessInstance: superProcessInstance
        orQueries:
        - null
        - null
        businessKey: businessKey
        withoutTenantId: true
        incidentId: incidentId
        incidentMessageLike: incidentMessageLike
      properties:
        deploymentId:
          description: Filter by the deployment the id belongs to.
          type: string
        processDefinitionId:
          description: Filter by the process definition the instances run on.
          type: string
        processDefinitionKey:
          description: Filter by the key of the process definition the instances run
            on.
          type: string
        processDefinitionKeyIn:
          description: |-
            Filter by a list of process definition keys.
            A process instance must have one of the given process definition keys. Must be a JSON array of Strings.
          items:
            type: string
          type: array
        processDefinitionKeyNotIn:
          description: |-
            Exclude instances by a list of process definition keys.
            A process instance must not have one of the given process definition keys. Must be a JSON array of Strings.
          items:
            type: string
          type: array
        businessKey:
          description: Filter by process instance business key.
          type: string
        businessKeyLike:
          description: Filter by process instance business key that the parameter
            is a substring of.
          type: string
        caseInstanceId:
          description: Filter by case instance id.
          type: string
        superProcessInstance:
          description: |-
            Restrict query to all process instances that are sub process instances of the given process instance.
            Takes a process instance id.
          type: string
        subProcessInstance:
          description: |-
            Restrict query to all process instances that have the given process instance as a sub process instance.
            Takes a process instance id.
          type: string
        superCaseInstance:
          description: |-
            Restrict query to all process instances that are sub process instances of the given case instance.
            Takes a case instance id.
          type: string
        subCaseInstance:
          description: |-
            Restrict query to all process instances that have the given case instance as a sub case instance.
            Takes a case instance id.
          type: string
        active:
          description: Only include active process instances. Value may only be true,
            as false is the default behavior.
          nullable: true
          type: boolean
        suspended:
          description: Only include suspended process instances. Value may only be
            true, as false is the default behavior.
          nullable: true
          type: boolean
        processInstanceIds:
          description: Filter by a list of process instance ids. Must be a JSON array
            of Strings.
          items:
            type: string
          type: array
        withIncident:
          description: Filter by presence of incidents. Selects only process instances
            that have an incident.
          nullable: true
          type: boolean
        incidentId:
          description: Filter by the incident id.
          type: string
        incidentType:
          description: Filter by the incident type. See the User Guide for a list
            of incident types.
          type: string
        incidentMessage:
          description: Filter by the incident message. Exact match.
          type: string
        incidentMessageLike:
          description: Filter by the incident message that the parameter is a substring
            of.
          type: string
        tenantIdIn:
          description: |-
            Filter by a list of tenant ids. A process instance must have one of the given tenant ids.
            Must be a JSON array of Strings.
          items:
            type: string
          type: array
        withoutTenantId:
          description: |-
            Only include process instances which belong to no tenant.
            Value may only be true, as false is the default behavior.
          nullable: true
          type: boolean
        processDefinitionWithoutTenantId:
          description: Only include process instances which process definition has
            no tenant id.
          nullable: true
          type: boolean
        activityIdIn:
          description: |-
            Filter by a list of activity ids.
            A process instance must currently wait in a leaf activity with one of the given activity ids.
          items:
            type: string
          type: array
        rootProcessInstances:
          description: Restrict the query to all process instances that are top level
            process instances.
          nullable: true
          type: boolean
        leafProcessInstances:
          description: Restrict the query to all process instances that are leaf instances.
            (i.e. don't have any sub instances)
          nullable: true
          type: boolean
        variables:
          description: |-
            A JSON array to only include process instances that have variables with certain values.
            The array consists of objects with the three properties `name`, `operator` and `value`.
            `name` (String) is the variable name,
            `operator` (String) is the comparison operator to be used and `value` the variable value.
            The `value` may be String, Number or Boolean.

            Valid operator values are: `eq` - equal to; `neq` - not equal to; `gt` - greater than;
            `gteq` - greater than or equal to; `lt` - lower than; `lteq` - lower than or equal to; `like`.
          items:
            $ref: '#/components/schemas/VariableQueryParameterDto'
          type: array
        variableNamesIgnoreCase:
          description: |-
            Match all variable names in this query case-insensitively.
            If set to true variableName and variablename are treated as equal.
          nullable: true
          type: boolean
        variableValuesIgnoreCase:
          description: |-
            Match all variable values in this query case-insensitively.
            If set to true variableValue and variablevalue are treated as equal.
          nullable: true
          type: boolean
        orQueries:
          description: |-
            A JSON array of nested process instance queries with OR semantics.
            A process instance matches a nested query if it fulfills at least one of the query's predicates.
            With multiple nested queries, a process instance must fulfill at least one predicate of each query (Conjunctive Normal Form).
            All process instance query properties can be used except for: `sorting`
            See the [User guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/process-engine-api/#or-queries) for more information about OR queries.
          items:
            $ref: '#/components/schemas/ProcessInstanceQueryDto'
          type: array
        sorting:
          description: Apply sorting of the result
          items:
            $ref: '#/components/schemas/ProcessInstanceQueryDto_sorting'
          type: array
      type: object
    ProcessInstanceSuspensionStateAsyncDto:
      example:
        processInstanceQuery:
          subProcessInstance: subProcessInstance
          variableNamesIgnoreCase: true
          withIncident: true
          incidentType: incidentType
          processDefinitionKey: processDefinitionKey
          processDefinitionWithoutTenantId: true
          tenantIdIn:
          - tenantIdIn
          - tenantIdIn
          deploymentId: deploymentId
          sorting:
          - sortOrder: asc
            sortBy: instanceId
          - sortOrder: asc
            sortBy: instanceId
          variableValuesIgnoreCase: true
          processDefinitionKeyNotIn:
          - processDefinitionKeyNotIn
          - processDefinitionKeyNotIn
          rootProcessInstances: true
          leafProcessInstances: true
          activityIdIn:
          - activityIdIn
          - activityIdIn
          processDefinitionId: processDefinitionId
          variables:
          - name: name
            value: '{}'
            operator: eq
          - name: name
            value: '{}'
            operator: eq
          incidentMessage: incidentMessage
          businessKeyLike: businessKeyLike
          processDefinitionKeyIn:
          - processDefinitionKeyIn
          - processDefinitionKeyIn
          superCaseInstance: superCaseInstance
          caseInstanceId: caseInstanceId
          active: true
          suspended: true
          processInstanceIds:
          - processInstanceIds
          - processInstanceIds
          subCaseInstance: subCaseInstance
          superProcessInstance: superProcessInstance
          orQueries:
          - null
          - null
          businessKey: businessKey
          withoutTenantId: true
          incidentId: incidentId
          incidentMessageLike: incidentMessageLike
        historicProcessInstanceQuery:
          variableNamesIgnoreCase: true
          subCaseInstanceId: subCaseInstanceId
          incidentType: incidentType
          executedActivityAfter: 2000-01-23T04:56:07.000+00:00
          processDefinitionName: processDefinitionName
          executedJobAfter: 2000-01-23T04:56:07.000+00:00
          processDefinitionKey: processDefinitionKey
          withRootIncidents: true
          subProcessInstanceId: subProcessInstanceId
          tenantIdIn:
          - tenantIdIn
          - tenantIdIn
          internallyTerminated: true
          processInstanceBusinessKey: processInstanceBusinessKey
          sorting:
          - sortOrder: asc
            sortBy: instanceId
          - sortOrder: asc
            sortBy: instanceId
          variableValuesIgnoreCase: true
          processDefinitionKeyNotIn:
          - processDefinitionKeyNotIn
          - processDefinitionKeyNotIn
          unfinished: true
          startedAfter: 2000-01-23T04:56:07.000+00:00
          executedActivityBefore: 2000-01-23T04:56:07.000+00:00
          rootProcessInstances: true
          withIncidents: true
          incidentStatus: open
          superProcessInstanceId: superProcessInstanceId
          processInstanceId: processInstanceId
          processDefinitionId: processDefinitionId
          processDefinitionNameLike: processDefinitionNameLike
          finishedAfter: 2000-01-23T04:56:07.000+00:00
          variables:
          - name: name
            value: '{}'
            operator: eq
          - name: name
            value: '{}'
            operator: eq
          incidentMessage: incidentMessage
          activeActivityIdIn:
          - activeActivityIdIn
          - activeActivityIdIn
          processDefinitionKeyIn:
          - processDefinitionKeyIn
          - processDefinitionKeyIn
          startedBy: startedBy
          caseInstanceId: caseInstanceId
          externallyTerminated: true
          executedActivityIdIn:
          - executedActivityIdIn
          - executedActivityIdIn
          active: true
          finished: true
          completed: true
          superCaseInstanceId: superCaseInstanceId
          processInstanceIds:
          - processInstanceIds
          - processInstanceIds
          suspended: true
          orQueries:
          - null
          - null
          processInstanceBusinessKeyLike: processInstanceBusinessKeyLike
          withoutTenantId: true
          startedBefore: 2000-01-23T04:56:07.000+00:00
          incidentMessageLike: incidentMessageLike
          finishedBefore: 2000-01-23T04:56:07.000+00:00
          executedJobBefore: 2000-01-23T04:56:07.000+00:00
        suspended: true
        processInstanceIds:
        - processInstanceIds
        - processInstanceIds
      properties:
        suspended:
          description: |-
            A Boolean value which indicates whether to activate or suspend a given process instance.
            When the value is set to true, the given process instance will be suspended and when the value is set to false,
            the given process instance will be activated.
          nullable: true
          type: boolean
        processInstanceIds:
          description: |-
            A list of process instance ids which defines a group of process instances
            which will be activated or suspended by the operation.
          items:
            type: string
          type: array
        processInstanceQuery:
          $ref: '#/components/schemas/ProcessInstanceQueryDto'
        historicProcessInstanceQuery:
          $ref: '#/components/schemas/HistoricProcessInstanceQueryDto'
      type: object
    ProcessInstanceSuspensionStateDto:
      example:
        processDefinitionId: processDefinitionId
        processDefinitionWithoutTenantId: true
        processInstanceQuery:
          subProcessInstance: subProcessInstance
          variableNamesIgnoreCase: true
          withIncident: true
          incidentType: incidentType
          processDefinitionKey: processDefinitionKey
          processDefinitionWithoutTenantId: true
          tenantIdIn:
          - tenantIdIn
          - tenantIdIn
          deploymentId: deploymentId
          sorting:
          - sortOrder: asc
            sortBy: instanceId
          - sortOrder: asc
            sortBy: instanceId
          variableValuesIgnoreCase: true
          processDefinitionKeyNotIn:
          - processDefinitionKeyNotIn
          - processDefinitionKeyNotIn
          rootProcessInstances: true
          leafProcessInstances: true
          activityIdIn:
          - activityIdIn
          - activityIdIn
          processDefinitionId: processDefinitionId
          variables:
          - name: name
            value: '{}'
            operator: eq
          - name: name
            value: '{}'
            operator: eq
          incidentMessage: incidentMessage
          businessKeyLike: businessKeyLike
          processDefinitionKeyIn:
          - processDefinitionKeyIn
          - processDefinitionKeyIn
          superCaseInstance: superCaseInstance
          caseInstanceId: caseInstanceId
          active: true
          suspended: true
          processInstanceIds:
          - processInstanceIds
          - processInstanceIds
          subCaseInstance: subCaseInstance
          superProcessInstance: superProcessInstance
          orQueries:
          - null
          - null
          businessKey: businessKey
          withoutTenantId: true
          incidentId: incidentId
          incidentMessageLike: incidentMessageLike
        processDefinitionTenantId: processDefinitionTenantId
        historicProcessInstanceQuery:
          variableNamesIgnoreCase: true
          subCaseInstanceId: subCaseInstanceId
          incidentType: incidentType
          executedActivityAfter: 2000-01-23T04:56:07.000+00:00
          processDefinitionName: processDefinitionName
          executedJobAfter: 2000-01-23T04:56:07.000+00:00
          processDefinitionKey: processDefinitionKey
          withRootIncidents: true
          subProcessInstanceId: subProcessInstanceId
          tenantIdIn:
          - tenantIdIn
          - tenantIdIn
          internallyTerminated: true
          processInstanceBusinessKey: processInstanceBusinessKey
          sorting:
          - sortOrder: asc
            sortBy: instanceId
          - sortOrder: asc
            sortBy: instanceId
          variableValuesIgnoreCase: true
          processDefinitionKeyNotIn:
          - processDefinitionKeyNotIn
          - processDefinitionKeyNotIn
          unfinished: true
          startedAfter: 2000-01-23T04:56:07.000+00:00
          executedActivityBefore: 2000-01-23T04:56:07.000+00:00
          rootProcessInstances: true
          withIncidents: true
          incidentStatus: open
          superProcessInstanceId: superProcessInstanceId
          processInstanceId: processInstanceId
          processDefinitionId: processDefinitionId
          processDefinitionNameLike: processDefinitionNameLike
          finishedAfter: 2000-01-23T04:56:07.000+00:00
          variables:
          - name: name
            value: '{}'
            operator: eq
          - name: name
            value: '{}'
            operator: eq
          incidentMessage: incidentMessage
          activeActivityIdIn:
          - activeActivityIdIn
          - activeActivityIdIn
          processDefinitionKeyIn:
          - processDefinitionKeyIn
          - processDefinitionKeyIn
          startedBy: startedBy
          caseInstanceId: caseInstanceId
          externallyTerminated: true
          executedActivityIdIn:
          - executedActivityIdIn
          - executedActivityIdIn
          active: true
          finished: true
          completed: true
          superCaseInstanceId: superCaseInstanceId
          processInstanceIds:
          - processInstanceIds
          - processInstanceIds
          suspended: true
          orQueries:
          - null
          - null
          processInstanceBusinessKeyLike: processInstanceBusinessKeyLike
          withoutTenantId: true
          startedBefore: 2000-01-23T04:56:07.000+00:00
          incidentMessageLike: incidentMessageLike
          finishedBefore: 2000-01-23T04:56:07.000+00:00
          executedJobBefore: 2000-01-23T04:56:07.000+00:00
        suspended: true
        processInstanceIds:
        - processInstanceIds
        - processInstanceIds
        processDefinitionKey: processDefinitionKey
      properties:
        suspended:
          description: |-
            A `Boolean` value which indicates whether to activate or suspend a given process instance.
            When the value is set to `true`, the given process instance will be suspended and when the value is set to `false`,
            the given process instance will be activated.
          nullable: true
          type: boolean
        processDefinitionId:
          description: |-
            The process definition id of the process instances to activate or suspend.

            **Note**: This parameter can be used only with combination of `suspended`.
          type: string
        processDefinitionKey:
          description: |-
            The process definition key of the process instances to activate or suspend.

            **Note**: This parameter can be used only with combination of `suspended`, `processDefinitionTenantId`, and `processDefinitionWithoutTenantId`.
          type: string
        processDefinitionTenantId:
          description: |-
            Only activate or suspend process instances of a process definition which belongs to a tenant with the given id.

            **Note**: This parameter can be used only with combination of `suspended`, `processDefinitionKey`, and `processDefinitionWithoutTenantId`.
          type: string
        processDefinitionWithoutTenantId:
          description: |-
            Only activate or suspend process instances of a process definition which belongs to no tenant.
            Value may only be true, as false is the default behavior.

            **Note**: This parameter can be used only with combination of `suspended`, `processDefinitionKey`, and `processDefinitionTenantId`.
          nullable: true
          type: boolean
        processInstanceIds:
          description: |-
            A list of process instance ids which defines a group of process instances
            which will be activated or suspended by the operation.

            **Note**: This parameter can be used only with combination of `suspended`, `processInstanceQuery`, and `historicProcessInstanceQuery`.
          items:
            type: string
          type: array
        processInstanceQuery:
          $ref: '#/components/schemas/ProcessInstanceQueryDto'
        historicProcessInstanceQuery:
          $ref: '#/components/schemas/HistoricProcessInstanceQueryDto'
      type: object
    ProcessInstanceWithVariablesDto:
      allOf:
      - $ref: '#/components/schemas/ProcessInstanceWithVariablesDto_allOf'
      - $ref: '#/components/schemas/ProcessInstanceDto'
    RedeploymentDto:
      description: 'A JSON object with the following properties:'
      example:
        resourceNames:
        - resourceNames
        - resourceNames
        source: source
        resourceIds:
        - resourceIds
        - resourceIds
      properties:
        resourceIds:
          description: A list of deployment resource ids to re-deploy.
          items:
            type: string
          type: array
        resourceNames:
          description: A list of deployment resource names to re-deploy.
          items:
            type: string
          type: array
        source:
          description: Sets the source of the deployment.
          type: string
      title: RedeploymentDto
      type: object
    ResourceOptionsDto:
      allOf:
      - properties: {}
        type: object
      - $ref: '#/components/schemas/LinkableDto'
    ResourceReportDto:
      properties:
        errors:
          description: A list of errors occurred during parsing.
          items:
            $ref: '#/components/schemas/ProblemDto'
          type: array
        warnings:
          description: A list of warnings occurred during parsing.
          items:
            $ref: '#/components/schemas/ProblemDto'
          type: array
      type: object
    RestartProcessInstanceDto:
      example:
        instructions:
        - activityId: activityId
          transitionId: transitionId
          type: startBeforeActivity
        - activityId: activityId
          transitionId: transitionId
          type: startBeforeActivity
        withoutBusinessKey: true
        skipIoMappings: true
        initialVariables: true
        historicProcessInstanceQuery:
          variableNamesIgnoreCase: true
          subCaseInstanceId: subCaseInstanceId
          incidentType: incidentType
          executedActivityAfter: 2000-01-23T04:56:07.000+00:00
          processDefinitionName: processDefinitionName
          executedJobAfter: 2000-01-23T04:56:07.000+00:00
          processDefinitionKey: processDefinitionKey
          withRootIncidents: true
          subProcessInstanceId: subProcessInstanceId
          tenantIdIn:
          - tenantIdIn
          - tenantIdIn
          internallyTerminated: true
          processInstanceBusinessKey: processInstanceBusinessKey
          sorting:
          - sortOrder: asc
            sortBy: instanceId
          - sortOrder: asc
            sortBy: instanceId
          variableValuesIgnoreCase: true
          processDefinitionKeyNotIn:
          - processDefinitionKeyNotIn
          - processDefinitionKeyNotIn
          unfinished: true
          startedAfter: 2000-01-23T04:56:07.000+00:00
          executedActivityBefore: 2000-01-23T04:56:07.000+00:00
          rootProcessInstances: true
          withIncidents: true
          incidentStatus: open
          superProcessInstanceId: superProcessInstanceId
          processInstanceId: processInstanceId
          processDefinitionId: processDefinitionId
          processDefinitionNameLike: processDefinitionNameLike
          finishedAfter: 2000-01-23T04:56:07.000+00:00
          variables:
          - name: name
            value: '{}'
            operator: eq
          - name: name
            value: '{}'
            operator: eq
          incidentMessage: incidentMessage
          activeActivityIdIn:
          - activeActivityIdIn
          - activeActivityIdIn
          processDefinitionKeyIn:
          - processDefinitionKeyIn
          - processDefinitionKeyIn
          startedBy: startedBy
          caseInstanceId: caseInstanceId
          externallyTerminated: true
          executedActivityIdIn:
          - executedActivityIdIn
          - executedActivityIdIn
          active: true
          finished: true
          completed: true
          superCaseInstanceId: superCaseInstanceId
          processInstanceIds:
          - processInstanceIds
          - processInstanceIds
          suspended: true
          orQueries:
          - null
          - null
          processInstanceBusinessKeyLike: processInstanceBusinessKeyLike
          withoutTenantId: true
          startedBefore: 2000-01-23T04:56:07.000+00:00
          incidentMessageLike: incidentMessageLike
          finishedBefore: 2000-01-23T04:56:07.000+00:00
          executedJobBefore: 2000-01-23T04:56:07.000+00:00
        processInstanceIds:
        - processInstanceIds
        - processInstanceIds
        skipCustomListeners: true
      properties:
        processInstanceIds:
          description: A list of process instance ids to restart.
          items:
            type: string
          type: array
        historicProcessInstanceQuery:
          $ref: '#/components/schemas/HistoricProcessInstanceQueryDto'
        skipCustomListeners:
          description: Skip execution listener invocation for activities that are
            started as part of this request.
          nullable: true
          type: boolean
        skipIoMappings:
          description: |-
            Skip execution of
            [input/output variable mappings](https://docs.camunda.org/manual/7.14/user-guide/process-engine/variables/#input-output-variable-mapping)
            for activities that are started as part of this request.
          nullable: true
          type: boolean
        initialVariables:
          description: Set the initial set of variables during restart. By default,
            the last set of variables is used.
          nullable: true
          type: boolean
        withoutBusinessKey:
          description: Do not take over the business key of the historic process instance.
          nullable: true
          type: boolean
        instructions:
          description: |-
            **Optional**. A JSON array of instructions that specify which activities to start the process instance at.
            If this property is omitted, the process instance starts at its default blank start event.
          items:
            $ref: '#/components/schemas/RestartProcessInstanceModificationInstructionDto'
          type: array
      type: object
    RestartProcessInstanceModificationInstructionDto:
      example:
        activityId: activityId
        transitionId: transitionId
        type: startBeforeActivity
      properties:
        type:
          description: |-
            **Mandatory**. One of the following values: `startBeforeActivity`, `startAfterActivity`, `startTransition`.

            * A `startBeforeActivity` instruction requests to enter a given activity.
            * A `startAfterActivity` instruction requests to execute the single outgoing sequence flow of a given activity.
            * A `startTransition` instruction requests to execute a specific sequence flow.
          enum:
          - startBeforeActivity
          - startAfterActivity
          - startTransition
          type: string
        activityId:
          description: |-
            **Can be used with instructions of types** `startBeforeActivity`
            and `startAfterActivity`. Specifies the sequence flow to start.
          type: string
        transitionId:
          description: |-
            **Can be used with instructions of types** `startTransition`.
            Specifies the sequence flow to start.
          type: string
      required:
      - type
      type: object
    RetriesDto:
      example:
        retries: 0
      properties:
        retries:
          description: |-
            The number of retries to set for the resource.  Must be >= 0. If this is 0, an incident is created
            and the task, or job, cannot be fetched, or acquired anymore unless the retries are increased again.
            Can not be null.
          format: int32
          nullable: true
          type: integer
      type: object
    SchemaLogEntryDto:
      example:
        id: id
        version: version
        timestamp: 2000-01-23T04:56:07.000+00:00
      properties:
        id:
          description: The id of the schema log entry.
          type: string
        timestamp:
          description: The date and time of the schema update.
          format: date-time
          type: string
        version:
          description: The version of the schema.
          type: string
      type: object
    SchemaLogQueryDto:
      example:
        sorting:
        - sortOrder: asc
          sortBy: timestamp
        - sortOrder: asc
          sortBy: timestamp
        version: version
      properties:
        version:
          description: The version of the schema.
          type: string
        sorting:
          description: "A JSON array of criteria to sort the result by. Each element\
            \ of the array is\n                      a JSON object that specifies\
            \ one ordering. The position in the array\n                      identifies\
            \ the rank of an ordering, i.e., whether it is primary, secondary,\n \
            \                     etc. "
          items:
            $ref: '#/components/schemas/SchemaLogQueryDto_sorting'
          type: array
      type: object
    SetJobRetriesByProcessDto:
      example:
        retries: 0
        processInstances:
        - processInstances
        - processInstances
        processInstanceQuery:
          subProcessInstance: subProcessInstance
          variableNamesIgnoreCase: true
          withIncident: true
          incidentType: incidentType
          processDefinitionKey: processDefinitionKey
          processDefinitionWithoutTenantId: true
          tenantIdIn:
          - tenantIdIn
          - tenantIdIn
          deploymentId: deploymentId
          sorting:
          - sortOrder: asc
            sortBy: instanceId
          - sortOrder: asc
            sortBy: instanceId
          variableValuesIgnoreCase: true
          processDefinitionKeyNotIn:
          - processDefinitionKeyNotIn
          - processDefinitionKeyNotIn
          rootProcessInstances: true
          leafProcessInstances: true
          activityIdIn:
          - activityIdIn
          - activityIdIn
          processDefinitionId: processDefinitionId
          variables:
          - name: name
            value: '{}'
            operator: eq
          - name: name
            value: '{}'
            operator: eq
          incidentMessage: incidentMessage
          businessKeyLike: businessKeyLike
          processDefinitionKeyIn:
          - processDefinitionKeyIn
          - processDefinitionKeyIn
          superCaseInstance: superCaseInstance
          caseInstanceId: caseInstanceId
          active: true
          suspended: true
          processInstanceIds:
          - processInstanceIds
          - processInstanceIds
          subCaseInstance: subCaseInstance
          superProcessInstance: superProcessInstance
          orQueries:
          - null
          - null
          businessKey: businessKey
          withoutTenantId: true
          incidentId: incidentId
          incidentMessageLike: incidentMessageLike
        historicProcessInstanceQuery:
          variableNamesIgnoreCase: true
          subCaseInstanceId: subCaseInstanceId
          incidentType: incidentType
          executedActivityAfter: 2000-01-23T04:56:07.000+00:00
          processDefinitionName: processDefinitionName
          executedJobAfter: 2000-01-23T04:56:07.000+00:00
          processDefinitionKey: processDefinitionKey
          withRootIncidents: true
          subProcessInstanceId: subProcessInstanceId
          tenantIdIn:
          - tenantIdIn
          - tenantIdIn
          internallyTerminated: true
          processInstanceBusinessKey: processInstanceBusinessKey
          sorting:
          - sortOrder: asc
            sortBy: instanceId
          - sortOrder: asc
            sortBy: instanceId
          variableValuesIgnoreCase: true
          processDefinitionKeyNotIn:
          - processDefinitionKeyNotIn
          - processDefinitionKeyNotIn
          unfinished: true
          startedAfter: 2000-01-23T04:56:07.000+00:00
          executedActivityBefore: 2000-01-23T04:56:07.000+00:00
          rootProcessInstances: true
          withIncidents: true
          incidentStatus: open
          superProcessInstanceId: superProcessInstanceId
          processInstanceId: processInstanceId
          processDefinitionId: processDefinitionId
          processDefinitionNameLike: processDefinitionNameLike
          finishedAfter: 2000-01-23T04:56:07.000+00:00
          variables:
          - name: name
            value: '{}'
            operator: eq
          - name: name
            value: '{}'
            operator: eq
          incidentMessage: incidentMessage
          activeActivityIdIn:
          - activeActivityIdIn
          - activeActivityIdIn
          processDefinitionKeyIn:
          - processDefinitionKeyIn
          - processDefinitionKeyIn
          startedBy: startedBy
          caseInstanceId: caseInstanceId
          externallyTerminated: true
          executedActivityIdIn:
          - executedActivityIdIn
          - executedActivityIdIn
          active: true
          finished: true
          completed: true
          superCaseInstanceId: superCaseInstanceId
          processInstanceIds:
          - processInstanceIds
          - processInstanceIds
          suspended: true
          orQueries:
          - null
          - null
          processInstanceBusinessKeyLike: processInstanceBusinessKeyLike
          withoutTenantId: true
          startedBefore: 2000-01-23T04:56:07.000+00:00
          incidentMessageLike: incidentMessageLike
          finishedBefore: 2000-01-23T04:56:07.000+00:00
          executedJobBefore: 2000-01-23T04:56:07.000+00:00
      properties:
        processInstances:
          description: A list of process instance ids to fetch jobs, for which retries
            will be set.
          items:
            type: string
          type: array
        retries:
          description: An integer representing the number of retries. Please note
            that the value cannot be negative or null.
          format: int32
          minimum: 0
          nullable: true
          type: integer
        processInstanceQuery:
          $ref: '#/components/schemas/ProcessInstanceQueryDto'
        historicProcessInstanceQuery:
          $ref: '#/components/schemas/HistoricProcessInstanceQueryDto'
      type: object
    SetRemovalTimeToHistoricProcessInstancesDto:
      allOf:
      - $ref: '#/components/schemas/SetRemovalTimeToHistoricProcessInstancesDto_allOf'
      - $ref: '#/components/schemas/AbstractSetRemovalTimeDto'
    SetRetriesForExternalTasksDto:
      example:
        externalTaskQuery:
          processInstanceId: processInstanceId
          processDefinitionId: processDefinitionId
          workerId: workerId
          withRetriesLeft: true
          notLocked: true
          lockExpirationAfter: 2000-01-23T04:56:07.000+00:00
          active: true
          processInstanceIdIn:
          - processInstanceIdIn
          - processInstanceIdIn
          suspended: true
          activityId: activityId
          executionId: executionId
          priorityLowerThanOrEquals: 6
          priorityHigherThanOrEquals: 0
          lockExpirationBefore: 2000-01-23T04:56:07.000+00:00
          tenantIdIn:
          - tenantIdIn
          - tenantIdIn
          sorting:
          - sortOrder: asc
            sortBy: id
          - sortOrder: asc
            sortBy: id
          topicName: topicName
          noRetriesLeft: true
          externalTaskId: externalTaskId
          locked: true
          externalTaskIdIn:
          - externalTaskIdIn
          - externalTaskIdIn
          activityIdIn:
          - activityIdIn
          - activityIdIn
        retries: 0
        processInstanceQuery:
          subProcessInstance: subProcessInstance
          variableNamesIgnoreCase: true
          withIncident: true
          incidentType: incidentType
          processDefinitionKey: processDefinitionKey
          processDefinitionWithoutTenantId: true
          tenantIdIn:
          - tenantIdIn
          - tenantIdIn
          deploymentId: deploymentId
          sorting:
          - sortOrder: asc
            sortBy: instanceId
          - sortOrder: asc
            sortBy: instanceId
          variableValuesIgnoreCase: true
          processDefinitionKeyNotIn:
          - processDefinitionKeyNotIn
          - processDefinitionKeyNotIn
          rootProcessInstances: true
          leafProcessInstances: true
          activityIdIn:
          - activityIdIn
          - activityIdIn
          processDefinitionId: processDefinitionId
          variables:
          - name: name
            value: '{}'
            operator: eq
          - name: name
            value: '{}'
            operator: eq
          incidentMessage: incidentMessage
          businessKeyLike: businessKeyLike
          processDefinitionKeyIn:
          - processDefinitionKeyIn
          - processDefinitionKeyIn
          superCaseInstance: superCaseInstance
          caseInstanceId: caseInstanceId
          active: true
          suspended: true
          processInstanceIds:
          - processInstanceIds
          - processInstanceIds
          subCaseInstance: subCaseInstance
          superProcessInstance: superProcessInstance
          orQueries:
          - null
          - null
          businessKey: businessKey
          withoutTenantId: true
          incidentId: incidentId
          incidentMessageLike: incidentMessageLike
        historicProcessInstanceQuery:
          variableNamesIgnoreCase: true
          subCaseInstanceId: subCaseInstanceId
          incidentType: incidentType
          executedActivityAfter: 2000-01-23T04:56:07.000+00:00
          processDefinitionName: processDefinitionName
          executedJobAfter: 2000-01-23T04:56:07.000+00:00
          processDefinitionKey: processDefinitionKey
          withRootIncidents: true
          subProcessInstanceId: subProcessInstanceId
          tenantIdIn:
          - tenantIdIn
          - tenantIdIn
          internallyTerminated: true
          processInstanceBusinessKey: processInstanceBusinessKey
          sorting:
          - sortOrder: asc
            sortBy: instanceId
          - sortOrder: asc
            sortBy: instanceId
          variableValuesIgnoreCase: true
          processDefinitionKeyNotIn:
          - processDefinitionKeyNotIn
          - processDefinitionKeyNotIn
          unfinished: true
          startedAfter: 2000-01-23T04:56:07.000+00:00
          executedActivityBefore: 2000-01-23T04:56:07.000+00:00
          rootProcessInstances: true
          withIncidents: true
          incidentStatus: open
          superProcessInstanceId: superProcessInstanceId
          processInstanceId: processInstanceId
          processDefinitionId: processDefinitionId
          processDefinitionNameLike: processDefinitionNameLike
          finishedAfter: 2000-01-23T04:56:07.000+00:00
          variables:
          - name: name
            value: '{}'
            operator: eq
          - name: name
            value: '{}'
            operator: eq
          incidentMessage: incidentMessage
          activeActivityIdIn:
          - activeActivityIdIn
          - activeActivityIdIn
          processDefinitionKeyIn:
          - processDefinitionKeyIn
          - processDefinitionKeyIn
          startedBy: startedBy
          caseInstanceId: caseInstanceId
          externallyTerminated: true
          executedActivityIdIn:
          - executedActivityIdIn
          - executedActivityIdIn
          active: true
          finished: true
          completed: true
          superCaseInstanceId: superCaseInstanceId
          processInstanceIds:
          - processInstanceIds
          - processInstanceIds
          suspended: true
          orQueries:
          - null
          - null
          processInstanceBusinessKeyLike: processInstanceBusinessKeyLike
          withoutTenantId: true
          startedBefore: 2000-01-23T04:56:07.000+00:00
          incidentMessageLike: incidentMessageLike
          finishedBefore: 2000-01-23T04:56:07.000+00:00
          executedJobBefore: 2000-01-23T04:56:07.000+00:00
        processInstanceIds:
        - processInstanceIds
        - processInstanceIds
        externalTaskIds:
        - externalTaskIds
        - externalTaskIds
      properties:
        retries:
          description: |-
            The number of retries to set for the external task.  Must be >= 0. If this is 0, an incident is created
            and the task cannot be fetched anymore unless the retries are increased again. Can not be null.
          format: int32
          nullable: true
          type: integer
        externalTaskIds:
          description: The ids of the external tasks to set the number of retries
            for.
          items:
            type: string
          type: array
        processInstanceIds:
          description: The ids of process instances containing the tasks to set the
            number of retries for.
          items:
            type: string
          type: array
        externalTaskQuery:
          $ref: '#/components/schemas/ExternalTaskQueryDto'
        processInstanceQuery:
          $ref: '#/components/schemas/ProcessInstanceQueryDto'
        historicProcessInstanceQuery:
          $ref: '#/components/schemas/HistoricProcessInstanceQueryDto'
      type: object
    SetVariablesAsyncDto:
      example:
        variables:
          key:
            valueInfo:
              key: '{}'
            type: type
            value: '{}'
        processInstanceQuery:
          subProcessInstance: subProcessInstance
          variableNamesIgnoreCase: true
          withIncident: true
          incidentType: incidentType
          processDefinitionKey: processDefinitionKey
          processDefinitionWithoutTenantId: true
          tenantIdIn:
          - tenantIdIn
          - tenantIdIn
          deploymentId: deploymentId
          sorting:
          - sortOrder: asc
            sortBy: instanceId
          - sortOrder: asc
            sortBy: instanceId
          variableValuesIgnoreCase: true
          processDefinitionKeyNotIn:
          - processDefinitionKeyNotIn
          - processDefinitionKeyNotIn
          rootProcessInstances: true
          leafProcessInstances: true
          activityIdIn:
          - activityIdIn
          - activityIdIn
          processDefinitionId: processDefinitionId
          variables:
          - name: name
            value: '{}'
            operator: eq
          - name: name
            value: '{}'
            operator: eq
          incidentMessage: incidentMessage
          businessKeyLike: businessKeyLike
          processDefinitionKeyIn:
          - processDefinitionKeyIn
          - processDefinitionKeyIn
          superCaseInstance: superCaseInstance
          caseInstanceId: caseInstanceId
          active: true
          suspended: true
          processInstanceIds:
          - processInstanceIds
          - processInstanceIds
          subCaseInstance: subCaseInstance
          superProcessInstance: superProcessInstance
          orQueries:
          - null
          - null
          businessKey: businessKey
          withoutTenantId: true
          incidentId: incidentId
          incidentMessageLike: incidentMessageLike
        historicProcessInstanceQuery:
          variableNamesIgnoreCase: true
          subCaseInstanceId: subCaseInstanceId
          incidentType: incidentType
          executedActivityAfter: 2000-01-23T04:56:07.000+00:00
          processDefinitionName: processDefinitionName
          executedJobAfter: 2000-01-23T04:56:07.000+00:00
          processDefinitionKey: processDefinitionKey
          withRootIncidents: true
          subProcessInstanceId: subProcessInstanceId
          tenantIdIn:
          - tenantIdIn
          - tenantIdIn
          internallyTerminated: true
          processInstanceBusinessKey: processInstanceBusinessKey
          sorting:
          - sortOrder: asc
            sortBy: instanceId
          - sortOrder: asc
            sortBy: instanceId
          variableValuesIgnoreCase: true
          processDefinitionKeyNotIn:
          - processDefinitionKeyNotIn
          - processDefinitionKeyNotIn
          unfinished: true
          startedAfter: 2000-01-23T04:56:07.000+00:00
          executedActivityBefore: 2000-01-23T04:56:07.000+00:00
          rootProcessInstances: true
          withIncidents: true
          incidentStatus: open
          superProcessInstanceId: superProcessInstanceId
          processInstanceId: processInstanceId
          processDefinitionId: processDefinitionId
          processDefinitionNameLike: processDefinitionNameLike
          finishedAfter: 2000-01-23T04:56:07.000+00:00
          variables:
          - name: name
            value: '{}'
            operator: eq
          - name: name
            value: '{}'
            operator: eq
          incidentMessage: incidentMessage
          activeActivityIdIn:
          - activeActivityIdIn
          - activeActivityIdIn
          processDefinitionKeyIn:
          - processDefinitionKeyIn
          - processDefinitionKeyIn
          startedBy: startedBy
          caseInstanceId: caseInstanceId
          externallyTerminated: true
          executedActivityIdIn:
          - executedActivityIdIn
          - executedActivityIdIn
          active: true
          finished: true
          completed: true
          superCaseInstanceId: superCaseInstanceId
          processInstanceIds:
          - processInstanceIds
          - processInstanceIds
          suspended: true
          orQueries:
          - null
          - null
          processInstanceBusinessKeyLike: processInstanceBusinessKeyLike
          withoutTenantId: true
          startedBefore: 2000-01-23T04:56:07.000+00:00
          incidentMessageLike: incidentMessageLike
          finishedBefore: 2000-01-23T04:56:07.000+00:00
          executedJobBefore: 2000-01-23T04:56:07.000+00:00
        processInstanceIds:
        - processInstanceIds
        - processInstanceIds
      properties:
        processInstanceIds:
          description: |-
            A list of process instance ids that define a group of process instances
            to which the operation will set variables.

            Please note that if `processInstanceIds`, `processInstanceQuery` and `historicProcessInstanceQuery`
            are defined, the resulting operation will be performed on the union of these sets.
          items:
            type: string
          type: array
        processInstanceQuery:
          $ref: '#/components/schemas/ProcessInstanceQueryDto'
        historicProcessInstanceQuery:
          $ref: '#/components/schemas/HistoricProcessInstanceQueryDto'
        variables:
          additionalProperties:
            $ref: '#/components/schemas/VariableValueDto'
          description: A variables the operation will set in the root scope of the
            process instances.
          type: object
      type: object
    SignalDto:
      example:
        executionId: executionId
        variables:
          key:
            valueInfo:
              key: '{}'
            type: type
            value: '{}'
        name: name
        tenantId: tenantId
        withoutTenantId: true
      properties:
        name:
          description: |-
            The name of the signal to deliver.

            **Note**: This property is mandatory.
          type: string
        executionId:
          description: "Optionally specifies a single execution which is notified\
            \ by the signal.\n\n**Note**: If no execution id is defined the signal\
            \ is broadcasted to all subscribed\nhandlers. "
          type: string
        variables:
          additionalProperties:
            $ref: '#/components/schemas/VariableValueDto'
          description: |-
            A JSON object containing variable key-value pairs. Each key is a variable name and
            each value a JSON variable value object.
          type: object
        tenantId:
          description: |-
            Specifies a tenant to deliver the signal. The signal can only be received on
            executions or process definitions which belongs to the given tenant.

            **Note**: Cannot be used in combination with executionId.
          type: string
        withoutTenantId:
          description: |-
            If true the signal can only be received on executions or process definitions which
            belongs to no tenant. Value may not be false as this is the default behavior.

            **Note**: Cannot be used in combination with `executionId`.
          nullable: true
          type: boolean
      type: object
    SortTaskQueryParametersDto:
      description: |-
        Mandatory when `sortBy` is one of the following values: `processVariable`, `executionVariable`,
        `taskVariable`, `caseExecutionVariable` or `caseInstanceVariable`. Must be a JSON object with the properties
        `variable` and `type` where `variable` is a variable name and `type` is the name of a variable value type.
      example:
        variable: variable
        type: type
      properties:
        variable:
          description: The name of the variable to sort by.
          type: string
        type:
          description: The name of the type of the variable value.
          type: string
      type: object
    StartProcessInstanceDto:
      example:
        variables:
          key:
            valueInfo:
              key: '{}'
            type: type
            value: '{}'
        withVariablesInReturn: true
        skipIoMappings: true
        caseInstanceId: caseInstanceId
        businessKey: businessKey
        startInstructions:
        - activityId: activityId
          transitionId: transitionId
          ancestorActivityInstanceId: ancestorActivityInstanceId
          transitionInstanceId: transitionInstanceId
          activityInstanceId: activityInstanceId
          type: cancel
          cancelCurrentActiveActivityInstances: true
        - activityId: activityId
          transitionId: transitionId
          ancestorActivityInstanceId: ancestorActivityInstanceId
          transitionInstanceId: transitionInstanceId
          activityInstanceId: activityInstanceId
          type: cancel
          cancelCurrentActiveActivityInstances: true
        skipCustomListeners: true
      properties:
        businessKey:
          description: The business key of the process instance.
          type: string
        variables:
          additionalProperties:
            $ref: '#/components/schemas/VariableValueDto'
          type: object
        caseInstanceId:
          description: The case instance id the process instance is to be initialized
            with.
          type: string
        startInstructions:
          description: |-
            **Optional**. A JSON array of instructions that specify which activities to start the process instance at.
            If this property is omitted, the process instance starts at its default blank start event.
          items:
            $ref: '#/components/schemas/ProcessInstanceModificationInstructionDto'
          type: array
        skipCustomListeners:
          description: |-
            Skip execution listener invocation for activities that are started or ended as part of this request.
            **Note**: This option is currently only respected when start instructions are submitted
            via the `startInstructions` property.
          nullable: true
          type: boolean
        skipIoMappings:
          description: |-
            Skip execution of
            [input/output variable mappings](https://docs.camunda.org/manual/7.14/user-guide/process-engine/variables/#input-output-variable-mapping)
            for activities that are started or ended as part of this request.
            **Note**: This option is currently only respected when start instructions are submitted
            via the `startInstructions` property.
          nullable: true
          type: boolean
        withVariablesInReturn:
          description: |-
            Indicates if the variables, which was used by the process instance during execution, should be returned.
            Default value: `false`
          nullable: true
          type: boolean
      type: object
    StartProcessInstanceFormDto:
      example:
        variables:
          key:
            valueInfo:
              key: '{}'
            type: type
            value: '{}'
        businessKey: businessKey
      properties:
        variables:
          additionalProperties:
            $ref: '#/components/schemas/VariableValueDto'
          type: object
        businessKey:
          description: |-
            The business key the process instance is to be initialized with.
            The business key uniquely identifies the process instance in the context of the given process definition.
          type: string
      type: object
    SuspensionStateDto:
      example:
        suspended: true
      properties:
        suspended:
          description: |-
            A Boolean value which indicates whether to activate or suspend a given process instance.
            When the value is set to true, the given process instance will be suspended and when the value is set to false,
            the given process instance will be activated.
          type: boolean
      type: object
    TaskBpmnErrorDto:
      example:
        variables:
          key:
            valueInfo:
              key: '{}'
            type: type
            value: '{}'
        errorMessage: errorMessage
        errorCode: errorCode
      properties:
        errorCode:
          description: |-
            An error code that indicates the predefined error. It is used to identify the BPMN
            error handler.
          type: string
        errorMessage:
          description: An error message that describes the error.
          type: string
        variables:
          additionalProperties:
            $ref: '#/components/schemas/VariableValueDto'
          description: A JSON object containing variable key-value pairs.
          type: object
      type: object
    TaskDto:
      example:
        owner: owner
        processDefinitionId: processDefinitionId
        processInstanceId: processInstanceId
        caseExecutionId: caseExecutionId
        caseDefinitionId: caseDefinitionId
        formKey: formKey
        created: 2000-01-23T04:56:07.000+00:00
        parentTaskId: parentTaskId
        caseInstanceId: caseInstanceId
        description: description
        priority: 0
        suspended: true
        delegationState: PENDING
        followUp: 2000-01-23T04:56:07.000+00:00
        executionId: executionId
        taskDefinitionKey: taskDefinitionKey
        due: 2000-01-23T04:56:07.000+00:00
        name: name
        tenantId: tenantId
        id: id
        assignee: assignee
      properties:
        id:
          description: The task id.
          type: string
        name:
          description: The task name.
          type: string
        assignee:
          description: The assignee's id.
          type: string
        owner:
          description: The owner's id.
          type: string
        created:
          description: |-
            The date the task was created on.
            [Default format](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/)
            `yyyy-MM-dd'T'HH:mm:ss.SSSZ`.
          format: date-time
          type: string
        due:
          description: |-
            The task's due date.
            [Default format](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/)
            `yyyy-MM-dd'T'HH:mm:ss.SSSZ`.
          format: date-time
          nullable: true
          type: string
        followUp:
          description: |-
            The follow-up date for the task.
            [Default format](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/)
            `yyyy-MM-dd'T'HH:mm:ss.SSSZ`.
          format: date-time
          nullable: true
          type: string
        delegationState:
          description: The task's delegation state. Possible values are `PENDING`
            and `RESOLVED`.
          enum:
          - PENDING
          - RESOLVED
          type: string
        description:
          description: The task's description.
          type: string
        executionId:
          description: The id of the execution the task belongs to.
          type: string
        parentTaskId:
          description: The id the parent task, if this task is a subtask.
          type: string
        priority:
          description: The task's priority.
          format: int32
          nullable: true
          type: integer
        processDefinitionId:
          description: The id of the process definition the task belongs to.
          type: string
        processInstanceId:
          description: The id of the process instance the task belongs to.
          type: string
        caseExecutionId:
          description: The id of the case execution the task belongs to.
          type: string
        caseDefinitionId:
          description: The id of the case definition the task belongs to.
          type: string
        caseInstanceId:
          description: The id of the case instance the task belongs to.
          type: string
        taskDefinitionKey:
          description: The task's key.
          type: string
        suspended:
          description: Whether the task belongs to a process instance that is suspended.
          nullable: true
          type: boolean
        formKey:
          description: If not `null`, the form key for the task.
          type: string
        tenantId:
          description: If not `null`, the tenant id of the task.
          type: string
      type: object
    TaskEscalationDto:
      example:
        variables:
          key:
            valueInfo:
              key: '{}'
            type: type
            value: '{}'
        escalationCode: escalationCode
      properties:
        escalationCode:
          description: |-
            An escalation code that indicates the predefined escalation. It is used to identify
            the BPMN escalation handler.
          type: string
        variables:
          additionalProperties:
            $ref: '#/components/schemas/VariableValueDto'
          description: A JSON object containing variable key-value pairs.
          type: object
      type: object
    TaskQueryDto:
      description: A Task query which defines a group of Tasks.
      example:
        maxPriority: 6
        dueAfter: 2000-01-23T04:56:07.000+00:00
        variableNamesIgnoreCase: false
        assigneeExpression: assigneeExpression
        caseDefinitionKey: caseDefinitionKey
        dueDate: 2000-01-23T04:56:07.000+00:00
        createdAfterExpression: createdAfterExpression
        processInstanceIdIn:
        - processInstanceIdIn
        - processInstanceIdIn
        processDefinitionName: processDefinitionName
        involvedUserExpression: involvedUserExpression
        unassigned: false
        descriptionLike: descriptionLike
        caseDefinitionName: caseDefinitionName
        includeAssignedTasks: false
        tenantIdIn:
        - tenantIdIn
        - tenantIdIn
        variableValuesIgnoreCase: false
        caseInstanceBusinessKeyLike: caseInstanceBusinessKeyLike
        taskDefinitionKeyLike: taskDefinitionKeyLike
        caseDefinitionNameLike: caseDefinitionNameLike
        assigneeLikeExpression: assigneeLikeExpression
        processInstanceId: processInstanceId
        processDefinitionId: processDefinitionId
        processDefinitionNameLike: processDefinitionNameLike
        caseExecutionId: caseExecutionId
        candidateGroupExpression: candidateGroupExpression
        caseDefinitionId: caseDefinitionId
        assigneeLike: assigneeLike
        active: false
        priority: 0
        suspended: false
        candidateGroup: candidateGroup
        followUpDate: 2000-01-23T04:56:07.000+00:00
        executionId: executionId
        taskDefinitionKey: taskDefinitionKey
        candidateUser: candidateUser
        orQueries:
        - null
        - null
        processInstanceBusinessKeyLike: processInstanceBusinessKeyLike
        dueBeforeExpression: dueBeforeExpression
        candidateGroups:
        - candidateGroups
        - candidateGroups
        name: name
        caseInstanceVariables:
        - name: name
          value: '{}'
          operator: eq
        - name: name
          value: '{}'
          operator: eq
        assigned: false
        taskDefinitionKeyIn:
        - taskDefinitionKeyIn
        - taskDefinitionKeyIn
        assignee: assignee
        followUpBeforeOrNotExistent: 2000-01-23T04:56:07.000+00:00
        candidateGroupsExpression: candidateGroupsExpression
        withCandidateGroups: false
        parentTaskId: parentTaskId
        description: description
        dueBefore: 2000-01-23T04:56:07.000+00:00
        processInstanceBusinessKeyLikeExpression: processInstanceBusinessKeyLikeExpression
        candidateUserExpression: candidateUserExpression
        createdOn: 2000-01-23T04:56:07.000+00:00
        withoutCandidateGroups: false
        followUpDateExpression: followUpDateExpression
        followUpAfter: 2000-01-23T04:56:07.000+00:00
        processDefinitionKey: processDefinitionKey
        delegationState: PENDING
        dueDateExpression: dueDateExpression
        followUpBefore: followUpBefore
        nameNotLike: nameNotLike
        taskVariables:
        - name: name
          value: '{}'
          operator: eq
        - name: name
          value: '{}'
          operator: eq
        processInstanceBusinessKey: processInstanceBusinessKey
        followUpBeforeOrNotExistentExpression: followUpBeforeOrNotExistentExpression
        sorting:
        - sortOrder: asc
          sortBy: instanceId
          parameters:
            variable: variable
            type: type
        - sortOrder: asc
          sortBy: instanceId
          parameters:
            variable: variable
            type: type
        dueAfterExpression: dueAfterExpression
        minPriority: 1
        owner: owner
        caseInstanceBusinessKey: caseInstanceBusinessKey
        withoutCandidateUsers: false
        processInstanceBusinessKeyExpression: processInstanceBusinessKeyExpression
        processDefinitionKeyIn:
        - processDefinitionKeyIn
        - processDefinitionKeyIn
        caseInstanceId: caseInstanceId
        ownerExpression: ownerExpression
        nameNotEqual: nameNotEqual
        followUpAfterExpression: followUpAfterExpression
        processInstanceBusinessKeyIn:
        - processInstanceBusinessKeyIn
        - processInstanceBusinessKeyIn
        createdAfter: 2000-01-23T04:56:07.000+00:00
        followUpBeforeExpression: followUpBeforeExpression
        assigneeIn:
        - assigneeIn
        - assigneeIn
        nameLike: nameLike
        activityInstanceIdIn:
        - activityInstanceIdIn
        - activityInstanceIdIn
        withoutTenantId: false
        involvedUser: involvedUser
        createdBefore: 2000-01-23T04:56:07.000+00:00
        withCandidateUsers: false
        createdOnExpression: createdOnExpression
        processVariables:
        - name: name
          value: '{}'
          operator: eq
        - name: name
          value: '{}'
          operator: eq
        createdBeforeExpression: createdBeforeExpression
      properties:
        processInstanceId:
          description: Restrict to tasks that belong to process instances with the
            given id.
          type: string
        processInstanceIdIn:
          description: Restrict to tasks that belong to process instances with the
            given ids.
          items:
            type: string
          type: array
        processInstanceBusinessKey:
          description: Restrict to tasks that belong to process instances with the
            given business key.
          type: string
        processInstanceBusinessKeyExpression:
          description: "Restrict to tasks that belong to process instances with the\
            \ given business key which \nis described by an expression. See the \n\
            [user guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/expression-language/#internal-context-functions)\n\
            for more information on available functions."
          type: string
        processInstanceBusinessKeyIn:
          description: "Restrict to tasks that belong to process instances with one\
            \ of the give business keys. \nThe keys need to be in a comma-separated\
            \ list."
          items:
            type: string
          type: array
        processInstanceBusinessKeyLike:
          description: "Restrict to tasks that have a process instance business key\
            \ that has the parameter \nvalue as a substring."
          type: string
        processInstanceBusinessKeyLikeExpression:
          description: "Restrict to tasks that have a process instance business key\
            \ that has the parameter \nvalue as a substring and is described by an\
            \ expression. See the\n[user guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/expression-language/#internal-context-functions)\
            \ \nfor more information on available functions."
          type: string
        processDefinitionId:
          description: Restrict to tasks that belong to a process definition with
            the given id.
          type: string
        processDefinitionKey:
          description: Restrict to tasks that belong to a process definition with
            the given key.
          type: string
        processDefinitionKeyIn:
          description: "Restrict to tasks that belong to a process definition with\
            \ one of the given keys. The \nkeys need to be in a comma-separated list."
          items:
            type: string
          type: array
        processDefinitionName:
          description: Restrict to tasks that belong to a process definition with
            the given name.
          type: string
        processDefinitionNameLike:
          description: "Restrict to tasks that have a process definition name that\
            \ has the parameter value as \na substring."
          type: string
        executionId:
          description: Restrict to tasks that belong to an execution with the given
            id.
          type: string
        caseInstanceId:
          description: Restrict to tasks that belong to case instances with the given
            id.
          type: string
        caseInstanceBusinessKey:
          description: Restrict to tasks that belong to case instances with the given
            business key.
          type: string
        caseInstanceBusinessKeyLike:
          description: "Restrict to tasks that have a case instance business key that\
            \ has the parameter value \nas a substring."
          type: string
        caseDefinitionId:
          description: Restrict to tasks that belong to a case definition with the
            given id.
          type: string
        caseDefinitionKey:
          description: Restrict to tasks that belong to a case definition with the
            given key.
          type: string
        caseDefinitionName:
          description: Restrict to tasks that belong to a case definition with the
            given name.
          type: string
        caseDefinitionNameLike:
          description: "Restrict to tasks that have a case definition name that has\
            \ the parameter value as a \nsubstring."
          type: string
        caseExecutionId:
          description: Restrict to tasks that belong to a case execution with the
            given id.
          type: string
        activityInstanceIdIn:
          description: "Only include tasks which belong to one of the passed and comma-separated\
            \ activity \ninstance ids."
          items:
            type: string
          type: array
        tenantIdIn:
          description: "Only include tasks which belong to one of the passed and comma-separated\
            \ \ntenant ids."
          items:
            type: string
          type: array
        withoutTenantId:
          default: false
          description: "Only include tasks which belong to no tenant. Value may only\
            \ be `true`, \nas `false` is the default behavior."
          nullable: true
          type: boolean
        assignee:
          description: Restrict to tasks that the given user is assigned to.
          type: string
        assigneeExpression:
          description: "Restrict to tasks that the user described by the given expression\
            \ is assigned to. See the\n[user guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/expression-language/#internal-context-functions)\
            \ \nfor more information on available functions."
          type: string
        assigneeLike:
          description: "Restrict to tasks that have an assignee that has the parameter\
            \ \nvalue as a substring."
          type: string
        assigneeLikeExpression:
          description: "Restrict to tasks that have an assignee that has the parameter\
            \ value described by the \ngiven expression as a substring. See the \n\
            [user guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/expression-language/#internal-context-functions)\
            \ \nfor more information on available functions."
          type: string
        assigneeIn:
          description: Only include tasks which are assigned to one of the passed
            and comma-separated user ids.
          items:
            type: string
          type: array
        owner:
          description: Restrict to tasks that the given user owns.
          type: string
        ownerExpression:
          description: "Restrict to tasks that the user described by the given expression\
            \ owns. See the \n[user guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/expression-language/#internal-context-functions)\
            \ \nfor more information on available functions."
          type: string
        candidateGroup:
          description: Only include tasks that are offered to the given group.
          type: string
        candidateGroupExpression:
          description: "Only include tasks that are offered to the group described\
            \ by the given expression. \nSee the \n[user guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/expression-language/#internal-context-functions)\
            \ \nfor more information on available functions."
          type: string
        candidateUser:
          description: Only include tasks that are offered to the given user or to
            one of his groups.
          type: string
        candidateUserExpression:
          description: "Only include tasks that are offered to the user described\
            \ by the given expression. \nSee the \n[user guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/expression-language/#internal-context-functions)\
            \ \nfor more information on available functions."
          type: string
        includeAssignedTasks:
          default: false
          description: "Also include tasks that are assigned to users in candidate\
            \ queries. Default is to only \ninclude tasks that are not assigned to\
            \ any user if you query by candidate user or\ngroup(s)."
          nullable: true
          type: boolean
        involvedUser:
          description: "Only include tasks that the given user is involved in. A user\
            \ is involved in a task if \nan identity link exists between task and\
            \ user (e.g., the user is the assignee)."
          type: string
        involvedUserExpression:
          description: |-
            Only include tasks that the user described by the given expression is involved in.
            A user is involved in a task if an identity link exists between task and user
            (e.g., the user is the assignee). See the
            [user guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/expression-language/#internal-context-functions)
            for more information on available functions.
          type: string
        assigned:
          default: false
          description: If set to `true`, restricts the query to all tasks that are
            assigned.
          nullable: true
          type: boolean
        unassigned:
          default: false
          description: If set to `true`, restricts the query to all tasks that are
            unassigned.
          nullable: true
          type: boolean
        taskDefinitionKey:
          description: Restrict to tasks that have the given key.
          type: string
        taskDefinitionKeyIn:
          description: Restrict to tasks that have one of the given keys. The keys
            need to be in a comma-separated list.
          items:
            type: string
          type: array
        taskDefinitionKeyLike:
          description: Restrict to tasks that have a key that has the parameter value
            as a substring.
          type: string
        name:
          description: Restrict to tasks that have the given name.
          type: string
        nameNotEqual:
          description: Restrict to tasks that do not have the given name.
          type: string
        nameLike:
          description: Restrict to tasks that have a name with the given parameter
            value as substring.
          type: string
        nameNotLike:
          description: |-
            Restrict to tasks that do not have a name with the given parameter
            value as substring.
          type: string
        description:
          description: Restrict to tasks that have the given description.
          type: string
        descriptionLike:
          description: |-
            Restrict to tasks that have a description that has the parameter
            value as a substring.
          type: string
        priority:
          description: Restrict to tasks that have the given priority.
          format: int32
          nullable: true
          type: integer
        maxPriority:
          description: Restrict to tasks that have a lower or equal priority.
          format: int32
          nullable: true
          type: integer
        minPriority:
          description: Restrict to tasks that have a higher or equal priority.
          format: int32
          nullable: true
          type: integer
        dueDate:
          description: |-
            Restrict to tasks that are due on the given date. By
            [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format
            `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.546+0200`.
          format: date-time
          nullable: true
          type: string
        dueDateExpression:
          description: |-
            Restrict to tasks that are due on the date described by the given expression. See the
            [user guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/expression-language/#internal-context-functions)
            for more information on available functions. The expression must evaluate to a
            `java.util.Date` or `org.joda.time.DateTime` object.
          type: string
        dueAfter:
          description: |-
            Restrict to tasks that are due after the given date. By
            [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have
            the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.435+0200`.
          format: date-time
          nullable: true
          type: string
        dueAfterExpression:
          description: |-
            Restrict to tasks that are due after the date described by the given expression.
            See the
            [user guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/expression-language/#internal-context-functions)
            for more information on available functions. The expression must evaluate to a
            `java.util.Date` or `org.joda.time.DateTime` object.
          type: string
        dueBefore:
          description: |-
            Restrict to tasks that are due before the given date. By
            [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have
            the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.243+0200`.
          format: date-time
          nullable: true
          type: string
        dueBeforeExpression:
          description: |-
            Restrict to tasks that are due before the date described by the given expression.
            See the
            [user guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/expression-language/#internal-context-functions)
            for more information on available functions. The expression must evaluate to a
            `java.util.Date` or `org.joda.time.DateTime` object.
          type: string
        followUpDate:
          description: |-
            Restrict to tasks that have a followUp date on the given date. By
            [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date
            must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.342+0200`.
          format: date-time
          nullable: true
          type: string
        followUpDateExpression:
          description: |-
            Restrict to tasks that have a followUp date on the date described by the given
            expression. See the
            [user guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/expression-language/#internal-context-functions)
            for more information on available functions. The expression must evaluate to a
            `java.util.Date` or `org.joda.time.DateTime` object.
          type: string
        followUpAfter:
          description: |-
            Restrict to tasks that have a followUp date after the given date. By
            [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have
            the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.542+0200`.
          format: date-time
          nullable: true
          type: string
        followUpAfterExpression:
          description: |-
            Restrict to tasks that have a followUp date after the date described by the given
            expression. See the
            [user guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/expression-language/#internal-context-functions)
            for more information on available functions. The expression must evaluate to a
            `java.util.Date` or `org.joda.time.DateTime` object.
          type: string
        followUpBefore:
          description: |-
            Restrict to tasks that have a followUp date before the given date. By
            [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have
            the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.234+0200`.
          type: string
        followUpBeforeExpression:
          description: |-
            Restrict to tasks that have a followUp date before the date described by the given
            expression. See the
            [user guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/expression-language/#internal-context-functions)
            for more information on available functions. The expression must evaluate to a
            `java.util.Date` or `org.joda.time.DateTime` object.
          type: string
        followUpBeforeOrNotExistent:
          description: |-
            Restrict to tasks that have no followUp date or a followUp date before the given date.
            By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have
            the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.432+0200`. The typical use case
            is to query all `active` tasks for a user for a given date.
          format: date-time
          nullable: true
          type: string
        followUpBeforeOrNotExistentExpression:
          description: |-
            Restrict to tasks that have no followUp date or a followUp date before the date
            described by the given expression. See the
            [user guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/expression-language/#internal-context-functions)
            for more information on available functions. The expression must evaluate to a
            `java.util.Date` or `org.joda.time.DateTime` object.
          type: string
        createdOn:
          description: |-
            Restrict to tasks that were created on the given date. By
            [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have
            the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.324+0200`.
          format: date-time
          nullable: true
          type: string
        createdOnExpression:
          description: |-
            Restrict to tasks that were created on the date described by the given expression.
            See the
            [user guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/expression-language/#internal-context-functions)
            for more information on available functions. The expression must evaluate to a
            `java.util.Date` or `org.joda.time.DateTime` object.
          type: string
        createdAfter:
          description: |-
            Restrict to tasks that were created after the given date. By
            [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must
            have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.342+0200`.
          format: date-time
          nullable: true
          type: string
        createdAfterExpression:
          description: |-
            Restrict to tasks that were created after the date described by the given expression.
            See the
            [user guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/expression-language/#internal-context-functions)
            for more information on available functions. The expression must evaluate to a
            `java.util.Date` or `org.joda.time.DateTime` object.
          type: string
        createdBefore:
          description: |-
            Restrict to tasks that were created before the given date. By
            [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must
            have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.332+0200`.
          format: date-time
          nullable: true
          type: string
        createdBeforeExpression:
          description: |-
            Restrict to tasks that were created before the date described by the given expression.
            See the
            [user guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/expression-language/#internal-context-functions)
            for more information on available functions. The expression must evaluate to a
            `java.util.Date` or `org.joda.time.DateTime` object.
          type: string
        delegationState:
          description: |-
            Restrict to tasks that are in the given delegation state. Valid values are
            `PENDING` and `RESOLVED`.
          enum:
          - PENDING
          - RESOLVED
          type: string
        candidateGroups:
          description: |-
            Restrict to tasks that are offered to any of the given candidate groups. Takes a
            comma-separated list of group names, so for example
            `developers,support,sales`.
          items:
            type: string
          type: array
        candidateGroupsExpression:
          description: |-
            Restrict to tasks that are offered to any of the candidate groups described by the
            given expression. See the
            [user guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/expression-language/#internal-context-functions)
            for more information on available functions. The expression must evaluate to
            `java.util.List` of Strings.
          type: string
        withCandidateGroups:
          default: false
          description: |-
            Only include tasks which have a candidate group. Value may only be `true`,
            as `false` is the default behavior.
          nullable: true
          type: boolean
        withoutCandidateGroups:
          default: false
          description: |-
            Only include tasks which have no candidate group. Value may only be `true`,
            as `false` is the default behavior.
          nullable: true
          type: boolean
        withCandidateUsers:
          default: false
          description: |-
            Only include tasks which have a candidate user. Value may only be `true`,
            as `false` is the default behavior.
          nullable: true
          type: boolean
        withoutCandidateUsers:
          default: false
          description: |-
            Only include tasks which have no candidate users. Value may only be `true`,
            as `false` is the default behavior.
          nullable: true
          type: boolean
        active:
          default: false
          description: |-
            Only include active tasks. Value may only be `true`, as `false`
            is the default behavior.
          nullable: true
          type: boolean
        suspended:
          default: false
          description: |-
            Only include suspended tasks. Value may only be `true`, as
            `false` is the default behavior.
          nullable: true
          type: boolean
        taskVariables:
          description: |-
            A JSON array to only include tasks that have variables with certain values. The
            array consists of JSON objects with three properties `name`, `operator` and `value`.
            `name` is the variable name, `operator` is the comparison operator to be used and
            `value` the variable value. `value` may be of type `String`, `Number` or `Boolean`.

            Valid `operator` values are:
            `eq` - equal to;
            `neq` - not equal to;
            `gt` - greater than;
            `gteq` - greater than or equal to;
            `lt` - lower than;
            `lteq` - lower than or equal to;
            `like`.
            `key` and `value` may not contain underscore or comma characters.
          items:
            $ref: '#/components/schemas/VariableQueryParameterDto'
          type: array
        processVariables:
          description: |-
            A JSON array to only include tasks that belong to a process instance with variables
            with certain values. The array consists of JSON objects with three properties
            `name`, `operator` and `value`. `name` is the variable name, `operator` is the
            comparison operator to be used and `value` the variable value. `value` may be of
            type `String`, `Number` or `Boolean`.

            Valid `operator` values are:
            `eq` - equal to;
            `neq` - not equal to;
            `gt` - greater than;
            `gteq` - greater than or equal to;
            `lt` - lower than;
            `lteq` - lower than or equal to;
            `like`.
            `key` and `value` may not contain underscore or comma characters.
          items:
            $ref: '#/components/schemas/VariableQueryParameterDto'
          type: array
        caseInstanceVariables:
          description: |-
            A JSON array to only include tasks that belong to a case instance with variables
            with certain values. The array consists of JSON objects with three properties
            `name`, `operator` and `value`. `name` is the variable name, `operator` is the
            comparison operator to be used and `value` the variable value. `value` may be of
            type `String`, `Number` or `Boolean`.

            Valid `operator` values are:
            `eq` - equal to;
            `neq` - not equal to;
            `gt` - greater than;
            `gteq` - greater than or equal to;
            `lt` - lower than;
            `lteq` - lower than or equal to;
            `like`.
            `key` and `value` may not contain underscore or comma characters.
          items:
            $ref: '#/components/schemas/VariableQueryParameterDto'
          type: array
        variableNamesIgnoreCase:
          default: false
          description: |-
            Match all variable names in this query case-insensitively. If set
            `variableName` and `variablename` are treated as equal.
          nullable: true
          type: boolean
        variableValuesIgnoreCase:
          default: false
          description: |-
            Match all variable values in this query case-insensitively. If set
            `variableValue` and `variablevalue` are treated as equal.
          nullable: true
          type: boolean
        parentTaskId:
          description: Restrict query to all tasks that are sub tasks of the given
            task. Takes a task id.
          type: string
        orQueries:
          description: |-
            A JSON array of nested task queries with OR semantics. A task matches a nested query if it fulfills
            *at least one* of the query's predicates. With multiple nested queries, a task must fulfill at least one predicate of *each* query ([Conjunctive Normal Form](https://en.wikipedia.org/wiki/Conjunctive_normal_form)).

            All task query properties can be used except for: `sorting`, `withCandidateGroups`,
            `withoutCandidateGroups`, `withCandidateUsers`, `withoutCandidateUsers`

            See the [User guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/process-engine-api/#or-queries)
            for more information about OR queries.
          items:
            $ref: '#/components/schemas/TaskQueryDto'
          type: array
        sorting:
          description: Apply sorting of the result
          items:
            $ref: '#/components/schemas/TaskQueryDto_sorting'
          type: array
      type: object
    TelemetryConfigurationDto:
      example:
        enableTelemetry: true
      properties:
        enableTelemetry:
          description: Specifies if the telemetry data should be sent or not.
          nullable: true
          type: boolean
      type: object
    TransitionInstanceDto:
      description: A JSON object corresponding to the Activity Instance tree of the
        given process instance.
      example:
        activityId: activityId
        processInstanceId: processInstanceId
        processDefinitionId: processDefinitionId
        executionId: executionId
        activityName: activityName
        incidents:
        - id: id
          parentActivityInstanceId: parentActivityInstanceId
        - id: id
          parentActivityInstanceId: parentActivityInstanceId
        id: id
        activityType: activityType
        incidentIds:
        - incidentIds
        - incidentIds
        parentActivityInstanceId: parentActivityInstanceId
      properties:
        id:
          description: The id of the transition instance.
          type: string
        parentActivityInstanceId:
          description: The id of the parent activity instance, for example a sub process
            instance.
          type: string
        activityId:
          description: The id of the activity that this instance enters (asyncBefore
            job) or leaves (asyncAfter job)
          type: string
        activityName:
          description: The name of the activity that this instance enters (asyncBefore
            job) or leaves (asyncAfter job)
          type: string
        activityType:
          description: The type of the activity that this instance enters (asyncBefore
            job) or leaves (asyncAfter job)
          type: string
        processInstanceId:
          description: The id of the process instance this instance is part of.
          type: string
        processDefinitionId:
          description: The id of the process definition.
          type: string
        executionId:
          description: The execution id.
          type: string
        incidentIds:
          description: A list of incident ids.
          items:
            type: string
          type: array
        incidents:
          description: |-
            A list of JSON objects containing incident specific properties:
            * `id`: the id of the incident
            * `activityId`: the activity id in which the incident occurred
          items:
            $ref: '#/components/schemas/ActivityInstanceIncidentDto'
          type: array
      type: object
    TriggerVariableValueDto:
      allOf:
      - $ref: '#/components/schemas/TriggerVariableValueDto_allOf'
      - $ref: '#/components/schemas/VariableValueDto'
    UserCredentialsDto:
      example:
        password: password
        authenticatedUserPassword: authenticatedUserPassword
      properties:
        password:
          description: The users new password.
          type: string
        authenticatedUserPassword:
          description: |-
            The password of the authenticated user who changes the password of the user
            (i.e., the user with passed id as path parameter).
          type: string
      type: object
    UserDto:
      example:
        credentials:
          password: password
          authenticatedUserPassword: authenticatedUserPassword
        profile:
          firstName: firstName
          lastName: lastName
          id: id
          email: email
      properties:
        profile:
          $ref: '#/components/schemas/UserProfileDto'
        credentials:
          $ref: '#/components/schemas/UserCredentialsDto'
      type: object
    UserIdDto:
      example:
        userId: userId
      properties:
        userId:
          description: The id of the user that the current action refers to.
          type: string
      type: object
    UserProfileDto:
      example:
        firstName: firstName
        lastName: lastName
        id: id
        email: email
      properties:
        id:
          description: The id of the user.
          type: string
        firstName:
          description: The first name of the user.
          type: string
        lastName:
          description: The first name of the user.
          type: string
        email:
          description: The email of the user.
          type: string
      type: object
    VariableQueryParameterDto:
      example:
        name: name
        value: '{}'
        operator: eq
      properties:
        name:
          description: Variable name
          type: string
        operator:
          description: Comparison operator to be used
          enum:
          - eq
          - neq
          - gt
          - gteq
          - lt
          - lteq
          - like
          type: string
        value:
          description: The variable value, could be of type boolean, string or number
          type: object
      type: object
    VariableValueDto:
      example:
        valueInfo:
          key: '{}'
        type: type
        value: '{}'
      properties:
        value:
          description: The variable's value. Value differs depending on the variable's
            type and on the deserializeValues parameter.
          type: object
        type:
          description: The value type of the variable.
          type: string
        valueInfo:
          additionalProperties: true
          description: |-
            A JSON object containing additional, value-type-dependent properties.
            For serialized variables of type Object, the following properties can be provided:

            * `objectTypeName`: A string representation of the object's type name.
            * `serializationDataFormat`: The serialization format used to store the variable.

            For serialized variables of type File, the following properties can be provided:

            * `filename`: The name of the file. This is not the variable name but the name that will be used when downloading the file again.
            * `mimetype`: The MIME type of the file that is being uploaded.
            * `encoding`: The encoding of the file that is being uploaded.
          type: object
      type: object
    VersionDto:
      example:
        version: version
      properties:
        version:
          description: The version of the Rest API.
          type: string
      type: object
    AttachmentDto_allOf:
      properties:
        id:
          description: The id of the task attachment.
          type: string
        name:
          description: The name of the task attachment.
          type: string
        description:
          description: The description of the task attachment.
          type: string
        taskId:
          description: The id of the task to which the attachment belongs.
          type: string
        type:
          description: |-
            Indication of the type of content that this attachment refers to.
            Can be MIME type or any other indication.
          type: string
        url:
          description: The url to the remote content of the task attachment.
          type: string
        createTime:
          description: |-
            The time the variable was inserted.
            [Default format](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/)
            `yyyy-MM-dd'T'HH:mm:ss.SSSZ`.
          format: date-time
          type: string
        removalTime:
          description: |-
            The time after which the attachment should be removed by the History Cleanup job.
            [Default format](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/)
            `yyyy-MM-dd'T'HH:mm:ss.SSSZ`.
          format: date-time
          nullable: true
          type: string
        rootProcessInstanceId:
          description: The process instance id of the root process instance that initiated
            the process containing the task.
          type: string
      type: object
    AuthorizationExceptionDto_allOf:
      properties:
        userId:
          description: The id of the user that does not have expected permissions
          type: string
        missingAuthorizations:
          items:
            $ref: '#/components/schemas/MissingAuthorizationDto'
          type: array
      type: object
    CommentDto_allOf:
      properties:
        id:
          description: The id of the task comment.
          type: string
        userId:
          description: The id of the user who created the comment.
          type: string
        taskId:
          description: The id of the task to which the comment belongs.
          type: string
        time:
          description: |-
            The time when the comment was created.
            [Default format]($(docsUrl)/reference/rest/overview/date-format/)
            `yyyy-MM-dd'T'HH:mm:ss.SSSZ`.
          format: date-time
          type: string
        message:
          description: The content of the comment.
          type: string
        removalTime:
          description: |-
            The time after which the comment should be removed by the History Cleanup job.
            [Default format]($(docsUrl)/reference/rest/overview/date-format/)
            `yyyy-MM-dd'T'HH:mm:ss.SSSZ`.
          format: date-time
          nullable: true
          type: string
        rootProcessInstanceId:
          description: |-
            The process instance id of the root process instance that initiated the process
            containing the task.
          type: string
      type: object
    DeploymentDto_allOf:
      properties:
        id:
          description: The id of the deployment.
          type: string
        tenantId:
          description: The tenant id of the deployment.
          type: string
        deploymentTime:
          description: The time when the deployment was created.
          format: date-time
          type: string
        source:
          description: The source of the deployment.
          type: string
        name:
          description: The name of the deployment.
          type: string
      type: object
    DeploymentWithDefinitionsDto_allOf:
      properties:
        deployedProcessDefinitions:
          additionalProperties:
            $ref: '#/components/schemas/ProcessDefinitionDto'
          description: |-
            A JSON Object containing a property for each of the process definitions,
            which are successfully deployed with that deployment.
            The key is the process definition id, the value is a JSON Object corresponding to the process definition.
          type: object
        deployedDecisionDefinitions:
          additionalProperties:
            $ref: '#/components/schemas/DecisionDefinitionDto'
          description: |-
            A JSON Object containing a property for each of the decision definitions,
            which are successfully deployed with that deployment.
            The key is the decision definition id, the value is a JSON Object corresponding to the decision definition.
          type: object
        deployedDecisionRequirementsDefinitions:
          additionalProperties:
            $ref: '#/components/schemas/DecisionRequirementsDefinitionDto'
          description: |-
            A JSON Object containing a property for each of the decision requirements definitions,
            which are successfully deployed with that deployment.
            The key is the decision requirements definition id, the value is a JSON Object corresponding to the decision requirements definition.
          type: object
        deployedCaseDefinitions:
          additionalProperties:
            $ref: '#/components/schemas/CaseDefinitionDto'
          description: |-
            A JSON Object containing a property for each of the case definitions,
            which are successfully deployed with that deployment.
            The key is the case definition id, the value is a JSON Object corresponding to the case definition.
          type: object
      type: object
    EventSubscriptionQueryDto_sorting:
      properties:
        sortBy:
          description: |-
            Sort the results lexicographically by a given criterion.
            Must be used in conjunction with the sortOrder parameter.
          enum:
          - created
          - tenantId
          type: string
        sortOrder:
          description: |-
            Sort the results in a given order. Values may be `asc` for ascending order or `desc` for
            descending order. Must be used in conjunction with the sortBy parameter.
          enum:
          - asc
          - desc
          type: string
      type: object
    ExternalTaskBpmnError_allOf:
      properties:
        workerId:
          description: |-
            The id of the worker that reports the failure. Must match the id of the worker who has most recently
            locked the task.
          type: string
      type: object
    ExternalTaskQueryDto_sorting:
      example:
        sortOrder: asc
        sortBy: id
      properties:
        sortBy:
          description: |-
            Sort the results lexicographically by a given criterion.
            Must be used in conjunction with the sortOrder parameter.
          enum:
          - id
          - lockExpirationTime
          - processInstanceId
          - processDefinitionId
          - processDefinitionKey
          - taskPriority
          - tenantId
          type: string
        sortOrder:
          description: |-
            Sort the results in a given order. Values may be `asc` for ascending order or `desc` for
            descending order. Must be used in conjunction with the sortBy parameter.
          enum:
          - asc
          - desc
          type: string
      type: object
    HistoricActivityInstanceQueryDto_sorting:
      example:
        sortOrder: asc
        sortBy: activityInstanceId
      properties:
        sortBy:
          description: |-
            Sort the results lexicographically by a given criterion.
            Must be used in conjunction with the sortOrder parameter.
          enum:
          - activityInstanceId
          - instanceId
          - executionId
          - activityId
          - activityName
          - activityType
          - startTime
          - endTime
          - duration
          - definitionId
          - occurrence
          - tenantId
          type: string
        sortOrder:
          description: |-
            Sort the results in a given order. Values may be `asc` for ascending order or `desc` for
            descending order. Must be used in conjunction with the sortBy parameter.
          enum:
          - asc
          - desc
          type: string
      type: object
    HistoricProcessInstanceQueryDto_sorting:
      example:
        sortOrder: asc
        sortBy: instanceId
      properties:
        sortBy:
          description: |-
            Sort the results lexicographically by a given criterion.
            Must be used in conjunction with the sortOrder parameter.
          enum:
          - instanceId
          - definitionId
          - definitionKey
          - definitionName
          - definitionVersion
          - businessKey
          - startTime
          - endTime
          - duration
          - tenantId
          type: string
        sortOrder:
          description: |-
            Sort the results in a given order. Values may be `asc` for ascending order or `desc` for
            descending order. Must be used in conjunction with the sortBy parameter.
          enum:
          - asc
          - desc
          type: string
      type: object
    ParseExceptionDto_allOf:
      properties:
        details:
          additionalProperties:
            $ref: '#/components/schemas/ResourceReportDto'
          description: A JSON Object containing list of errors and warnings occurred
            during deployment.
          type: object
      type: object
    ProcessInstanceDto_allOf:
      properties:
        id:
          description: The id of the process instance.
          type: string
        definitionId:
          description: The id of the process definition that this process instance
            belongs to.
          type: string
        businessKey:
          description: The business key of the process instance.
          type: string
        caseInstanceId:
          description: The id of the case instance associated with the process instance.
          type: string
        ended:
          deprecated: true
          description: 'A flag indicating whether the process instance has ended or
            not. Deprecated: will always be false!'
          type: boolean
        suspended:
          description: A flag indicating whether the process instance is suspended
            or not.
          type: boolean
        tenantId:
          description: The tenant id of the process instance.
          type: string
      type: object
    ProcessInstanceQueryDto_sorting:
      example:
        sortOrder: asc
        sortBy: instanceId
      properties:
        sortBy:
          description: |-
            Sort the results lexicographically by a given criterion.
            Must be used in conjunction with the sortOrder parameter.
          enum:
          - instanceId
          - definitionId
          - definitionKey
          - businessKey
          - tenantId
          type: string
        sortOrder:
          description: |-
            Sort the results in a given order. Values may be `asc` for ascending order or `desc` for
            descending order. Must be used in conjunction with the sortBy parameter.
          enum:
          - asc
          - desc
          type: string
      type: object
    ProcessInstanceWithVariablesDto_allOf:
      properties:
        variables:
          additionalProperties:
            $ref: '#/components/schemas/VariableValueDto'
          description: The id of the process instance.
          type: object
      type: object
    SchemaLogQueryDto_sorting:
      example:
        sortOrder: asc
        sortBy: timestamp
      properties:
        sortBy:
          description: |-
            Sort the results lexicographically by a given criterion.
            Must be used in conjunction with the sortOrder parameter.
          enum:
          - timestamp
          type: string
        sortOrder:
          description: |-
            Sort the results in a given order. Values may be `asc` for ascending order or `desc` for
            descending order. Must be used in conjunction with the sortBy parameter.
          enum:
          - asc
          - desc
          type: string
      type: object
    SetRemovalTimeToHistoricProcessInstancesDto_allOf:
      properties:
        historicProcessInstanceIds:
          description: The id of the process instance.
          items:
            type: string
          type: array
        historicProcessInstanceQuery:
          $ref: '#/components/schemas/HistoricProcessInstanceQueryDto'
        hierarchical:
          description: |-
            Sets the removal time to all historic process instances in the hierarchy.
            Value may only be `true`, as `false` is the default behavior.
          nullable: true
          type: boolean
      type: object
    TaskQueryDto_sorting:
      example:
        sortOrder: asc
        sortBy: instanceId
        parameters:
          variable: variable
          type: type
      properties:
        sortBy:
          description: |-
            Sort the results lexicographically by a given criterion.
            Must be used in conjunction with the sortOrder parameter.
          enum:
          - instanceId
          - caseInstanceId
          - dueDate
          - executionId
          - caseExecutionId
          - assignee
          - created
          - description
          - id
          - name
          - nameCaseInsensitive
          - priority
          - processVariable
          - executionVariable
          - taskVariable
          - caseExecutionVariable
          - caseInstanceVariable
          type: string
        sortOrder:
          description: |-
            Sort the results in a given order. Values may be `asc` for ascending order or `desc` for
            descending order. Must be used in conjunction with the sortBy parameter.
          enum:
          - asc
          - desc
          type: string
        parameters:
          $ref: '#/components/schemas/SortTaskQueryParametersDto'
      type: object
    TriggerVariableValueDto_allOf:
      properties:
        local:
          description: |-
            Indicates whether the variable should be a local variable or not.
            If set to true, the variable becomes a local variable of the execution
            entering the target activity.
          nullable: true
          type: boolean
      type: object

