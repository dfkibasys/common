/*
 * Camunda BPM REST API
 * OpenApi Spec for Camunda BPM REST API.
 *
 * The version of the OpenAPI document: 7.14.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package de.dfki.cos.basys.common.rest.camunda.api;

import de.dfki.cos.basys.common.rest.camunda.ApiException;
import de.dfki.cos.basys.common.rest.camunda.dto.AuthorizationExceptionDto;
import de.dfki.cos.basys.common.rest.camunda.dto.CompleteTaskDto;
import de.dfki.cos.basys.common.rest.camunda.dto.CountResultDto;
import de.dfki.cos.basys.common.rest.camunda.dto.ExceptionDto;
import java.io.File;
import de.dfki.cos.basys.common.rest.camunda.dto.FormDto;
import de.dfki.cos.basys.common.rest.camunda.dto.TaskBpmnErrorDto;
import de.dfki.cos.basys.common.rest.camunda.dto.TaskDto;
import de.dfki.cos.basys.common.rest.camunda.dto.TaskEscalationDto;
import de.dfki.cos.basys.common.rest.camunda.dto.TaskQueryDto;
import de.dfki.cos.basys.common.rest.camunda.dto.UserIdDto;
import de.dfki.cos.basys.common.rest.camunda.dto.VariableValueDto;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for TaskApi
 */
@Ignore
public class TaskApiTest {

    private final TaskApi api = new TaskApi();

    
    /**
     * 
     *
     * Claims a task for a specific user.  **Note:** The difference with the [Set Assignee](https://docs.camunda.org/manual/7.14/reference/rest/task/post-assignee/) method is that here a check is performed to see if the task already has a user assigned to it.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void claimTest() throws ApiException {
        String id = null;
        UserIdDto userIdDto = null;
        api.claim(id, userIdDto);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Completes a task and updates process variables.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void completeTest() throws ApiException {
        String id = null;
        CompleteTaskDto completeTaskDto = null;
        Map<String, VariableValueDto> response = api.complete(id, completeTaskDto);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Creates a new task.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createTaskTest() throws ApiException {
        TaskDto taskDto = null;
        api.createTask(taskDto);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Delegates a task to another user.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void delegateTaskTest() throws ApiException {
        String id = null;
        UserIdDto userIdDto = null;
        api.delegateTask(id, userIdDto);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Removes a task by id.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteTaskTest() throws ApiException {
        String id = null;
        api.deleteTask(id);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retrieves the deployed form that is referenced from a given task. For further information please refer to the [User Guide](https://docs.camunda.org/manual/7.14/user-guide/task-forms/#embedded-task-forms).
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDeployedFormTest() throws ApiException {
        String id = null;
        File response = api.getDeployedForm(id);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retrieves the form key for a task. The form key corresponds to the &#x60;FormData#formKey&#x60; property in the engine. This key can be used to do task-specific form rendering in client applications. Additionally, the context path of the containing process application is returned.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getFormTest() throws ApiException {
        String id = null;
        FormDto response = api.getForm(id);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retrieves the form variables for a task. The form variables take form data specified on the task into account. If form fields are defined, the variable types and default values of the form fields are taken into account.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getFormVariablesTest() throws ApiException {
        String id = null;
        String variableNames = null;
        Boolean deserializeValues = null;
        Map<String, VariableValueDto> response = api.getFormVariables(id, variableNames, deserializeValues);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retrieves the rendered form for a task. This method can be used to get the HTML rendering of a [Generated Task Form](https://docs.camunda.org/manual/7.14/user-guide/task-forms/#generated-task-forms).
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getRenderedFormTest() throws ApiException {
        String id = null;
        File response = api.getRenderedForm(id);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retrieves a task by id.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTaskTest() throws ApiException {
        String id = null;
        TaskDto response = api.getTask(id);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Queries for tasks that fulfill a given filter. The size of the result set can be retrieved by using the Get Task Count method.  **Security Consideration:** There are several query parameters (such as assigneeExpression) for specifying an EL expression. These are disabled by default to prevent remote code execution. See the section on [security considerations](https://docs.camunda.org/manual/7.14/user-guide/process-engine/securing-custom-code/) for custom code in the user guide for details.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTasksTest() throws ApiException {
        String processInstanceId = null;
        String processInstanceIdIn = null;
        String processInstanceBusinessKey = null;
        String processInstanceBusinessKeyExpression = null;
        String processInstanceBusinessKeyIn = null;
        String processInstanceBusinessKeyLike = null;
        String processInstanceBusinessKeyLikeExpression = null;
        String processDefinitionId = null;
        String processDefinitionKey = null;
        String processDefinitionKeyIn = null;
        String processDefinitionName = null;
        String processDefinitionNameLike = null;
        String executionId = null;
        String caseInstanceId = null;
        String caseInstanceBusinessKey = null;
        String caseInstanceBusinessKeyLike = null;
        String caseDefinitionId = null;
        String caseDefinitionKey = null;
        String caseDefinitionName = null;
        String caseDefinitionNameLike = null;
        String caseExecutionId = null;
        String activityInstanceIdIn = null;
        String tenantIdIn = null;
        Boolean withoutTenantId = null;
        String assignee = null;
        String assigneeExpression = null;
        String assigneeLike = null;
        String assigneeLikeExpression = null;
        String assigneeIn = null;
        String owner = null;
        String ownerExpression = null;
        String candidateGroup = null;
        String candidateGroupExpression = null;
        String candidateUser = null;
        String candidateUserExpression = null;
        Boolean includeAssignedTasks = null;
        String involvedUser = null;
        String involvedUserExpression = null;
        Boolean assigned = null;
        Boolean unassigned = null;
        String taskDefinitionKey = null;
        String taskDefinitionKeyIn = null;
        String taskDefinitionKeyLike = null;
        String name = null;
        String nameNotEqual = null;
        String nameLike = null;
        String nameNotLike = null;
        String description = null;
        String descriptionLike = null;
        Integer priority = null;
        Integer maxPriority = null;
        Integer minPriority = null;
        String dueDate = null;
        String dueDateExpression = null;
        String dueAfter = null;
        String dueAfterExpression = null;
        String dueBefore = null;
        String dueBeforeExpression = null;
        String followUpDate = null;
        String followUpDateExpression = null;
        String followUpAfter = null;
        String followUpAfterExpression = null;
        String followUpBefore = null;
        String followUpBeforeExpression = null;
        String followUpBeforeOrNotExistent = null;
        String followUpBeforeOrNotExistentExpression = null;
        String createdOn = null;
        String createdOnExpression = null;
        String createdAfter = null;
        String createdAfterExpression = null;
        String createdBefore = null;
        String createdBeforeExpression = null;
        String delegationState = null;
        String candidateGroups = null;
        String candidateGroupsExpression = null;
        Boolean withCandidateGroups = null;
        Boolean withoutCandidateGroups = null;
        Boolean withCandidateUsers = null;
        Boolean withoutCandidateUsers = null;
        Boolean active = null;
        Boolean suspended = null;
        String taskVariables = null;
        String processVariables = null;
        String caseInstanceVariables = null;
        Boolean variableNamesIgnoreCase = null;
        Boolean variableValuesIgnoreCase = null;
        String parentTaskId = null;
        String sortBy = null;
        String sortOrder = null;
        Integer firstResult = null;
        Integer maxResults = null;
        List<TaskDto> response = api.getTasks(processInstanceId, processInstanceIdIn, processInstanceBusinessKey, processInstanceBusinessKeyExpression, processInstanceBusinessKeyIn, processInstanceBusinessKeyLike, processInstanceBusinessKeyLikeExpression, processDefinitionId, processDefinitionKey, processDefinitionKeyIn, processDefinitionName, processDefinitionNameLike, executionId, caseInstanceId, caseInstanceBusinessKey, caseInstanceBusinessKeyLike, caseDefinitionId, caseDefinitionKey, caseDefinitionName, caseDefinitionNameLike, caseExecutionId, activityInstanceIdIn, tenantIdIn, withoutTenantId, assignee, assigneeExpression, assigneeLike, assigneeLikeExpression, assigneeIn, owner, ownerExpression, candidateGroup, candidateGroupExpression, candidateUser, candidateUserExpression, includeAssignedTasks, involvedUser, involvedUserExpression, assigned, unassigned, taskDefinitionKey, taskDefinitionKeyIn, taskDefinitionKeyLike, name, nameNotEqual, nameLike, nameNotLike, description, descriptionLike, priority, maxPriority, minPriority, dueDate, dueDateExpression, dueAfter, dueAfterExpression, dueBefore, dueBeforeExpression, followUpDate, followUpDateExpression, followUpAfter, followUpAfterExpression, followUpBefore, followUpBeforeExpression, followUpBeforeOrNotExistent, followUpBeforeOrNotExistentExpression, createdOn, createdOnExpression, createdAfter, createdAfterExpression, createdBefore, createdBeforeExpression, delegationState, candidateGroups, candidateGroupsExpression, withCandidateGroups, withoutCandidateGroups, withCandidateUsers, withoutCandidateUsers, active, suspended, taskVariables, processVariables, caseInstanceVariables, variableNamesIgnoreCase, variableValuesIgnoreCase, parentTaskId, sortBy, sortOrder, firstResult, maxResults);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retrieves the number of tasks that fulfill a provided filter. Corresponds to the size of the result set when using the [Get Tasks](https://docs.camunda.org/manual/7.14/reference/rest/task/) method.  **Security Consideration:** There are several query parameters (such as assigneeExpression) for specifying an EL expression. These are disabled by default to prevent remote code execution. See the section on [security considerations](https://docs.camunda.org/manual/7.14/user-guide/process-engine/securing-custom-code/) for custom code in the user guide for details.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTasksCountTest() throws ApiException {
        String processInstanceId = null;
        String processInstanceIdIn = null;
        String processInstanceBusinessKey = null;
        String processInstanceBusinessKeyExpression = null;
        String processInstanceBusinessKeyIn = null;
        String processInstanceBusinessKeyLike = null;
        String processInstanceBusinessKeyLikeExpression = null;
        String processDefinitionId = null;
        String processDefinitionKey = null;
        String processDefinitionKeyIn = null;
        String processDefinitionName = null;
        String processDefinitionNameLike = null;
        String executionId = null;
        String caseInstanceId = null;
        String caseInstanceBusinessKey = null;
        String caseInstanceBusinessKeyLike = null;
        String caseDefinitionId = null;
        String caseDefinitionKey = null;
        String caseDefinitionName = null;
        String caseDefinitionNameLike = null;
        String caseExecutionId = null;
        String activityInstanceIdIn = null;
        String tenantIdIn = null;
        Boolean withoutTenantId = null;
        String assignee = null;
        String assigneeExpression = null;
        String assigneeLike = null;
        String assigneeLikeExpression = null;
        String assigneeIn = null;
        String owner = null;
        String ownerExpression = null;
        String candidateGroup = null;
        String candidateGroupExpression = null;
        String candidateUser = null;
        String candidateUserExpression = null;
        Boolean includeAssignedTasks = null;
        String involvedUser = null;
        String involvedUserExpression = null;
        Boolean assigned = null;
        Boolean unassigned = null;
        String taskDefinitionKey = null;
        String taskDefinitionKeyIn = null;
        String taskDefinitionKeyLike = null;
        String name = null;
        String nameNotEqual = null;
        String nameLike = null;
        String nameNotLike = null;
        String description = null;
        String descriptionLike = null;
        Integer priority = null;
        Integer maxPriority = null;
        Integer minPriority = null;
        String dueDate = null;
        String dueDateExpression = null;
        String dueAfter = null;
        String dueAfterExpression = null;
        String dueBefore = null;
        String dueBeforeExpression = null;
        String followUpDate = null;
        String followUpDateExpression = null;
        String followUpAfter = null;
        String followUpAfterExpression = null;
        String followUpBefore = null;
        String followUpBeforeExpression = null;
        String followUpBeforeOrNotExistent = null;
        String followUpBeforeOrNotExistentExpression = null;
        String createdOn = null;
        String createdOnExpression = null;
        String createdAfter = null;
        String createdAfterExpression = null;
        String createdBefore = null;
        String createdBeforeExpression = null;
        String delegationState = null;
        String candidateGroups = null;
        String candidateGroupsExpression = null;
        Boolean withCandidateGroups = null;
        Boolean withoutCandidateGroups = null;
        Boolean withCandidateUsers = null;
        Boolean withoutCandidateUsers = null;
        Boolean active = null;
        Boolean suspended = null;
        String taskVariables = null;
        String processVariables = null;
        String caseInstanceVariables = null;
        Boolean variableNamesIgnoreCase = null;
        Boolean variableValuesIgnoreCase = null;
        String parentTaskId = null;
        CountResultDto response = api.getTasksCount(processInstanceId, processInstanceIdIn, processInstanceBusinessKey, processInstanceBusinessKeyExpression, processInstanceBusinessKeyIn, processInstanceBusinessKeyLike, processInstanceBusinessKeyLikeExpression, processDefinitionId, processDefinitionKey, processDefinitionKeyIn, processDefinitionName, processDefinitionNameLike, executionId, caseInstanceId, caseInstanceBusinessKey, caseInstanceBusinessKeyLike, caseDefinitionId, caseDefinitionKey, caseDefinitionName, caseDefinitionNameLike, caseExecutionId, activityInstanceIdIn, tenantIdIn, withoutTenantId, assignee, assigneeExpression, assigneeLike, assigneeLikeExpression, assigneeIn, owner, ownerExpression, candidateGroup, candidateGroupExpression, candidateUser, candidateUserExpression, includeAssignedTasks, involvedUser, involvedUserExpression, assigned, unassigned, taskDefinitionKey, taskDefinitionKeyIn, taskDefinitionKeyLike, name, nameNotEqual, nameLike, nameNotLike, description, descriptionLike, priority, maxPriority, minPriority, dueDate, dueDateExpression, dueAfter, dueAfterExpression, dueBefore, dueBeforeExpression, followUpDate, followUpDateExpression, followUpAfter, followUpAfterExpression, followUpBefore, followUpBeforeExpression, followUpBeforeOrNotExistent, followUpBeforeOrNotExistentExpression, createdOn, createdOnExpression, createdAfter, createdAfterExpression, createdBefore, createdBeforeExpression, delegationState, candidateGroups, candidateGroupsExpression, withCandidateGroups, withoutCandidateGroups, withCandidateUsers, withoutCandidateUsers, active, suspended, taskVariables, processVariables, caseInstanceVariables, variableNamesIgnoreCase, variableValuesIgnoreCase, parentTaskId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Reports a business error in the context of a running task by id. The error code must be specified to identify the BPMN error handler. See the documentation for [Reporting Bpmn Error](https://docs.camunda.org/manual/7.14/reference/bpmn20/tasks/user-task/#reporting-bpmn-error) in User Tasks.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void handleBpmnErrorTest() throws ApiException {
        String id = null;
        TaskBpmnErrorDto taskBpmnErrorDto = null;
        api.handleBpmnError(id, taskBpmnErrorDto);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Reports an escalation in the context of a running task by id. The escalation code must be specified to identify the escalation handler. See the documentation for [Reporting Bpmn Escalation](https://docs.camunda.org/manual/7.14/reference/bpmn20/tasks/user-task/#reporting-bpmn-escalation) in User Tasks.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void handleEscalationTest() throws ApiException {
        String id = null;
        TaskEscalationDto taskEscalationDto = null;
        api.handleEscalation(id, taskEscalationDto);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Queries for tasks that fulfill a given filter. This method is slightly more powerful than the [Get Tasks](https://docs.camunda.org/manual/7.14/reference/rest/task/get-query/) method because it allows filtering by multiple process or task variables of types &#x60;String&#x60;, &#x60;Number&#x60; or &#x60;Boolean&#x60;. The size of the result set can be retrieved by using the [Get Task Count (POST)](https://docs.camunda.org/manual/7.14/reference/rest/task/post-query-count/) method.  **Security Consideration**: There are several parameters (such as &#x60;assigneeExpression&#x60;) for specifying an EL expression. These are disabled by default to prevent remote code execution. See the section on [security considerations for custom code](https://docs.camunda.org/manual/7.14/user-guide/process-engine/securing-custom-code/) in the user guide for details.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void queryTasksTest() throws ApiException {
        Integer firstResult = null;
        Integer maxResults = null;
        TaskQueryDto taskQueryDto = null;
        List<TaskDto> response = api.queryTasks(firstResult, maxResults, taskQueryDto);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retrieves the number of tasks that fulfill the given filter. Corresponds to the size of the result set of the [Get Tasks (POST)](https://docs.camunda.org/manual/7.14/reference/rest/task/post-query/) method and takes the same parameters.  **Security Consideration**: There are several parameters (such as &#x60;assigneeExpression&#x60;) for specifying an EL expression. These are disabled by default to prevent remote code execution. See the section on [security considerations for custom code](https://docs.camunda.org/manual/7.14/user-guide/process-engine/securing-custom-code/) in the user guide for details.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void queryTasksCountTest() throws ApiException {
        TaskQueryDto taskQueryDto = null;
        CountResultDto response = api.queryTasksCount(taskQueryDto);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Resolves a task and updates execution variables.  Resolving a task marks that the assignee is done with the task delegated to them, and that it can be sent back to the owner. Can only be executed when the task has been delegated. The assignee will be set to the owner, who performed the delegation.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void resolveTest() throws ApiException {
        String id = null;
        CompleteTaskDto completeTaskDto = null;
        api.resolve(id, completeTaskDto);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Changes the assignee of a task to a specific user.  **Note:** The difference with the [Claim Task](https://docs.camunda.org/manual/7.14/reference/rest/task/post-claim/) method is that this method does not check if the task already has a user assigned to it.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setAssigneeTest() throws ApiException {
        String id = null;
        UserIdDto userIdDto = null;
        api.setAssignee(id, userIdDto);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Completes a task and updates process variables using a form submit. There are two difference between this method and the &#x60;complete&#x60; method:  * If the task is in state &#x60;PENDING&#x60; - i.e., has been delegated before, it is not completed but resolved. Otherwise it will be completed. * If the task has Form Field Metadata defined, the process engine will perform backend validation for any form fields which have validators defined. See the [Generated Task Forms](https://docs.camunda.org/manual/7.14/user-guide/task-forms/_index/#generated-task-forms) section of the [User Guide](https://docs.camunda.org/manual/7.14/user-guide/) for more information.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void submitTest() throws ApiException {
        String id = null;
        CompleteTaskDto completeTaskDto = null;
        Map<String, VariableValueDto> response = api.submit(id, completeTaskDto);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Resets a task&#39;s assignee. If successful, the task is not assigned to a user.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void unclaimTest() throws ApiException {
        String id = null;
        api.unclaim(id);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Updates a task.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateTaskTest() throws ApiException {
        String id = null;
        TaskDto taskDto = null;
        api.updateTask(id, taskDto);

        // TODO: test validations
    }
    
}
