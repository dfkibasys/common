/*
 * Camunda BPM REST API
 * OpenApi Spec for Camunda BPM REST API.
 *
 * The version of the OpenAPI document: 7.14.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package de.dfki.cos.basys.common.rest.camunda.api;

import de.dfki.cos.basys.common.rest.camunda.ApiException;
import de.dfki.cos.basys.common.rest.camunda.dto.BatchDto;
import de.dfki.cos.basys.common.rest.camunda.dto.CountResultDto;
import de.dfki.cos.basys.common.rest.camunda.dto.DeleteHistoricProcessInstancesDto;
import de.dfki.cos.basys.common.rest.camunda.dto.ExceptionDto;
import de.dfki.cos.basys.common.rest.camunda.dto.HistoricProcessInstanceDto;
import de.dfki.cos.basys.common.rest.camunda.dto.HistoricProcessInstanceQueryDto;
import org.threeten.bp.OffsetDateTime;
import de.dfki.cos.basys.common.rest.camunda.dto.SetRemovalTimeToHistoricProcessInstancesDto;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for HistoricProcessInstanceApi
 */
@Ignore
public class HistoricProcessInstanceApiTest {

    private final HistoricProcessInstanceApi api = new HistoricProcessInstanceApi();

    
    /**
     * Delete
     *
     * Deletes a process instance from the history by id.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteHistoricProcessInstanceTest() throws ApiException {
        String id = null;
        Boolean failIfNotExists = null;
        api.deleteHistoricProcessInstance(id, failIfNotExists);

        // TODO: test validations
    }
    
    /**
     * Delete Async (POST)
     *
     * Delete multiple historic process instances asynchronously (batch). At least &#x60;historicProcessInstanceIds&#x60; or &#x60;historicProcessInstanceQuery&#x60; has to be provided. If both are provided then all instances matching query criterion and instances from the list will be deleted.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteHistoricProcessInstancesAsyncTest() throws ApiException {
        DeleteHistoricProcessInstancesDto deleteHistoricProcessInstancesDto = null;
        BatchDto response = api.deleteHistoricProcessInstancesAsync(deleteHistoricProcessInstancesDto);

        // TODO: test validations
    }
    
    /**
     * Delete Variable Instances
     *
     * Deletes all variables of a process instance from the history by id.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteHistoricVariableInstancesOfHistoricProcessInstanceTest() throws ApiException {
        String id = null;
        api.deleteHistoricVariableInstancesOfHistoricProcessInstance(id);

        // TODO: test validations
    }
    
    /**
     * Get
     *
     * Retrieves a historic process instance by id, according to the &#x60;HistoricProcessInstance&#x60; interface in the engine.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getHistoricProcessInstanceTest() throws ApiException {
        String id = null;
        HistoricProcessInstanceDto response = api.getHistoricProcessInstance(id);

        // TODO: test validations
    }
    
    /**
     * Get Duration Report
     *
     * Retrieves a report about the duration of completed process instances, grouped by a period. These reports include the maximum, minimum and average duration of all completed process instances which were started in a given period.  **Note:** This only includes historic data.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getHistoricProcessInstanceDurationReportTest() throws ApiException {
        String reportType = null;
        String periodUnit = null;
        String processDefinitionIdIn = null;
        String processDefinitionKeyIn = null;
        OffsetDateTime startedBefore = null;
        OffsetDateTime startedAfter = null;
        Object response = api.getHistoricProcessInstanceDurationReport(reportType, periodUnit, processDefinitionIdIn, processDefinitionKeyIn, startedBefore, startedAfter);

        // TODO: test validations
    }
    
    /**
     * Get List
     *
     * Queries for historic process instances that fulfill the given parameters. The size of the result set can be retrieved by using the [Get Process Instance Count](https://docs.camunda.org/manual/7.14/reference/rest/history/process-instance/get-process-instance-query-count/) method.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getHistoricProcessInstancesTest() throws ApiException {
        String sortBy = null;
        String sortOrder = null;
        Integer firstResult = null;
        Integer maxResults = null;
        String processInstanceId = null;
        String processInstanceIds = null;
        String processDefinitionId = null;
        String processDefinitionKey = null;
        String processDefinitionKeyIn = null;
        String processDefinitionName = null;
        String processDefinitionNameLike = null;
        String processDefinitionKeyNotIn = null;
        String processInstanceBusinessKey = null;
        String processInstanceBusinessKeyLike = null;
        Boolean rootProcessInstances = null;
        Boolean finished = null;
        Boolean unfinished = null;
        Boolean withIncidents = null;
        Boolean withRootIncidents = null;
        String incidentType = null;
        String incidentStatus = null;
        String incidentMessage = null;
        String incidentMessageLike = null;
        OffsetDateTime startedBefore = null;
        OffsetDateTime startedAfter = null;
        OffsetDateTime finishedBefore = null;
        OffsetDateTime finishedAfter = null;
        OffsetDateTime executedActivityAfter = null;
        OffsetDateTime executedActivityBefore = null;
        OffsetDateTime executedJobAfter = null;
        OffsetDateTime executedJobBefore = null;
        String startedBy = null;
        String superProcessInstanceId = null;
        String subProcessInstanceId = null;
        String superCaseInstanceId = null;
        String subCaseInstanceId = null;
        String caseInstanceId = null;
        String tenantIdIn = null;
        Boolean withoutTenantId = null;
        String executedActivityIdIn = null;
        String activeActivityIdIn = null;
        Boolean active = null;
        Boolean suspended = null;
        Boolean completed = null;
        Boolean externallyTerminated = null;
        Boolean internallyTerminated = null;
        String variables = null;
        Boolean variableNamesIgnoreCase = null;
        Boolean variableValuesIgnoreCase = null;
        List<HistoricProcessInstanceDto> response = api.getHistoricProcessInstances(sortBy, sortOrder, firstResult, maxResults, processInstanceId, processInstanceIds, processDefinitionId, processDefinitionKey, processDefinitionKeyIn, processDefinitionName, processDefinitionNameLike, processDefinitionKeyNotIn, processInstanceBusinessKey, processInstanceBusinessKeyLike, rootProcessInstances, finished, unfinished, withIncidents, withRootIncidents, incidentType, incidentStatus, incidentMessage, incidentMessageLike, startedBefore, startedAfter, finishedBefore, finishedAfter, executedActivityAfter, executedActivityBefore, executedJobAfter, executedJobBefore, startedBy, superProcessInstanceId, subProcessInstanceId, superCaseInstanceId, subCaseInstanceId, caseInstanceId, tenantIdIn, withoutTenantId, executedActivityIdIn, activeActivityIdIn, active, suspended, completed, externallyTerminated, internallyTerminated, variables, variableNamesIgnoreCase, variableValuesIgnoreCase);

        // TODO: test validations
    }
    
    /**
     * Get List Count
     *
     * Queries for the number of historic process instances that fulfill the given parameters. Takes the same parameters as the [Get Process Instances](https://docs.camunda.org/manual/7.14/reference/rest/history/process-instance/get-process-instance-query/) method.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getHistoricProcessInstancesCountTest() throws ApiException {
        String processInstanceId = null;
        String processInstanceIds = null;
        String processDefinitionId = null;
        String processDefinitionKey = null;
        String processDefinitionKeyIn = null;
        String processDefinitionName = null;
        String processDefinitionNameLike = null;
        String processDefinitionKeyNotIn = null;
        String processInstanceBusinessKey = null;
        String processInstanceBusinessKeyLike = null;
        Boolean rootProcessInstances = null;
        Boolean finished = null;
        Boolean unfinished = null;
        Boolean withIncidents = null;
        Boolean withRootIncidents = null;
        String incidentType = null;
        String incidentStatus = null;
        String incidentMessage = null;
        String incidentMessageLike = null;
        OffsetDateTime startedBefore = null;
        OffsetDateTime startedAfter = null;
        OffsetDateTime finishedBefore = null;
        OffsetDateTime finishedAfter = null;
        OffsetDateTime executedActivityAfter = null;
        OffsetDateTime executedActivityBefore = null;
        OffsetDateTime executedJobAfter = null;
        OffsetDateTime executedJobBefore = null;
        String startedBy = null;
        String superProcessInstanceId = null;
        String subProcessInstanceId = null;
        String superCaseInstanceId = null;
        String subCaseInstanceId = null;
        String caseInstanceId = null;
        String tenantIdIn = null;
        Boolean withoutTenantId = null;
        String executedActivityIdIn = null;
        String activeActivityIdIn = null;
        Boolean active = null;
        Boolean suspended = null;
        Boolean completed = null;
        Boolean externallyTerminated = null;
        Boolean internallyTerminated = null;
        String variables = null;
        Boolean variableNamesIgnoreCase = null;
        Boolean variableValuesIgnoreCase = null;
        CountResultDto response = api.getHistoricProcessInstancesCount(processInstanceId, processInstanceIds, processDefinitionId, processDefinitionKey, processDefinitionKeyIn, processDefinitionName, processDefinitionNameLike, processDefinitionKeyNotIn, processInstanceBusinessKey, processInstanceBusinessKeyLike, rootProcessInstances, finished, unfinished, withIncidents, withRootIncidents, incidentType, incidentStatus, incidentMessage, incidentMessageLike, startedBefore, startedAfter, finishedBefore, finishedAfter, executedActivityAfter, executedActivityBefore, executedJobAfter, executedJobBefore, startedBy, superProcessInstanceId, subProcessInstanceId, superCaseInstanceId, subCaseInstanceId, caseInstanceId, tenantIdIn, withoutTenantId, executedActivityIdIn, activeActivityIdIn, active, suspended, completed, externallyTerminated, internallyTerminated, variables, variableNamesIgnoreCase, variableValuesIgnoreCase);

        // TODO: test validations
    }
    
    /**
     * Get List (POST)
     *
     * Queries for historic process instances that fulfill the given parameters. This method is slightly more powerful than the [Get Process Instance](https://docs.camunda.org/manual/7.14/reference/rest/history/process-instance/get-process-instance-query/) because it allows filtering by multiple process variables of types &#x60;String&#x60;, &#x60;Number&#x60; or &#x60;Boolean&#x60;.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void queryHistoricProcessInstancesTest() throws ApiException {
        Integer firstResult = null;
        Integer maxResults = null;
        HistoricProcessInstanceQueryDto historicProcessInstanceQueryDto = null;
        List<HistoricProcessInstanceDto> response = api.queryHistoricProcessInstances(firstResult, maxResults, historicProcessInstanceQueryDto);

        // TODO: test validations
    }
    
    /**
     * Get List Count (POST)
     *
     * Queries for the number of historic process instances that fulfill the given parameters. This method takes the same message body as the [Get Process Instances (POST)](https://docs.camunda.org/manual/7.14/reference/rest/history/process-instance/get-process-instance-query/) method and therefore it is slightly more powerful than the [Get Process Instance Count](https://docs.camunda.org/manual/7.14/reference/rest/history/process-instance/post-process-instance-query-count/) method.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void queryHistoricProcessInstancesCountTest() throws ApiException {
        HistoricProcessInstanceQueryDto historicProcessInstanceQueryDto = null;
        CountResultDto response = api.queryHistoricProcessInstancesCount(historicProcessInstanceQueryDto);

        // TODO: test validations
    }
    
    /**
     * Set Removal Time Async (POST)
     *
     * Sets the removal time to multiple historic process instances asynchronously (batch).  At least &#x60;historicProcessInstanceIds&#x60; or &#x60;historicProcessInstanceQuery&#x60; has to be provided. If both are provided, all instances matching query criterion and instances from the list will be updated with a removal time.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setRemovalTimeAsyncTest() throws ApiException {
        SetRemovalTimeToHistoricProcessInstancesDto setRemovalTimeToHistoricProcessInstancesDto = null;
        BatchDto response = api.setRemovalTimeAsync(setRemovalTimeToHistoricProcessInstancesDto);

        // TODO: test validations
    }
    
}
